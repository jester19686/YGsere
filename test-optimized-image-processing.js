#!/usr/bin/env node

/**
 * üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É OptimizedImageProcessor –∏ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
 */

require('dotenv').config();

const OptimizedImageProcessor = require('./lib/OptimizedImageProcessor');
const QueueManager = require('./lib/QueueManager');
const MetricsCollector = require('./lib/MetricsCollector');
const { ErrorHandler } = require('./lib/ErrorHandler');

async function testOptimizedImageProcessing() {
  console.log('üß™ === –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n');
  
  let imageProcessor;
  let queueManager;
  
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const metricsCollector = new MetricsCollector();
    const errorHandler = new ErrorHandler(metricsCollector);
    queueManager = new QueueManager(metricsCollector, errorHandler);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    imageProcessor = new OptimizedImageProcessor({
      maxWorkers: 2,
      maxConcurrentTasks: 3,
      taskTimeout: 60000,
      enableMetrics: true
    });
    
    await imageProcessor.initialize();
    console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n');
    
    // 2. –¢–µ—Å—Ç health check
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    const health = await imageProcessor.healthCheck();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${health.status}`);
    console.log(`   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${health.details.initialized}`);
    console.log(`   Worker pool: ${health.details.workerPool}`);
    console.log('‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω\n');
    
    // 3. –¢–µ—Å—Ç —Å –º–æ–∫-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    console.log('üñºÔ∏è –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∫-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const mockImageData = {
      file_id: 'test_file_id_123',
      file_url: 'https://picsum.photos/800/600.jpg', // –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      width: 800,
      height: 600,
      file_size: 150000
    };
    
    const startTime = Date.now();
    
    try {
      const result = await imageProcessor.quickAnalyze(mockImageData);
      const processingTime = Date.now() - startTime;
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}ms`);
      console.log(`   –ê–Ω–∞–ª–∏–∑: ${result.analysis ? '–≤—ã–ø–æ–ª–Ω–µ–Ω' : '–ø—Ä–æ–ø—É—â–µ–Ω'}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${result.analysis?.width}x${result.analysis?.height}`);
      console.log(`   –§–æ—Ä–º–∞—Ç: ${result.analysis?.format}`);
      console.log(`   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${result.analysis?.qualityScore}/100`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
      if (error.message.includes('network') || error.message.includes('download')) {
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL');
      }
    }
    console.log('');
    
    // 4. –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('‚ö° –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    console.log('   –ó–∞–ø—É—Å–∫–∞—é 3 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...');
    
    const parallelTasks = [
      imageProcessor.quickAnalyze({ ...mockImageData, file_id: 'test_1' }),
      imageProcessor.quickAnalyze({ ...mockImageData, file_id: 'test_2' }),
      imageProcessor.quickAnalyze({ ...mockImageData, file_id: 'test_3' })
    ];
    
    const parallelStartTime = Date.now();
    
    try {
      const results = await Promise.allSettled(parallelTasks);
      const parallelTime = Date.now() - parallelStartTime;
      
      const successful = results.filter(r => r.status === 'fulfilled').length;
      const failed = results.filter(r => r.status === 'rejected').length;
      
      console.log(`‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${parallelTime}ms`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
      console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
    }
    console.log('');
    
    // 5. –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫...');
    const metrics = imageProcessor.getMetrics();
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${metrics.totalProcessed}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${metrics.totalFailed}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${metrics.queuedTasks}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${metrics.averageProcessingTime.toFixed(2)}ms`);
    console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã\n');
    
    // 6. –¢–µ—Å—Ç worker stats
    console.log('üë∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤...');
    const workerStats = await imageProcessor.getWorkerStats();
    console.log(`   –í—Å–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: ${workerStats.totalWorkers}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${workerStats.activeWorkers}`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞\n');
    
    // 7. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å QueueManager
    console.log('üîó –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å QueueManager...');
    
    const queueHealth = await queueManager.healthCheck();
    console.log(`   –°—Ç–∞—Ç—É—Å QueueManager: ${queueHealth.status}`);
    console.log(`   Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: ${queueHealth.redis.connected}`);
    console.log(`   ImageProcessor —Å—Ç–∞—Ç—É—Å: ${queueHealth.imageProcessor?.status}`);
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
    
    // 8. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
    console.log('üöÄ –¢–µ—Å—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    console.log('   –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è...');
    
    let counter = 0;
    const incrementInterval = setInterval(() => {
      counter++;
      if (counter % 10 === 0) {
        console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—á–µ—Ç—á–∏–∫ = ${counter}`);
      }
    }, 100);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const longProcessingTask = imageProcessor.fullProcess(mockImageData).catch(e => e);
    
    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫
    await new Promise(resolve => setTimeout(resolve, 2000));
    clearInterval(incrementInterval);
    
    console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–ª ${counter} —Ü–∏–∫–ª–æ–≤ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã`);
    console.log('‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
    await longProcessingTask;
    
    console.log('üéâ === –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´ ===\n');
    
    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   ‚úÖ OptimizedImageProcessor –≥–æ—Ç–æ–≤ –∫ production');
    console.log('   ‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ Worker threads –∏–∑–æ–ª–∏—Ä—É—é—Ç CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
    console.log('   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:');
    console.error(`   ${error.name}: ${error.message}`);
    
    if (process.env.NODE_ENV === 'development') {
      console.error('\nüìö Stack trace:');
      console.error(error.stack);
    }
    
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è worker threads');
    console.log('   3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    console.log('   4. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
    
  } finally {
    // Cleanup
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (imageProcessor) {
      try {
        await imageProcessor.shutdown();
        console.log('‚úÖ OptimizedImageProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OptimizedImageProcessor:', error.message);
      }
    }
    
    if (queueManager) {
      try {
        await queueManager.shutdown();
        console.log('‚úÖ QueueManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ QueueManager:', error.message);
      }
    }
    
    console.log('‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüì° –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ç–µ—Å—Ç...');
  process.exit(0);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('\nüí• Unhandled Promise Rejection:');
  console.error('   Reason:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testOptimizedImageProcessing()
    .then(() => {
      console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = testOptimizedImageProcessing;
