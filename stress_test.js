#!/usr/bin/env node

/**
 * –°–¢–†–ï–°–°-–¢–ï–°–¢ –∏–≥—Ä—ã "–ë—É–Ω–∫–µ—Ä"
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤, –º–Ω–æ–≥–æ –ª–æ–±–±–∏, –¥–æ–ª–≥–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
 */

const { io } = require('socket.io-client');

const CONFIG = {
  SERVER_URL: 'http://localhost:4000',
  TOTAL_PLAYERS: 50,        // 50 –∏–≥—Ä–æ–∫–æ–≤!
  ROOMS_COUNT: 12,          // 12 –ª–æ–±–±–∏!
  PLAYERS_PER_ROOM: 4,      // –ø–æ 4 –∏–≥—Ä–æ–∫–∞ –≤ –∫–∞–∂–¥–æ–º –ª–æ–±–±–∏
  SIMULATION_DELAY: 100,    // –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
  GAME_ROUNDS: 5,           // 5 —Ä–∞—É–Ω–¥–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ!
  WAVE_DELAY: 2000,         // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
  TOTAL_WAVES: 3,           // 3 –≤–æ–ª–Ω—ã –∏–≥—Ä
  CONNECTION_BATCH: 10,     // –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ 10 –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Ä–∞–∑
};

class StressTestPlayer {
  constructor(id) {
    this.id = id;
    this.nick = `Stress${String(id).padStart(3, '0')}`;
    this.socket = null;
    this.room = null;
    this.connected = false;
    this.gameStarted = false;
    this.isHost = false;
    this.actionsCount = 0;
    this.errors = 0;
  }

  async connect() {
    return new Promise((resolve, reject) => {
      this.socket = io(CONFIG.SERVER_URL, {
        transports: ['websocket'],
        timeout: 15000,
        forceNew: true,
      });
      
      this.socket.on('connect', () => {
        this.connected = true;
        resolve();
      });

      this.socket.on('disconnect', () => {
        this.connected = false;
      });

      this.socket.on('room:state', (data) => {
        this.room = data.roomId;
        this.isHost = data.hostId === this.socket.id;
      });

      this.socket.on('game:state', (data) => {
        this.gameStarted = true;
      });

      this.socket.on('presence', (data) => {
        // –ú–æ–ª—á–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      });

      this.socket.on('error', (error) => {
        this.errors++;
      });

      setTimeout(() => reject(new Error('Connection timeout')), 20000);
    });
  }

  async createRoom() {
    try {
      const response = await fetch(`${CONFIG.SERVER_URL}/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          maxPlayers: CONFIG.PLAYERS_PER_ROOM,
          game: 'bunker',
          open: true
        })
      });
      
      const data = await response.json();
      return data.code;
    } catch (error) {
      this.errors++;
      return null;
    }
  }

  async joinRoom(roomCode) {
    this.socket.emit('joinRoom', {
      roomId: roomCode,
      nick: this.nick,
      clientId: this.socket.id,
      avatarUrl: null
    });
    this.actionsCount++;
  }

  async startGame() {
    this.socket.emit('room:start', { roomId: this.room });
    this.actionsCount++;
  }

  async revealCard(key) {
    this.socket.emit('game:reveal', {
      roomId: this.room,
      key: key
    });
    this.actionsCount++;
  }

  async vote(targetId) {
    this.socket.emit('game:vote', {
      roomId: this.room,
      targetId: targetId
    });
    this.actionsCount++;
  }

  async skipVote() {
    this.socket.emit('game:skipVote', {
      roomId: this.room
    });
    this.actionsCount++;
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
    }
  }
}

class StressTestSimulator {
  constructor() {
    this.players = [];
    this.rooms = [];
    this.stats = {
      connected: 0,
      roomsCreated: 0,
      gamesStarted: 0,
      gamesCompleted: 0,
      totalActions: 0,
      totalErrors: 0,
      startTime: null,
      endTime: null
    };
  }

  async initialize() {
    console.log('üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–†–ï–°–°-–¢–ï–°–¢–ê');
    console.log('='.repeat(80));
    console.log(`üìä –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:`);
    console.log(`   ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: ${CONFIG.TOTAL_PLAYERS}`);
    console.log(`   ‚Ä¢ –õ–æ–±–±–∏: ${CONFIG.ROOMS_COUNT}`);
    console.log(`   ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏: ${CONFIG.PLAYERS_PER_ROOM}`);
    console.log(`   ‚Ä¢ –†–∞—É–Ω–¥–æ–≤ –≤ –∏–≥—Ä–µ: ${CONFIG.GAME_ROUNDS}`);
    console.log(`   ‚Ä¢ –í–æ–ª–Ω –∏–≥—Ä: ${CONFIG.TOTAL_WAVES}`);
    console.log(`   ‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${CONFIG.CONNECTION_BATCH}`);
    console.log('='.repeat(80));

    this.stats.startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (let i = 1; i <= CONFIG.TOTAL_PLAYERS; i++) {
      this.players.push(new StressTestPlayer(i));
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏
    console.log('\nüîå –ü–ê–ö–ï–¢–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ò–ì–†–û–ö–û–í...');
    for (let i = 0; i < this.players.length; i += CONFIG.CONNECTION_BATCH) {
      const batch = this.players.slice(i, i + CONFIG.CONNECTION_BATCH);
      const batchPromises = batch.map(player => this.connectPlayer(player));
      
      await Promise.allSettled(batchPromises);
      
      console.log(`‚úÖ –ü–∞–∫–µ—Ç ${Math.floor(i / CONFIG.CONNECTION_BATCH) + 1}: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ ${this.stats.connected} –∏–≥—Ä–æ–∫–æ–≤`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`\n‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–û ${this.stats.connected} –∏–∑ ${CONFIG.TOTAL_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤`);
  }

  async connectPlayer(player) {
    try {
      await player.connect();
      this.stats.connected++;
    } catch (error) {
      this.stats.totalErrors++;
    }
  }

  async createRooms() {
    console.log('\nüè† –°–û–ó–î–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ê –õ–û–ë–ë–ò...');
    
    const hosts = this.players.filter(p => p.connected).slice(0, CONFIG.ROOMS_COUNT);
    
    for (let i = 0; i < hosts.length; i++) {
      const host = hosts[i];
      const roomCode = await host.createRoom();
      
      if (roomCode) {
        this.rooms.push({
          code: roomCode,
          host: host,
          players: [host],
          gameStarted: false,
          completedRounds: 0
        });
        this.stats.roomsCreated++;
      } else {
        this.stats.totalErrors++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª–æ–±–±–∏
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    console.log(`‚úÖ –°–û–ó–î–ê–ù–û ${this.stats.roomsCreated} –õ–û–ë–ë–ò`);
  }

  async fillRooms() {
    console.log('\nüë• –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –õ–û–ë–ë–ò...');
    
    const availablePlayers = this.players.filter(p => p.connected && !p.room);
    
    for (const room of this.rooms) {
      const neededPlayers = CONFIG.PLAYERS_PER_ROOM - room.players.length;
      
      for (let i = 0; i < neededPlayers && availablePlayers.length > 0; i++) {
        const player = availablePlayers.shift();
        if (player) {
          await player.joinRoom(room.code);
          room.players.push(player);
          await new Promise(resolve => setTimeout(resolve, 50));
        }
      }
    }
    
    console.log(`‚úÖ –í–°–ï –õ–û–ë–ë–ò –ó–ê–ü–û–õ–ù–ï–ù–´`);
  }

  async runWave(waveNumber) {
    console.log(`\nüåä –í–û–õ–ù–ê ${waveNumber}/${CONFIG.TOTAL_WAVES}`);
    console.log('='.repeat(50));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –≤ –≤–æ–ª–Ω–µ
    console.log('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ò–ì–† –í –í–û–õ–ù–ï...');
    const startPromises = this.rooms.map(async (room, index) => {
      await room.host.startGame();
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      let attempts = 0;
      while (!room.host.gameStarted && attempts < 30) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
      }
      
      if (room.host.gameStarted) {
        room.gameStarted = true;
        this.stats.gamesStarted++;
      }
    });

    await Promise.all(startPromises);
    console.log(`‚úÖ –ó–ê–ü–£–©–ï–ù–û ${this.stats.gamesStarted} –ò–ì–† –í –í–û–õ–ù–ï`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Å–µ –∏–≥—Ä—ã –≤ –≤–æ–ª–Ω–µ
    console.log('üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–°–ï–• –ò–ì–† –í –í–û–õ–ù–ï...');
    const gamePromises = this.rooms.map(async (room) => {
      if (!room.gameStarted) return;
      
      for (let round = 1; round <= CONFIG.GAME_ROUNDS; round++) {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç
        for (const player of room.players) {
          if (!player.connected) continue;
          
          const cardKeys = ['gender', 'body', 'trait', 'profession', 'health', 'hobby', 'phobia', 'bigItem', 'backpack', 'extra'];
          const randomKey = cardKeys[Math.floor(Math.random() * cardKeys.length)];
          
          await player.revealCard(randomKey);
          await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        for (const player of room.players) {
          if (!player.connected) continue;
          
          if (Math.random() < 0.7) {
            const otherPlayers = room.players.filter(p => p.id !== player.id && p.connected);
            if (otherPlayers.length > 0) {
              const target = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
              await player.vote(target.socket.id);
            }
          } else {
            await player.skipVote();
          }
          
          await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
        }

        // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        room.completedRounds++;
      }

      this.stats.gamesCompleted++;
    });

    await Promise.all(gamePromises);
    console.log(`‚úÖ –í–û–õ–ù–ê ${waveNumber} –ó–ê–í–ï–†–®–ï–ù–ê`);
  }

  async runStressTest() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initialize();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏
      await this.createRooms();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–±–±–∏
      await this.fillRooms();
      
      // –ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω –∏–≥—Ä
      for (let wave = 1; wave <= CONFIG.TOTAL_WAVES; wave++) {
        await this.runWave(wave);
        
        if (wave < CONFIG.TOTAL_WAVES) {
          console.log(`\n‚è≥ –ü–ê–£–ó–ê –ü–ï–†–ï–î –í–û–õ–ù–û–ô ${wave + 1}...`);
          await new Promise(resolve => setTimeout(resolve, CONFIG.WAVE_DELAY));
        }
      }
      
      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.printFinalStats();
      
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –°–¢–†–ï–°–°-–¢–ï–°–¢–ï:', error);
    } finally {
      this.cleanup();
    }
  }

  printFinalStats() {
    this.stats.endTime = Date.now();
    const duration = Math.round((this.stats.endTime - this.stats.startTime) / 1000);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.totalActions = this.players.reduce((sum, p) => sum + p.actionsCount, 0);
    this.stats.totalErrors = this.players.reduce((sum, p) => sum + p.errors, 0) + this.stats.totalErrors;
    
    console.log('\n' + '='.repeat(80));
    console.log('üî• –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ï–°–°-–¢–ï–°–¢–ê');
    console.log('='.repeat(80));
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
    console.log(`üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${this.stats.connected}/${CONFIG.TOTAL_PLAYERS} (${Math.round(this.stats.connected/CONFIG.TOTAL_PLAYERS*100)}%)`);
    console.log(`üè† –°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏: ${this.stats.roomsCreated}/${CONFIG.ROOMS_COUNT} (${Math.round(this.stats.roomsCreated/CONFIG.ROOMS_COUNT*100)}%)`);
    console.log(`üöÄ –ó–∞–ø—É—â–µ–Ω–æ –∏–≥—Ä: ${this.stats.gamesStarted}`);
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: ${this.stats.gamesCompleted}`);
    console.log(`üéÆ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${this.stats.totalActions}`);
    console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${this.stats.totalErrors}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–≥—Ä: ${Math.round((this.stats.gamesCompleted / this.stats.gamesStarted) * 100)}%`);
    console.log(`‚ö° –î–µ–π—Å—Ç–≤–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: ${Math.round(this.stats.totalActions / duration)}`);
    console.log(`üéØ –ò–≥—Ä –≤ —Å–µ–∫—É–Ω–¥—É: ${Math.round(this.stats.gamesCompleted / duration * 10) / 10}`);
    console.log('='.repeat(80));
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.stats.totalErrors === 0) {
      console.log('üèÜ –û–¢–õ–ò–ß–ù–û! –ù–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫!');
    } else if (this.stats.totalErrors < 5) {
      console.log('‚úÖ –•–û–†–û–®–û! –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏');
    } else if (this.stats.totalErrors < 20) {
      console.log('‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞');
    } else {
      console.log('‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }

  cleanup() {
    console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –°–¢–†–ï–°–°-–¢–ï–°–¢–ê...');
    
    for (const player of this.players) {
      player.disconnect();
    }
    
    console.log('‚úÖ –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
  try {
    const response = await fetch(`${CONFIG.SERVER_URL}/api/stats`);
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node index.js');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const serverOk = await checkServer();
  if (!serverOk) {
    process.exit(1);
  }

  const simulator = new StressTestSimulator();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    simulator.cleanup();
    process.exit(0);
  });
  
  await simulator.runStressTest();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { StressTestSimulator, StressTestPlayer };




