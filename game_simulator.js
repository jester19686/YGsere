#!/usr/bin/env node

/**
 * –°–∏–º—É–ª—è—Ç–æ—Ä –∏–≥—Ä—ã "–ë—É–Ω–∫–µ—Ä"
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, –∑–∞—Ö–æ–¥—è—â–∏—Ö –≤ —Ä–∞–∑–Ω—ã–µ –ª–æ–±–±–∏ –∏ –∏–≥—Ä–∞—é—â–∏—Ö
 */

const { io } = require('socket.io-client');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
const CONFIG = {
  SERVER_URL: 'http://localhost:4000',
  TOTAL_PLAYERS: 8,
  ROOMS_COUNT: 2,
  SIMULATION_SPEED: 1000, // –º—Å –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  GAME_DURATION: 300000, // 5 –º–∏–Ω—É—Ç
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const randomNick = () => `Player${Math.floor(Math.random() * 1000)}`;
const randomRoom = () => Math.random().toString(36).substring(2, 6).toUpperCase();
const randomDelay = (min = 500, max = 2000) => Math.floor(Math.random() * (max - min)) + min;

// –ö–ª–∞—Å—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
class SimulatedPlayer {
  constructor(id, serverUrl) {
    this.id = id;
    this.nick = randomNick();
    this.socket = null;
    this.room = null;
    this.isHost = false;
    this.connected = false;
    this.gameStarted = false;
    this.actions = [];
    this.serverUrl = serverUrl;
  }

  async connect() {
    return new Promise((resolve, reject) => {
      this.socket = io(this.serverUrl, {
        transports: ['websocket'],
        timeout: 5000,
      });

      this.socket.on('connect', () => {
        console.log(`üéÆ –ò–≥—Ä–æ–∫ ${this.nick} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = true;
        resolve();
      });

      this.socket.on('disconnect', () => {
        console.log(`‚ùå –ò–≥—Ä–æ–∫ ${this.nick} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = false;
      });

      this.socket.on('room:state', (data) => {
        console.log(`üì¢ ${this.nick} –ø–æ–ª—É—á–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:`, data.roomId);
        this.room = data.roomId;
        this.isHost = data.hostId === this.socket.id;
      });

      this.socket.on('game:state', (data) => {
        console.log(`üéØ ${this.nick} –ø–æ–ª—É—á–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`);
        this.gameStarted = true;
      });

      this.socket.on('presence', (data) => {
        console.log(`üë• ${this.nick} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}: ${data.players.length} –∏–≥—Ä–æ–∫–æ–≤`);
      });

      this.socket.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É ${this.nick}:`, error);
      });

      setTimeout(() => reject(new Error('Timeout')), 10000);
    });
  }

  async joinRoom(roomCode) {
    if (!this.connected) return false;
    
    return new Promise((resolve) => {
      this.socket.emit('joinRoom', {
        roomId: roomCode,
        nick: this.nick,
        clientId: this.socket.id,
        avatarUrl: null
      });
      
      setTimeout(() => resolve(true), 1000);
    });
  }

  async createRoom() {
    if (!this.connected) return null;
    
    try {
      const response = await fetch(`${this.serverUrl}/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          maxPlayers: 4,
          game: 'bunker',
          open: true
        })
      });
      
      const data = await response.json();
      console.log(`üè† ${this.nick} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É: ${data.code}`);
      return data.code;
    } catch (error) {
      console.error(`‚ùå ${this.nick} –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É:`, error.message);
      return null;
    }
  }

  async startGame() {
    if (!this.connected || !this.room || !this.isHost) return false;
    
    this.socket.emit('room:start', { roomId: this.room });
    console.log(`üöÄ ${this.nick} –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ ${this.room}`);
    return true;
  }

  async revealCard(key) {
    if (!this.connected || !this.room) return false;
    
    this.socket.emit('game:reveal', {
      roomId: this.room,
      key: key
    });
    console.log(`üÉè ${this.nick} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É: ${key}`);
    return true;
  }

  async vote(targetId) {
    if (!this.connected || !this.room) return false;
    
    this.socket.emit('game:vote', {
      roomId: this.room,
      targetId: targetId
    });
    console.log(`üó≥Ô∏è ${this.nick} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ ${targetId}`);
    return true;
  }

  async skipVote() {
    if (!this.connected || !this.room) return false;
    
    this.socket.emit('game:skipVote', {
      roomId: this.room
    });
    console.log(`‚è≠Ô∏è ${this.nick} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ`);
    return true;
  }

  async leaveRoom() {
    if (!this.connected || !this.room) return false;
    
    this.socket.emit('leaveRoom', { roomId: this.room });
    console.log(`üö™ ${this.nick} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${this.room}`);
    this.room = null;
    this.isHost = false;
    return true;
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.connected = false;
    }
  }
}

// –ö–ª–∞—Å—Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–≥—Ä—ã
class GameSimulator {
  constructor(config) {
    this.config = config;
    this.players = [];
    this.rooms = [];
    this.isRunning = false;
  }

  async initialize() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–≥—Ä—ã...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (let i = 0; i < this.config.TOTAL_PLAYERS; i++) {
      const player = new SimulatedPlayer(i, this.config.SERVER_URL);
      this.players.push(player);
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (const player of this.players) {
      try {
        await player.connect();
        await new Promise(resolve => setTimeout(resolve, randomDelay(100, 500)));
      } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${player.nick}:`, error.message);
      }
    }

    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ ${this.players.filter(p => p.connected).length} –∏–≥—Ä–æ–∫–æ–≤`);
  }

  async createRooms() {
    console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç...');
    
    const hosts = this.players.filter(p => p.connected).slice(0, this.config.ROOMS_COUNT);
    
    for (const host of hosts) {
      const roomCode = await host.createRoom();
      if (roomCode) {
        this.rooms.push({
          code: roomCode,
          host: host,
          players: [host]
        });
        host.room = roomCode;
        host.isHost = true;
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.rooms.length} –∫–æ–º–Ω–∞—Ç`);
  }

  async fillRooms() {
    console.log('üë• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç...');
    
    const availablePlayers = this.players.filter(p => p.connected && !p.room);
    
    for (const room of this.rooms) {
      const maxPlayers = 4;
      const neededPlayers = maxPlayers - room.players.length;
      
      for (let i = 0; i < neededPlayers && availablePlayers.length > 0; i++) {
        const player = availablePlayers.shift();
        if (player) {
          await player.joinRoom(room.code);
          room.players.push(player);
          await new Promise(resolve => setTimeout(resolve, randomDelay(500, 1500)));
        }
      }
    }

    console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
  }

  async simulateGame(room) {
    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    await room.host.startGame();
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –∏–≥—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–µ—Ç—Å—è
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code}...`);
    let attempts = 0;
    while (!room.host.gameStarted && attempts < 10) {
      await new Promise(resolve => setTimeout(resolve, 500));
      attempts++;
    }
    
    if (room.host.gameStarted) {
      console.log(`‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code}!`);
    } else {
      console.log(`‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code} –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥`);
      return;
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤
    for (let round = 1; round <= 3; round++) {
      console.log(`\nüîÑ –†–∞—É–Ω–¥ ${round} –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code}`);
      
      // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
      for (const player of room.players) {
        if (!player.connected) continue;
        
        const cardKeys = ['gender', 'body', 'trait', 'profession', 'health', 'hobby', 'phobia', 'bigItem', 'backpack', 'extra'];
        const randomKey = cardKeys[Math.floor(Math.random() * cardKeys.length)];
        
        await player.revealCard(randomKey);
        await new Promise(resolve => setTimeout(resolve, randomDelay(1000, 3000)));
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
      await new Promise(resolve => setTimeout(resolve, 5000));

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
      console.log(`üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code}`);
      for (const player of room.players) {
        if (!player.connected) continue;
        
        // –°–ª—É—á–∞–π–Ω–æ –≥–æ–ª–æ—Å—É–µ–º –∑–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (Math.random() < 0.7) {
          const otherPlayers = room.players.filter(p => p.id !== player.id && p.connected);
          if (otherPlayers.length > 0) {
            const target = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
            await player.vote(target.id);
          }
        } else {
          await player.skipVote();
        }
        
        await new Promise(resolve => setTimeout(resolve, randomDelay(500, 2000)));
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 10000));
    }

    console.log(`‚úÖ –ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  }

  async runSimulation() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–≥—Ä—ã...');
    this.isRunning = true;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initialize();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
      await this.createRooms();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
      await this.fillRooms();
      
      // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const gamePromises = this.rooms.map(room => this.simulateGame(room));
      await Promise.all(gamePromises);
      
      console.log('\nüéâ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏:', error);
    } finally {
      this.cleanup();
    }
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞...');
    
    for (const player of this.players) {
      player.disconnect();
    }
    
    this.isRunning = false;
    console.log('‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
async function main() {
  console.log('üéÆ –°–∏–º—É–ª—è—Ç–æ—Ä –∏–≥—Ä—ã "–ë—É–Ω–∫–µ—Ä"');
  console.log('='.repeat(50));
  
  const simulator = new GameSimulator(CONFIG);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    simulator.cleanup();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    simulator.cleanup();
    process.exit(0);
  });
  
  // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
  await simulator.runSimulation();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
async function checkServer() {
  try {
    const response = await fetch(`${CONFIG.SERVER_URL}/api/stats`);
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if (require.main === module) {
  checkServer().then(serverOk => {
    if (serverOk) {
      main().catch(console.error);
    } else {
      process.exit(1);
    }
  });
}

module.exports = { GameSimulator, SimulatedPlayer };
