/**
 * üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ß–ï–†–ï–î–ï–ô
 * 
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏,
 * —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
 */

const axios = require('axios');
const QueueManager = require('./lib/QueueManager');
const MetricsCollector = require('./lib/MetricsCollector');
const { ErrorHandler } = require('./lib/ErrorHandler');

class ComprehensiveStressTest {
  constructor() {
    this.metricsCollector = new MetricsCollector();
    this.errorHandler = new ErrorHandler(this.metricsCollector);
    this.queueManager = new QueueManager(this.metricsCollector, this.errorHandler);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.config = {
      // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      duration: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      monitoringPort: 3001,
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      totalUsers: 100,
      concurrentUsers: 20,
      
      // –¢–∏–ø—ã –Ω–∞–≥—Ä—É–∑–∫–∏
      loadTypes: {
        light: { rps: 5, users: 10 },      // 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫, 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        medium: { rps: 15, users: 30 },    // 15 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫, 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        heavy: { rps: 30, users: 50 },     // 30 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫, 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        peak: { rps: 50, users: 100 }      // 50 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫, 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      },
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
      messageDistribution: {
        simpleText: 40,    // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        complexText: 25,   // –°–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        commands: 15,      // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        images: 15,        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mixed: 5          // –°–º–µ—à–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.testStats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      responsetimes: [],
      queueTimes: [],
      errors: {},
      startTime: null,
      endTime: null,
      userSessions: new Map(),
      peakConcurrency: 0,
      currentConcurrency: 0
    };
    
    // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    this.messageTemplates = this.initializeMessageTemplates();
    
    console.log('üß™ ComprehensiveStressTest –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  initializeMessageTemplates() {
    return {
      simpleText: [
        '–ü—Ä–∏–≤–µ—Ç!',
        '–ö–∞–∫ –¥–µ–ª–∞?',
        '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?',
        '–°–ø–∞—Å–∏–±–æ',
        '–ü–æ–Ω—è—Ç–Ω–æ',
        '–•–æ—Ä–æ—à–æ',
        '–î–∞',
        '–ù–µ—Ç',
        '–ú–æ–∂–µ—Ç –±—ã—Ç—å',
        '–°–æ–≥–ª–∞—Å–µ–Ω',
        '–û—Ç–ª–∏—á–Ω–æ!',
        '–°—É–ø–µ—Ä',
        '–ö–ª–∞—Å—Å–Ω–æ',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
        '–ö—Ä—É—Ç–æ'
      ],
      
      complexText: [
        '–ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏?',
        '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤–ª–∏—è–Ω–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É –∏ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞',
        '–ö–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞ –≤–ª–∏—è—é—Ç –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –∏ —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã?',
        '–û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ –Ω–∞ –∫–ª–µ—Ç–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ',
        '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π',
        '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–ª–∞–Ω–∞—Ö –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –ú–∞—Ä—Å–∞',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ—Ä—ã–≤—ã –æ–∂–∏–¥–∞—é—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è?',
        '–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏ –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö'
      ],
      
      commands: [
        '/start',
        '/help', 
        '/status',
        '/stats',
        '/health'
      ],
      
      questions: [
        '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω?',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?',
        '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å–∞–π—Ç?',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ API?',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?',
        '–ö–∞–∫ –∏–∑—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ DevOps?',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è?'
      ]
    };
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
   */
  createVirtualUser(userId) {
    return {
      id: userId,
      name: `User${userId}`,
      
      // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      activity: Math.random(), // 0-1, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      messageFrequency: 1000 + Math.random() * 3000, // 1-4 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      preferredMessageType: this.getRandomMessageType(),
      sessionDuration: 30000 + Math.random() * 120000, // 30—Å–µ–∫ - 2.5–º–∏–Ω —Å–µ—Å—Å–∏—è
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ
      isActive: false,
      lastMessageTime: 0,
      messagesCount: 0,
      sessionStartTime: 0,
      
      // –ú–µ—Ç—Ä–∏–∫–∏
      responseTimeSum: 0,
      averageResponseTime: 0
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   */
  getRandomMessageType() {
    const rand = Math.random() * 100;
    let cumulative = 0;
    
    for (const [type, percentage] of Object.entries(this.config.messageDistribution)) {
      cumulative += percentage;
      if (rand <= cumulative) {
        return type;
      }
    }
    
    return 'simpleText'; // fallback
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  generateMessage(type) {
    switch (type) {
      case 'simpleText':
        return this.getRandomFromArray(this.messageTemplates.simpleText);
        
      case 'complexText':
        return this.getRandomFromArray(this.messageTemplates.complexText);
        
      case 'commands':
        return this.getRandomFromArray(this.messageTemplates.commands);
        
      case 'images':
        return {
          type: 'image',
          data: this.generateMockImageData()
        };
        
      case 'mixed':
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        const text = this.getRandomFromArray(this.messageTemplates.questions);
        return `${text} –ò –µ—â–µ, ${this.getRandomFromArray(this.messageTemplates.simpleText)}`;
        
      default:
        return this.getRandomFromArray(this.messageTemplates.simpleText);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  generateMockImageData() {
    return [
      {
        file_id: `test_image_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        file_unique_id: `unique_${Math.random().toString(36).substr(2, 9)}`,
        width: 800 + Math.floor(Math.random() * 1200),
        height: 600 + Math.floor(Math.random() * 800),
        file_size: 50000 + Math.floor(Math.random() * 200000)
      }
    ];
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
   */
  async sendMessage(user, message) {
    const startTime = Date.now();
    
    try {
      this.testStats.totalRequests++;
      this.testStats.currentConcurrency++;
      
      if (this.testStats.currentConcurrency > this.testStats.peakConcurrency) {
        this.testStats.peakConcurrency = this.testStats.currentConcurrency;
      }
      
      let job;
      
      if (typeof message === 'object' && message.type === 'image') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        job = await this.queueManager.addImageProcessingJob({
          userId: user.id,
          chatId: user.id,
          photoData: message.data,
          processingType: 'analyze',
          priority: Math.floor(Math.random() * 3),
          timestamp: new Date().toISOString(),
          testRequest: true, // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
          userInfo: {
            firstName: user.name,
            testUser: true
          }
        });
      } else if (typeof message === 'string' && message.startsWith('/')) {
        // –ö–æ–º–∞–Ω–¥–∞
        job = await this.queueManager.addNotificationJob({
          userId: user.id,
          chatId: user.id,
          type: 'command_response',
          command: message,
          priority: 0, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥
          timestamp: new Date().toISOString(),
          testRequest: true
        });
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageType = this.classifyMessage(message);
        const priority = messageType === 'complex' ? 2 : messageType === 'question' ? 1 : 0;
        
        job = await this.queueManager.addTextGenerationJob({
          userId: user.id,
          chatId: user.id,
          messageText: message,
          messageType: messageType,
          priority: priority,
          timestamp: new Date().toISOString(),
          testRequest: true,
          userInfo: {
            firstName: user.name,
            testUser: true
          }
        });
      }
      
      const queueTime = Date.now() - startTime;
      this.testStats.queueTimes.push(queueTime);
      this.testStats.successfulRequests++;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.messagesCount++;
      user.lastMessageTime = Date.now();
      
      console.log(`‚úÖ ${user.name}: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (ID: ${job.id}, –≤—Ä–µ–º—è: ${queueTime}ms)`);
      
      return { success: true, jobId: job.id, queueTime };
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.testStats.failedRequests++;
      this.testStats.responseTime.push(responseTime);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      const errorType = error.name || 'UnknownError';
      this.testStats.errors[errorType] = (this.testStats.errors[errorType] || 0) + 1;
      
      console.error(`‚ùå ${user.name}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - ${error.message} (–≤—Ä–µ–º—è: ${responseTime}ms)`);
      
      return { success: false, error: error.message, responseTime };
      
    } finally {
      this.testStats.currentConcurrency--;
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  classifyMessage(message) {
    if (message.length > 100) return 'complex';
    if (message.includes('?') || message.includes('–∫–∞–∫') || message.includes('—á—Ç–æ')) return 'question';
    if (message.length < 20) return 'simple';
    return 'medium';
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
   */
  async simulateUserSession(user, duration) {
    user.isActive = true;
    user.sessionStartTime = Date.now();
    
    console.log(`üë§ ${user.name}: –ù–∞—á–∏–Ω–∞—é —Å–µ—Å—Å–∏—é –Ω–∞ ${Math.round(duration/1000)}—Å`);
    
    const sessionEndTime = Date.now() + duration;
    
    while (Date.now() < sessionEndTime && user.isActive) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageType = this.getRandomMessageType();
        const message = this.generateMessage(messageType);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendMessage(user, message);
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const delay = user.messageFrequency * (0.5 + Math.random());
        await this.sleep(delay);
        
      } catch (error) {
        console.error(`‚ùå ${user.name}: –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ - ${error.message}`);
        await this.sleep(1000); // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    user.isActive = false;
    const sessionDuration = Date.now() - user.sessionStartTime;
    
    console.log(`üëã ${user.name}: –ó–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é (${Math.round(sessionDuration/1000)}—Å, ${user.messagesCount} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
    
    return {
      userId: user.id,
      duration: sessionDuration,
      messagesCount: user.messagesCount,
      averageMessageInterval: sessionDuration / user.messagesCount
    };
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async monitorSystemDuringTest() {
    const monitoringInterval = 10000; // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    while (this.testStats.startTime && !this.testStats.endTime) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
        const queueStats = await this.queueManager.getQueueStats();
        
        // –ü–æ–ª—É—á–∞–µ–º health check
        const health = await this.queueManager.healthCheck();
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const memUsage = process.memoryUsage();
        const cpuUsage = process.cpuUsage();
        
        const currentTime = Date.now();
        const elapsedTime = Math.round((currentTime - this.testStats.startTime) / 1000);
        
        console.log('\nüìä === –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ ===');
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${elapsedTime}—Å`);
        console.log(`üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${health.status}`);
        console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.testStats.totalRequests}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${this.testStats.successfulRequests}`);
        console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.testStats.failedRequests}`);
        console.log(`‚ö° –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${this.testStats.currentConcurrency} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
        console.log(`üîù –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${this.testStats.peakConcurrency} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        console.log('\nüìã –û—á–µ—Ä–µ–¥–∏:');
        for (const [name, stats] of Object.entries(queueStats)) {
          console.log(`   ${name}: –æ–∂–∏–¥–∞—é—Ç ${stats.waiting}, –∞–∫—Ç–∏–≤–Ω—ã—Ö ${stats.active}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${stats.completed}, –æ—à–∏–±–æ–∫ ${stats.failed}`);
        }
        
        // –ü–∞–º—è—Ç—å
        console.log(`\nüß† –ü–∞–º—è—Ç—å: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB / ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`);
        
        // –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞
        if (this.testStats.queueTimes.length > 0) {
          const avgQueueTime = this.testStats.queueTimes.reduce((a, b) => a + b, 0) / this.testStats.queueTimes.length;
          console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: ${avgQueueTime.toFixed(2)}ms`);
        }
        
        console.log('===============================\n');
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
      }
      
      await this.sleep(monitoringInterval);
    }
  }

  /**
   * –°—Ü–µ–Ω–∞—Ä–∏–π "–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
   */
  async runPeakLoadScenario(duration = 60000) {
    console.log('\nüöÄ === –°–¶–ï–ù–ê–†–ò–ô: –ü–ò–ö–û–í–ê–Ø –ù–ê–ì–†–£–ó–ö–ê ===');
    console.log(`–°–∏–º—É–ª—è—Ü–∏—è –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –≤—Å–ø–ª–µ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${this.config.loadTypes.peak.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    const users = Array.from({ length: this.config.loadTypes.peak.users }, (_, i) => 
      this.createVirtualUser(100000 + i)
    );
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const sessionPromises = users.map(user => 
      this.simulateUserSession(user, duration * (0.8 + Math.random() * 0.4))
    );
    
    await Promise.all(sessionPromises);
    
    console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –°—Ü–µ–Ω–∞—Ä–∏–π "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏"
   */
  async runGradualLoadScenario(duration = 180000) {
    console.log('\nüìà === –°–¶–ï–ù–ê–†–ò–ô: –ü–û–°–¢–ï–ü–ï–ù–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –ù–ê–ì–†–£–ó–ö–ò ===');
    console.log('–°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    const steps = 10;
    const stepDuration = duration / steps;
    const maxUsers = this.config.loadTypes.heavy.users;
    
    for (let step = 1; step <= steps; step++) {
      const usersInStep = Math.ceil((step / steps) * maxUsers);
      console.log(`\nüìä –®–∞–≥ ${step}/${steps}: –ó–∞–ø—É—Å–∫ ${usersInStep} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      const users = Array.from({ length: usersInStep }, (_, i) => 
        this.createVirtualUser(200000 + (step * 1000) + i)
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      const sessionPromises = users.map((user, index) => {
        const delay = index * 100; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return new Promise(resolve => {
          setTimeout(async () => {
            const sessionResult = await this.simulateUserSession(user, stepDuration);
            resolve(sessionResult);
          }, delay);
        });
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞
      await Promise.allSettled(sessionPromises);
    }
    
    console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –°—Ü–µ–Ω–∞—Ä–∏–π "–°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
   */
  async runMixedLoadScenario(duration = 240000) {
    console.log('\nüé≠ === –°–¶–ï–ù–ê–†–ò–ô: –°–ú–ï–®–ê–ù–ù–ê–Ø –ù–ê–ì–†–£–ó–ö–ê ===');
    console.log('–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    const userTypes = [
      { count: 20, activity: 'high', messageFreq: 500 },    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { count: 30, activity: 'medium', messageFreq: 2000 }, // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { count: 25, activity: 'low', messageFreq: 5000 },    // –ü–∞—Å—Å–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { count: 10, activity: 'burst', messageFreq: 100 }    // –°–ø–∞–º-–±–æ—Ç—ã (—Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã)
    ];
    
    const allUsers = [];
    let userIdCounter = 300000;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    for (const userType of userTypes) {
      for (let i = 0; i < userType.count; i++) {
        const user = this.createVirtualUser(userIdCounter++);
        user.messageFrequency = userType.messageFreq;
        user.activity = userType.activity;
        allUsers.push(user);
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–ª–Ω–∞–º–∏
    const waveSize = 15;
    const waves = Math.ceil(allUsers.length / waveSize);
    
    for (let wave = 0; wave < waves; wave++) {
      const waveUsers = allUsers.slice(wave * waveSize, (wave + 1) * waveSize);
      console.log(`üåä –í–æ–ª–Ω–∞ ${wave + 1}/${waves}: ${waveUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      const wavePromises = waveUsers.map(user => 
        this.simulateUserSession(user, duration * (0.7 + Math.random() * 0.6))
      );
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
      if (wave < waves - 1) {
        setTimeout(() => {}, 2000);
      }
      
      await Promise.allSettled(wavePromises);
    }
    
    console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runComprehensiveStressTest() {
    console.log('\nüß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ===');
    console.log(`‚è±Ô∏è  –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(this.config.duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
    console.log(`üë• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.config.totalUsers}`);
    console.log('');
    
    this.testStats.startTime = Date.now();
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
      const monitoringPromise = this.monitorSystemDuringTest();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
      await this.runPeakLoadScenario(60000);           // 1 –º–∏–Ω—É—Ç–∞ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
      await this.sleep(10000);                          // 10 —Å–µ–∫—É–Ω–¥ –æ—Ç–¥—ã—Ö–∞
      
      await this.runGradualLoadScenario(120000);        // 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
      await this.sleep(10000);                          // 10 —Å–µ–∫—É–Ω–¥ –æ—Ç–¥—ã—Ö–∞
      
      await this.runMixedLoadScenario(120000);          // 2 –º–∏–Ω—É—Ç—ã —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
      
      this.testStats.endTime = Date.now();
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
      console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...');
      await this.waitForQueueCompletion(30000);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      await this.generateFinalReport();
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.testStats.endTime = Date.now();
    }
    
    console.log('\nüéâ === –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—è—Ö
   */
  async waitForQueueCompletion(maxWaitTime = 60000) {
    const startWait = Date.now();
    
    while (Date.now() - startWait < maxWaitTime) {
      try {
        const queueStats = await this.queueManager.getQueueStats();
        const totalActive = Object.values(queueStats).reduce((sum, stats) => sum + (stats.active || 0), 0);
        
        if (totalActive === 0) {
          console.log('‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
          break;
        }
        
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${totalActive} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...`);
        await this.sleep(2000);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:', error.message);
        break;
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  async generateFinalReport() {
    console.log('\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    
    const totalDuration = this.testStats.endTime - this.testStats.startTime;
    const totalRequests = this.testStats.totalRequests;
    const successRate = (this.testStats.successfulRequests / totalRequests * 100).toFixed(2);
    const avgRPS = (totalRequests / (totalDuration / 1000)).toFixed(2);
    
    console.log(`\n‚è±Ô∏è  –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(totalDuration / 1000)}—Å`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${totalRequests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${this.testStats.successfulRequests} (${successRate}%)`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.testStats.failedRequests}`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π RPS: ${avgRPS}`);
    console.log(`   –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${this.testStats.peakConcurrency} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    if (this.testStats.queueTimes.length > 0) {
      const sortedTimes = this.testStats.queueTimes.sort((a, b) => a - b);
      const avgTime = sortedTimes.reduce((a, b) => a + b, 0) / sortedTimes.length;
      const p50 = sortedTimes[Math.floor(sortedTimes.length * 0.5)];
      const p95 = sortedTimes[Math.floor(sortedTimes.length * 0.95)];
      const p99 = sortedTimes[Math.floor(sortedTimes.length * 0.99)];
      const maxTime = sortedTimes[sortedTimes.length - 1];
      
      console.log(`\n‚ö° –í–†–ï–ú–ï–ù–ê –û–¢–í–ï–¢–ê (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å):`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${avgTime.toFixed(2)}ms`);
      console.log(`   –ú–µ–¥–∏–∞–Ω–∞ (P50): ${p50}ms`);
      console.log(`   P95: ${p95}ms`);
      console.log(`   P99: ${p99}ms`);
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${maxTime}ms`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    if (Object.keys(this.testStats.errors).length > 0) {
      console.log(`\n‚ùå –û–®–ò–ë–ö–ò:`);
      for (const [errorType, count] of Object.entries(this.testStats.errors)) {
        const percentage = (count / totalRequests * 100).toFixed(2);
        console.log(`   ${errorType}: ${count} (${percentage}%)`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
    try {
      const finalQueueStats = await this.queueManager.getQueueStats();
      console.log(`\nüìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ï–†–ï–î–ï–ô:`);
      for (const [name, stats] of Object.entries(finalQueueStats)) {
        console.log(`   ${name}:`);
        console.log(`     –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed || 0}`);
        console.log(`     –û—à–∏–±–æ–∫: ${stats.failed || 0}`);
        console.log(`     –û–∂–∏–¥–∞—é—Ç: ${stats.waiting || 0}`);
        console.log(`     –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active || 0}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    if (successRate < 95) {
      console.log(`   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (${successRate}%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:`);
      console.log(`      - –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤`);
      console.log(`      - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é`);
      console.log(`      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã`);
    }
    
    if (this.testStats.queueTimes.length > 0) {
      const avgTime = this.testStats.queueTimes.reduce((a, b) => a + b, 0) / this.testStats.queueTimes.length;
      if (avgTime > 100) {
        console.log(`   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å (${avgTime.toFixed(2)}ms). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:`);
        console.log(`      - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`);
        console.log(`      - –í–∫–ª—é—á–∏—Ç—å pipelining`);
        console.log(`      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å`);
      }
    }
    
    if (avgRPS < 10) {
      console.log(`   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (${avgRPS} RPS). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:`);
      console.log(`      - –£–≤–µ–ª–∏—á–∏—Ç—å concurrency –≤–æ—Ä–∫–µ—Ä–æ–≤`);
      console.log(`      - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      console.log(`      - –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ`);
    }
    
    if (successRate >= 98 && avgRPS >= 20) {
      console.log(`   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –Ω–∞–≥—Ä—É–∑–∫–µ.`);
    }
    
    console.log(`\nüìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:${this.config.monitoringPort}/admin/queues`);
    console.log('===============================================');
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  getRandomFromArray(array) {
    return array[Math.floor(Math.random() * array.length)];
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runQuickPerformanceTest() {
    console.log('\n‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã (30 —Å–µ–∫—É–Ω–¥)');
    
    this.testStats.startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    const users = Array.from({ length: 10 }, (_, i) => this.createVirtualUser(400000 + i));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    const monitoringPromise = this.monitorSystemDuringTest();
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
    const sessionPromises = users.map(user => 
      this.simulateUserSession(user, 30000) // 30 —Å–µ–∫—É–Ω–¥
    );
    
    await Promise.all(sessionPromises);
    this.testStats.endTime = Date.now();
    
    // –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    const duration = this.testStats.endTime - this.testStats.startTime;
    const rps = (this.testStats.totalRequests / (duration / 1000)).toFixed(2);
    const successRate = (this.testStats.successfulRequests / this.testStats.totalRequests * 100).toFixed(2);
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê:');
    console.log(`   RPS: ${rps}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.testStats.totalRequests}`);
    
    if (rps >= 15 && successRate >= 95) {
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!');
    } else {
      console.log('   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }

  /**
   * Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    try {
      if (this.queueManager) {
        await this.queueManager.shutdown();
      }
      
      if (this.metricsCollector) {
        await this.metricsCollector.shutdown();
      }
      
      console.log('‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup:', error.message);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = ComprehensiveStressTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  async function main() {
    const stressTest = new ComprehensiveStressTest();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
      await stressTest.cleanup();
      process.exit(0);
    });
    
    try {
      // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testType = process.argv[2] || 'comprehensive';
      
      switch (testType) {
        case 'quick':
          await stressTest.runQuickPerformanceTest();
          break;
        case 'peak':
          await stressTest.runPeakLoadScenario(120000);
          break;
        case 'gradual':
          await stressTest.runGradualLoadScenario(180000);
          break;
        case 'mixed':
          await stressTest.runMixedLoadScenario(240000);
          break;
        default:
          await stressTest.runComprehensiveStressTest();
      }
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
      await stressTest.cleanup();
    }
  }
  
  main();
}
