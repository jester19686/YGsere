#!/usr/bin/env node

/**
 * –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –∏–≥—Ä—ã "–ë—É–Ω–∫–µ—Ä"
 * –ú–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤, –º–Ω–æ–≥–æ –ª–æ–±–±–∏, –ø–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
 */

const { io } = require('socket.io-client');

const CONFIG = {
  SERVER_URL: 'http://localhost:4000',
  TOTAL_PLAYERS: 20,        // 20 –∏–≥—Ä–æ–∫–æ–≤
  ROOMS_COUNT: 5,           // 5 –ª–æ–±–±–∏
  PLAYERS_PER_ROOM: 4,      // –ø–æ 4 –∏–≥—Ä–æ–∫–∞ –≤ –∫–∞–∂–¥–æ–º –ª–æ–±–±–∏
  SIMULATION_DELAY: 200,    // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–º—Å)
  GAME_ROUNDS: 2,           // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
};

class MassTestPlayer {
  constructor(id) {
    this.id = id;
    this.nick = `MassPlayer${String(id).padStart(3, '0')}`;
    this.socket = null;
    this.room = null;
    this.connected = false;
    this.gameStarted = false;
    this.isHost = false;
  }

  async connect() {
    return new Promise((resolve, reject) => {
      this.socket = io(CONFIG.SERVER_URL, {
        transports: ['websocket'],
        timeout: 10000,
      });
      
      this.socket.on('connect', () => {
        console.log(`‚úÖ ${this.nick} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = true;
        resolve();
      });

      this.socket.on('disconnect', () => {
        console.log(`‚ùå ${this.nick} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = false;
      });

      this.socket.on('room:state', (data) => {
        this.room = data.roomId;
        this.isHost = data.hostId === this.socket.id;
        console.log(`üì¢ ${this.nick} –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId} (—Ö–æ—Å—Ç: ${this.isHost})`);
      });

      this.socket.on('game:state', (data) => {
        this.gameStarted = true;
        console.log(`üéØ ${this.nick} –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ ${data.roomId}`);
      });

      this.socket.on('presence', (data) => {
        console.log(`üë• ${this.nick} –≤–∏–¥–∏—Ç ${data.players.length} –∏–≥—Ä–æ–∫–æ–≤ –≤ ${data.roomId}`);
      });

      this.socket.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É ${this.nick}:`, error);
      });

      setTimeout(() => reject(new Error('Timeout')), 15000);
    });
  }

  async createRoom() {
    try {
      const response = await fetch(`${CONFIG.SERVER_URL}/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          maxPlayers: CONFIG.PLAYERS_PER_ROOM,
          game: 'bunker',
          open: true
        })
      });
      
      const data = await response.json();
      console.log(`üè† ${this.nick} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É: ${data.code}`);
      return data.code;
    } catch (error) {
      console.error(`‚ùå ${this.nick} –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É:`, error.message);
      return null;
    }
  }

  async joinRoom(roomCode) {
    this.socket.emit('joinRoom', {
      roomId: roomCode,
      nick: this.nick,
      clientId: this.socket.id,
      avatarUrl: null
    });
    console.log(`üö™ ${this.nick} –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç—É ${roomCode}`);
  }

  async startGame() {
    this.socket.emit('room:start', { roomId: this.room });
    console.log(`üöÄ ${this.nick} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ ${this.room}`);
  }

  async revealCard(key) {
    this.socket.emit('game:reveal', {
      roomId: this.room,
      key: key
    });
    console.log(`üÉè ${this.nick} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É: ${key}`);
  }

  async vote(targetId) {
    this.socket.emit('game:vote', {
      roomId: this.room,
      targetId: targetId
    });
    console.log(`üó≥Ô∏è ${this.nick} –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ ${targetId}`);
  }

  async skipVote() {
    this.socket.emit('game:skipVote', {
      roomId: this.room
    });
    console.log(`‚è≠Ô∏è ${this.nick} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ`);
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
    }
  }
}

class MassiveGameSimulator {
  constructor() {
    this.players = [];
    this.rooms = [];
    this.stats = {
      connected: 0,
      roomsCreated: 0,
      gamesStarted: 0,
      gamesCompleted: 0,
      errors: 0
    };
  }

  async initialize() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    console.log(`üìä –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: ${CONFIG.TOTAL_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤, ${CONFIG.ROOMS_COUNT} –ª–æ–±–±–∏`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (let i = 1; i <= CONFIG.TOTAL_PLAYERS; i++) {
      this.players.push(new MassTestPlayer(i));
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (let i = 0; i < this.players.length; i++) {
      try {
        await this.players[i].connect();
        this.stats.connected++;
        await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
      } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å ${this.players[i].nick}:`, error.message);
        this.stats.errors++;
      }
    }

    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ ${this.stats.connected} –∏–∑ ${CONFIG.TOTAL_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤`);
  }

  async createRooms() {
    console.log('\nüè† –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏...');
    
    const hosts = this.players.filter(p => p.connected).slice(0, CONFIG.ROOMS_COUNT);
    
    for (let i = 0; i < hosts.length; i++) {
      const host = hosts[i];
      const roomCode = await host.createRoom();
      
      if (roomCode) {
        this.rooms.push({
          code: roomCode,
          host: host,
          players: [host],
          gameStarted: false
        });
        this.stats.roomsCreated++;
        console.log(`‚úÖ –õ–æ–±–±–∏ ${i + 1}/${CONFIG.ROOMS_COUNT} —Å–æ–∑–¥–∞–Ω–æ: ${roomCode}`);
      } else {
        this.stats.errors++;
      }
      
      await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY * 2));
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.stats.roomsCreated} –ª–æ–±–±–∏`);
  }

  async fillRooms() {
    console.log('\nüë• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–±–±–∏...');
    
    const availablePlayers = this.players.filter(p => p.connected && !p.room);
    
    for (const room of this.rooms) {
      const neededPlayers = CONFIG.PLAYERS_PER_ROOM - room.players.length;
      
      for (let i = 0; i < neededPlayers && availablePlayers.length > 0; i++) {
        const player = availablePlayers.shift();
        if (player) {
          await player.joinRoom(room.code);
          room.players.push(player);
          await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
        }
      }
      
      console.log(`‚úÖ –õ–æ–±–±–∏ ${room.code}: ${room.players.length}/${CONFIG.PLAYERS_PER_ROOM} –∏–≥—Ä–æ–∫–æ–≤`);
    }
  }

  async startAllGames() {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–≥—Ä...');
    
    const startPromises = this.rooms.map(async (room, index) => {
      console.log(`üéØ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã ${index + 1}/${this.rooms.length} –≤ –ª–æ–±–±–∏ ${room.code}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
      await room.host.startGame();
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      let attempts = 0;
      while (!room.host.gameStarted && attempts < 20) {
        await new Promise(resolve => setTimeout(resolve, 250));
        attempts++;
      }
      
      if (room.host.gameStarted) {
        room.gameStarted = true;
        this.stats.gamesStarted++;
        console.log(`‚úÖ –ò–≥—Ä–∞ ${index + 1} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –≤ –ª–æ–±–±–∏ ${room.code}`);
      } else {
        console.log(`‚ùå –ò–≥—Ä–∞ ${index + 1} –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤ –ª–æ–±–±–∏ ${room.code}`);
        this.stats.errors++;
      }
    });

    await Promise.all(startPromises);
    console.log(`‚úÖ –ó–∞–ø—É—â–µ–Ω–æ ${this.stats.gamesStarted} –∏–≥—Ä`);
  }

  async simulateAllGames() {
    console.log('\nüéÆ –°–∏–º—É–ª—è—Ü–∏—è –≤—Å–µ—Ö –∏–≥—Ä...');
    
    const gamePromises = this.rooms.map(async (room, index) => {
      if (!room.gameStarted) return;
      
      console.log(`\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã –≤ –ª–æ–±–±–∏ ${room.code} (${room.players.length} –∏–≥—Ä–æ–∫–æ–≤)`);
      
      for (let round = 1; round <= CONFIG.GAME_ROUNDS; round++) {
        console.log(`\nüîÑ –†–∞—É–Ω–¥ ${round} –≤ –ª–æ–±–±–∏ ${room.code}`);
        
        // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        for (const player of room.players) {
          if (!player.connected) continue;
          
          const cardKeys = ['gender', 'body', 'trait', 'profession', 'health', 'hobby', 'phobia', 'bigItem', 'backpack', 'extra'];
          const randomKey = cardKeys[Math.floor(Math.random() * cardKeys.length)];
          
          await player.revealCard(randomKey);
          await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
        await new Promise(resolve => setTimeout(resolve, 2000));

        // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        console.log(`üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–±–±–∏ ${room.code}`);
        for (const player of room.players) {
          if (!player.connected) continue;
          
          // –°–ª—É—á–∞–π–Ω–æ –≥–æ–ª–æ—Å—É–µ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if (Math.random() < 0.8) {
            const otherPlayers = room.players.filter(p => p.id !== player.id && p.connected);
            if (otherPlayers.length > 0) {
              const target = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
              await player.vote(target.socket.id);
            }
          } else {
            await player.skipVote();
          }
          
          await new Promise(resolve => setTimeout(resolve, CONFIG.SIMULATION_DELAY));
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 3000));
      }

      this.stats.gamesCompleted++;
      console.log(`‚úÖ –ò–≥—Ä–∞ –≤ –ª–æ–±–±–∏ ${room.code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    });

    await Promise.all(gamePromises);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${this.stats.gamesCompleted} –∏–≥—Ä`);
  }

  async runMassiveTest() {
    console.log('üéÆ –ú–ê–°–°–û–í–´–ô –¢–ï–°–¢ –ò–ì–†–´ "–ë–£–ù–ö–ï–†"');
    console.log('='.repeat(60));
    console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`   ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: ${CONFIG.TOTAL_PLAYERS}`);
    console.log(`   ‚Ä¢ –õ–æ–±–±–∏: ${CONFIG.ROOMS_COUNT}`);
    console.log(`   ‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏: ${CONFIG.PLAYERS_PER_ROOM}`);
    console.log(`   ‚Ä¢ –†–∞—É–Ω–¥–æ–≤ –≤ –∏–≥—Ä–µ: ${CONFIG.GAME_ROUNDS}`);
    console.log('='.repeat(60));

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initialize();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏
      await this.createRooms();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–±–±–∏
      await this.fillRooms();
      
      // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–≥—Ä
      await this.startAllGames();
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Å–µ—Ö –∏–≥—Ä
      await this.simulateAllGames();
      
      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.printFinalStats();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
    } finally {
      this.cleanup();
    }
  }

  printFinalStats() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
    console.log('='.repeat(60));
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${this.stats.connected}/${CONFIG.TOTAL_PLAYERS}`);
    console.log(`üè† –°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏: ${this.stats.roomsCreated}/${CONFIG.ROOMS_COUNT}`);
    console.log(`üöÄ –ó–∞–ø—É—â–µ–Ω–æ –∏–≥—Ä: ${this.stats.gamesStarted}`);
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: ${this.stats.gamesCompleted}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((this.stats.gamesCompleted / this.stats.gamesStarted) * 100)}%`);
    console.log('='.repeat(60));
  }

  cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞...');
    
    for (const player of this.players) {
      player.disconnect();
    }
    
    console.log('‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
  try {
    const response = await fetch(`${CONFIG.SERVER_URL}/api/stats`);
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node index.js');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const serverOk = await checkServer();
  if (!serverOk) {
    process.exit(1);
  }

  const simulator = new MassiveGameSimulator();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    simulator.cleanup();
    process.exit(0);
  });
  
  await simulator.runMassiveTest();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { MassiveGameSimulator, MassTestPlayer };




