/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 */

const QueuedBot = require('./server-bot/QueuedBot');
const MonitoringServer = require('./lib/MonitoringServer');

class QueueSystemTester {
  constructor() {
    this.queuedBot = null;
    this.monitoringServer = null;
    this.testResults = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      startTime: null,
      endTime: null
    };
  }

  async init() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    this.queuedBot = new QueuedBot();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ monitoring server
    this.monitoringServer = new MonitoringServer(this.queuedBot.queueManager, 3001);
    
    // –ó–∞–ø—É—Å–∫ monitoring server
    await this.monitoringServer.start();
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞');
  }

  async testConcurrentTextRequests(count = 10) {
    console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${count} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    
    const testUserId = 123456789;
    const testChatId = 123456789;
    
    const requests = [];
    const startTime = Date.now();
    this.testResults.startTime = new Date();
    
    for (let i = 0; i < count; i++) {
      const testMessage = `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${i + 1} - ${this.generateRandomText()}`;
      
      const requestPromise = this.queuedBot.queueManager.addTextGenerationJob({
        userId: testUserId + i, // –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        chatId: testChatId,
        messageText: testMessage,
        messageType: this.getRandomMessageType(),
        priority: Math.floor(Math.random() * 3) - 1, // -1, 0, 1
        timestamp: new Date().toISOString(),
        testRequest: true
      });
      
      requests.push(requestPromise);
    }

    try {
      const jobs = await Promise.all(requests);
      const endTime = Date.now();
      
      console.log(`‚úÖ ${jobs.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞ ${endTime - startTime}ms`);
      
      // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
      await this.waitForJobsCompletion(jobs);
      
      this.testResults.totalRequests += count;
      this.testResults.successfulRequests += jobs.length;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      this.testResults.failedRequests += count;
    }
  }

  async testConcurrentImageRequests(count = 5) {
    console.log(`\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${count} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
    
    const testUserId = 987654321;
    const testChatId = 987654321;
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const mockPhotoData = [
      {
        file_id: 'mock_file_id_1',
        file_unique_id: 'mock_unique_1',
        width: 1920,
        height: 1080,
        file_size: 500000
      }
    ];

    const requests = [];
    const startTime = Date.now();
    
    for (let i = 0; i < count; i++) {
      const requestPromise = this.queuedBot.queueManager.addImageProcessingJob({
        userId: testUserId + i,
        chatId: testChatId,
        photoData: mockPhotoData,
        processingType: this.getRandomImageProcessingType(),
        priority: 1,
        timestamp: new Date().toISOString(),
        testRequest: true
      });
      
      requests.push(requestPromise);
    }

    try {
      const jobs = await Promise.all(requests);
      const endTime = Date.now();
      
      console.log(`‚úÖ ${jobs.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ ${endTime - startTime}ms`);
      
      await this.waitForJobsCompletion(jobs);
      
      this.testResults.totalRequests += count;
      this.testResults.successfulRequests += jobs.length;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      this.testResults.failedRequests += count;
    }
  }

  async testMixedRequests(textCount = 15, imageCount = 8) {
    console.log(`\nüîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${textCount} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö + ${imageCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
    
    const allPromises = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for (let i = 0; i < textCount; i++) {
      allPromises.push(
        this.queuedBot.queueManager.addTextGenerationJob({
          userId: 111000 + i,
          chatId: 111000,
          messageText: `–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç - —Ç–µ–∫—Å—Ç #${i + 1}`,
          messageType: this.getRandomMessageType(),
          priority: Math.floor(Math.random() * 3) - 1,
          timestamp: new Date().toISOString(),
          testRequest: true
        })
      );
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 0; i < imageCount; i++) {
      allPromises.push(
        this.queuedBot.queueManager.addImageProcessingJob({
          userId: 222000 + i,
          chatId: 222000,
          photoData: [{ file_id: `mock_${i}`, width: 800, height: 600 }],
          processingType: this.getRandomImageProcessingType(),
          priority: 1,
          timestamp: new Date().toISOString(),
          testRequest: true
        })
      );
    }

    const startTime = Date.now();
    
    try {
      const jobs = await Promise.all(allPromises);
      const endTime = Date.now();
      
      console.log(`‚úÖ ${jobs.length} —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ ${endTime - startTime}ms`);
      
      await this.waitForJobsCompletion(jobs);
      
      this.testResults.totalRequests += textCount + imageCount;
      this.testResults.successfulRequests += jobs.length;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      this.testResults.failedRequests += textCount + imageCount;
    }
  }

  async waitForJobsCompletion(jobs, timeout = 60000) {
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${jobs.length} –∑–∞–¥–∞—á (—Ç–∞–π–º–∞—É—Ç: ${timeout/1000}—Å)...`);
    
    const startTime = Date.now();
    const jobPromises = jobs.map(job => job.waitUntilFinished());
    
    try {
      await Promise.race([
        Promise.all(jobPromises),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), timeout)
        )
      ]);
      
      const endTime = Date.now();
      console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${endTime - startTime}ms`);
      
    } catch (error) {
      if (error.message === 'Timeout') {
        console.log(`‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –µ—â–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è...`);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
      }
    }
  }

  async getSystemStats() {
    try {
      const stats = await this.queuedBot.queueManager.getQueueStats();
      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  async printDetailedStats() {
    console.log('\nüìä === –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===');
    
    const stats = await this.getSystemStats();
    if (stats) {
      for (const [queueName, queueStats] of Object.entries(stats)) {
        console.log(`\nüî∏ ${queueName.toUpperCase()}:`);
        if (queueStats.error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${queueStats.error}`);
        } else {
          console.log(`   üì• –û–∂–∏–¥–∞—é—Ç: ${queueStats.waiting}`);
          console.log(`   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ: ${queueStats.active}`);
          console.log(`   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${queueStats.completed}`);
          console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ: ${queueStats.failed}`);
          console.log(`   üìä –í—Å–µ–≥–æ: ${queueStats.total}`);
        }
      }
    }
    
    console.log('\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.testResults.totalRequests}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${this.testResults.successfulRequests}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.testResults.failedRequests}`);
    
    if (this.testResults.startTime) {
      const duration = (new Date() - this.testResults.startTime) / 1000;
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)}—Å`);
      console.log(`üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(this.testResults.totalRequests / duration).toFixed(2)} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫`);
    }
  }

  generateRandomText() {
    const phrases = [
      '–ö–∞–∫ –¥–µ–ª–∞?',
      '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç',
      '–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?',
      '–ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π',
      '–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
      '–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
      '–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É',
      '–î–∞–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'
    ];
    return phrases[Math.floor(Math.random() * phrases.length)];
  }

  getRandomMessageType() {
    const types = ['simple', 'question', 'complex', 'normal'];
    return types[Math.floor(Math.random() * types.length)];
  }

  getRandomImageProcessingType() {
    const types = ['analyze', 'enhance', 'extract_text', 'detect_objects', 'generate_description'];
    return types[Math.floor(Math.random() * types.length)];
  }

  async runFullTest() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ß–ï–†–ï–î–ï–ô ===\n');
    
    try {
      await this.init();
      
      // –§–∞–∑–∞ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.testConcurrentTextRequests(20);
      await this.sleep(2000);
      
      // –§–∞–∑–∞ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      await this.testConcurrentImageRequests(10);
      await this.sleep(2000);
      
      // –§–∞–∑–∞ 3: –°–º–µ—à–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.testMixedRequests(25, 12);
      await this.sleep(3000);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      await this.printDetailedStats();
      
      console.log('\nüéâ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Bull Board: http://localhost:3001/admin/queues');
      console.log('üìä API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: http://localhost:3001/api/stats');
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.monitoringServer) {
      await this.monitoringServer.stop();
    }
    
    if (this.queuedBot) {
      await this.queuedBot.shutdown();
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new QueueSystemTester();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT...');
    await tester.cleanup();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => {
    console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM...');
    await tester.cleanup();
    process.exit(0);
  });
  
  try {
    await tester.runFullTest();
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ main:', error);
    await tester.cleanup();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = QueueSystemTester;
