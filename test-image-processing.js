/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const QueuedBot = require('./server-bot/QueuedBot');

class ImageProcessingTester {
  constructor() {
    this.queuedBot = null;
  }

  async init() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    this.queuedBot = new QueuedBot();
    console.log('‚úÖ –¢–µ—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤');
  }

  async testImageProcessingWithMock() {
    console.log('\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏...');
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–π file_id –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞)
    const mockPhotoData = [
      {
        file_id: 'BAADBAADrwADBREAAUmcTVqt4RxPAg', // –ü—Ä–∏–º–µ—Ä file_id
        file_unique_id: 'AQADBREAAF6peHBy',
        width: 800,
        height: 600,
        file_size: 45231
      }
    ];

    const testCases = [
      { type: 'analyze', description: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
      { type: 'extract_text', description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞' },
      { type: 'detect_objects', description: '–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤' },
    ];

    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i];
      console.log(`\n${i + 1}. –¢–µ—Å—Ç–∏—Ä—É—é: ${testCase.description}`);
      
      try {
        const job = await this.queuedBot.queueManager.addImageProcessingJob({
          userId: 999888777 + i,
          chatId: 999888777,
          photoData: mockPhotoData,
          processingType: testCase.type,
          priority: 1,
          timestamp: new Date().toISOString(),
          testRequest: true // –í–∞–∂–Ω–æ! –û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        });

        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${testCase.type} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (ID: ${job.id})`);

        // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await this.sleep(2000);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${testCase.type}:`, error.message);
      }
    }
  }

  async testConcurrentImageProcessing(count = 3) {
    console.log(`\nüîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${count} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
    
    const mockPhotoData = [
      {
        file_id: 'BAADBAADrwADBREAAUmcTVqt4RxPAg',
        file_unique_id: 'AQADBREAAF6peHBy',
        width: 1920,
        height: 1080,
        file_size: 150000
      }
    ];

    const promises = [];
    
    for (let i = 0; i < count; i++) {
      const promise = this.queuedBot.queueManager.addImageProcessingJob({
        userId: 777666555 + i,
        chatId: 777666555,
        photoData: mockPhotoData,
        processingType: 'analyze',
        priority: 1,
        timestamp: new Date().toISOString(),
        testRequest: true
      });
      
      promises.push(promise);
    }

    try {
      const jobs = await Promise.all(promises);
      console.log(`‚úÖ ${jobs.length} –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ`);
      
      // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await this.sleep(5000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error.message);
    }
  }

  async checkQueueStatus() {
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π...');
    
    try {
      const stats = await this.queuedBot.queueManager.getQueueStats();
      
      for (const [queueName, queueStats] of Object.entries(stats)) {
        if (queueName === 'imageProcessing') {
          console.log(`\nüñºÔ∏è –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);
          console.log(`   üì• –û–∂–∏–¥–∞—é—Ç: ${queueStats.waiting}`);
          console.log(`   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ: ${queueStats.active}`);
          console.log(`   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${queueStats.completed}`);
          console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ: ${queueStats.failed}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }
  }

  async testImageProcessingWorkerDirectly() {
    console.log('\nüîß –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ImageProcessingWorker...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–∫–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
      const imageWorker = this.queuedBot.workers.imageProcessing;
      
      if (!imageWorker) {
        console.error('‚ùå ImageProcessingWorker –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('üìä –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞:', imageWorker.getStats());
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ –∑–¥–µ—Å—å
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞:', error.message);
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runQuickTest() {
    console.log('üöÄ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n');
    
    try {
      await this.init();
      
      // –î–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Ä–∫–µ—Ä–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
      await this.sleep(2000);
      
      // –¢–µ—Å—Ç 1: –ú–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
      await this.testImageProcessingWithMock();
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      await this.sleep(3000);
      
      // –¢–µ—Å—Ç 2: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      await this.testConcurrentImageProcessing(3);
      
      // –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.sleep(5000);
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      await this.checkQueueStatus();
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
      await this.testImageProcessingWorkerDirectly();
      
      console.log('\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
      console.log('üìã –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:3001/admin/queues (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)');
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.queuedBot) {
      await this.queuedBot.shutdown();
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new ImageProcessingTester();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT...');
    await tester.cleanup();
    process.exit(0);
  });
  
  try {
    await tester.runQuickTest();
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    console.log('\n‚è≥ –¢–µ—Å—Ç–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ main:', error);
    await tester.cleanup();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = ImageProcessingTester;
