#!/usr/bin/env node

/**
 * üöÄ –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

require('dotenv').config();

const ComprehensiveStressTest = require('./comprehensive-stress-test');
const PerformanceMonitor = require('./performance-monitor');

// ASCII Art –∑–∞—Å—Ç–∞–≤–∫–∞
console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë      üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ üöÄ         ‚ïë
‚ïë                                                              ‚ïë
‚ïë   üìä Performance Monitoring + üîÑ Queue Load Testing        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

class StressTestRunner {
  constructor() {
    this.stressTest = new ComprehensiveStressTest();
    this.performanceMonitor = new PerformanceMonitor(3001, 5000);
    this.testType = process.argv[2] || 'comprehensive';
    this.isRunning = false;
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
   */
  showAvailableTests() {
    console.log('üß™ –î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');
    
    console.log('üìä –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´:');
    console.log('   quick       - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (30 —Å–µ–∫, 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    console.log('   medium      - –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω, 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    console.log('   intensive   - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (5 –º–∏–Ω, 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    console.log('');
    
    console.log('üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´:');
    console.log('   peak        - –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)');
    console.log('   gradual     - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏');
    console.log('   mixed       - –°–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('   endurance   - –¢–µ—Å—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)');
    console.log('');
    
    console.log('üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´:');
    console.log('   comprehensive - –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç (–≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏)');
    console.log('   production    - –ò–º–∏—Ç–∞—Ü–∏—è production –Ω–∞–≥—Ä—É–∑–∫–∏');
    console.log('');
    
    console.log('üí° –ü–†–ò–ú–ï–†–´ –ó–ê–ü–£–°–ö–ê:');
    console.log('   npm run stress:test quick');
    console.log('   node run-stress-test.js peak');
    console.log('   node run-stress-test.js comprehensive');
    console.log('');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
   */
  async checkSystemReadiness() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...\n');
    
    const checks = [
      { name: 'Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', check: () => this.checkRedis() },
      { name: 'Monitoring API', check: () => this.checkMonitoringAPI() },
      { name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', check: () => this.checkSystemResources() },
    ];
    
    let allPassed = true;
    
    for (const { name, check } of checks) {
      try {
        const result = await check();
        if (result.success) {
          console.log(`‚úÖ ${name}: ${result.message}`);
        } else {
          console.log(`‚ùå ${name}: ${result.message}`);
          allPassed = false;
        }
      } catch (error) {
        console.log(`‚ùå ${name}: ${error.message}`);
        allPassed = false;
      }
    }
    
    console.log('');
    
    if (!allPassed) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω: redis-cli ping');
      console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: npm run bot:optimized');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã');
      console.log('');
      return false;
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n');
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async checkRedis() {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ QueueManager
      await this.stressTest.queueManager.connection.ping();
      return { 
        success: true, 
        message: `–ü–æ–¥–∫–ª—é—á–µ–Ω (${this.stressTest.queueManager.connection.options.host}:${this.stressTest.queueManager.connection.options.port})` 
      };
    } catch (error) {
      return { 
        success: false, 
        message: `–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - ${error.message}` 
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ Monitoring API
   */
  async checkMonitoringAPI() {
    try {
      const axios = require('axios');
      const response = await axios.get('http://localhost:3001/api/health', { timeout: 5000 });
      
      if (response.data.status === 'healthy') {
        return { success: true, message: '–î–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      } else {
        return { success: false, message: `–°—Ç–∞—Ç—É—Å: ${response.data.status}` };
      }
    } catch (error) {
      return { 
        success: false, 
        message: '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω' 
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async checkSystemResources() {
    const memUsage = process.memoryUsage();
    const memUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);
    const memTotalMB = Math.round(memUsage.heapTotal / 1024 / 1024);
    const memPercent = Math.round((memUsage.heapUsed / memUsage.heapTotal) * 100);
    
    if (memPercent > 85) {
      return { 
        success: false, 
        message: `–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memPercent}% (${memUsedMB}/${memTotalMB}MB)` 
      };
    }
    
    return { 
      success: true, 
      message: `–ü–∞–º—è—Ç—å: ${memPercent}% (${memUsedMB}/${memTotalMB}MB)` 
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
   */
  async runTest(testType) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testType.toUpperCase()}\n`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await this.performanceMonitor.startMonitoring();
    
    try {
      switch (testType) {
        case 'quick':
          await this.stressTest.runQuickPerformanceTest();
          break;
          
        case 'medium':
          await this.runMediumTest();
          break;
          
        case 'intensive':
          await this.runIntensiveTest();
          break;
          
        case 'peak':
          await this.stressTest.runPeakLoadScenario(120000); // 2 –º–∏–Ω—É—Ç—ã
          break;
          
        case 'gradual':
          await this.stressTest.runGradualLoadScenario(180000); // 3 –º–∏–Ω—É—Ç—ã
          break;
          
        case 'mixed':
          await this.stressTest.runMixedLoadScenario(240000); // 4 –º–∏–Ω—É—Ç—ã
          break;
          
        case 'endurance':
          await this.runEnduranceTest();
          break;
          
        case 'production':
          await this.runProductionSimulation();
          break;
          
        case 'comprehensive':
        default:
          await this.stressTest.runComprehensiveStressTest();
          break;
      }
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      if (process.env.NODE_ENV === 'development') {
        console.error('Stack trace:', error.stack);
      }
    } finally {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      await this.performanceMonitor.stopMonitoring();
    }
  }

  /**
   * –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã, 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
   */
  async runMediumTest() {
    console.log('üìä –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 2 –º–∏–Ω—É—Ç—ã\n');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = Array.from({ length: 25 }, (_, i) => 
      this.stressTest.createVirtualUser(500000 + i)
    );
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–ª–Ω–∞–º–∏
    const waveSize = 5;
    for (let i = 0; i < users.length; i += waveSize) {
      const wave = users.slice(i, i + waveSize);
      console.log(`üåä –ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω—ã ${Math.floor(i / waveSize) + 1}: ${wave.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      const wavePromises = wave.map(user => 
        this.stressTest.simulateUserSession(user, 120000 * (0.8 + Math.random() * 0.4))
      );
      
      await Promise.allSettled(wavePromises);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
      if (i + waveSize < users.length) {
        await this.sleep(2000);
      }
    }
  }

  /**
   * –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (5 –º–∏–Ω—É—Ç, 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
   */
  async runIntensiveTest() {
    console.log('üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 5 –º–∏–Ω—É—Ç\n');
    
    const users = Array.from({ length: 50 }, (_, i) => 
      this.stressTest.createVirtualUser(600000 + i)
    );
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Å –ø–∏–∫–∞–º–∏
    const phases = [
      { duration: 60000, activeUsers: 20, name: '–†–∞–∑–æ–≥—Ä–µ–≤' },
      { duration: 120000, activeUsers: 35, name: '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' },
      { duration: 60000, activeUsers: 50, name: '–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' },
      { duration: 90000, activeUsers: 30, name: '–°–Ω–∏–∂–µ–Ω–∏–µ' },
      { duration: 30000, activeUsers: 10, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ' }
    ];
    
    for (const phase of phases) {
      console.log(`üìà –§–∞–∑–∞: ${phase.name} (${phase.activeUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${phase.duration/1000}—Å)`);
      
      const phaseUsers = users.slice(0, phase.activeUsers);
      const sessionPromises = phaseUsers.map(user => 
        this.stressTest.simulateUserSession(user, phase.duration * (0.9 + Math.random() * 0.2))
      );
      
      await Promise.allSettled(sessionPromises);
    }
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
   */
  async runEnduranceTest() {
    console.log('‚è∞ –¢–µ—Å—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n');
    console.log('   –¶–µ–ª—å: –≤—ã—è–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n');
    
    const duration = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
    const concurrentUsers = 20;
    
    const users = Array.from({ length: concurrentUsers }, (_, i) => 
      this.stressTest.createVirtualUser(700000 + i)
    );
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    users.forEach(user => {
      user.messageFrequency = 3000 + Math.random() * 2000; // 3-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      user.sessionDuration = duration;
    });
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ ${concurrentUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ ${duration/1000/60} –º–∏–Ω—É—Ç...`);
    
    const sessionPromises = users.map(user => 
      this.stressTest.simulateUserSession(user, duration)
    );
    
    await Promise.all(sessionPromises);
    
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ò–º–∏—Ç–∞—Ü–∏—è production –Ω–∞–≥—Ä—É–∑–∫–∏
   */
  async runProductionSimulation() {
    console.log('üè¢ –ò–º–∏—Ç–∞—Ü–∏—è production –Ω–∞–≥—Ä—É–∑–∫–∏\n');
    console.log('   –°—Ü–µ–Ω–∞—Ä–∏–π: —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n');
    
    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const userProfiles = [
      { type: 'casual', count: 40, frequency: 10000, activity: 0.3 },      // –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { type: 'regular', count: 30, frequency: 5000, activity: 0.6 },      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { type: 'power', count: 15, frequency: 2000, activity: 0.9 },        // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      { type: 'automated', count: 10, frequency: 1000, activity: 1.0 },    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
      { type: 'burst', count: 5, frequency: 500, activity: 0.8 }           // –ü–∏–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    ];
    
    const allUsers = [];
    let userIdCounter = 800000;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º
    for (const profile of userProfiles) {
      console.log(`üë• –°–æ–∑–¥–∞–Ω–∏–µ ${profile.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∏–ø–∞ ${profile.type}`);
      
      for (let i = 0; i < profile.count; i++) {
        const user = this.stressTest.createVirtualUser(userIdCounter++);
        user.messageFrequency = profile.frequency;
        user.activity = profile.activity;
        user.userType = profile.type;
        allUsers.push(user);
      }
    }
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (7 —á–∞—Å–æ–≤ —Å–∂–∞—Ç–æ –≤ 7 –º–∏–Ω—É—Ç)
    const workdayPhases = [
      { name: '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫', duration: 60000, users: 0.8 },
      { name: '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è', duration: 180000, users: 0.6 },
      { name: '–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–∏–∫', duration: 45000, users: 0.9 },
      { name: '–ü–æ—Å–ª–µ –æ–±–µ–¥–∞', duration: 120000, users: 0.5 },
      { name: '–í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫', duration: 75000, users: 1.0 }
    ];
    
    for (const phase of workdayPhases) {
      const activeUserCount = Math.floor(allUsers.length * phase.users);
      const activeUsers = allUsers.slice(0, activeUserCount);
      
      console.log(`\nüïê ${phase.name}: ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${phase.duration/1000}—Å)`);
      
      const sessionPromises = activeUsers.map(user => 
        this.stressTest.simulateUserSession(user, phase.duration * (0.7 + Math.random() * 0.6))
      );
      
      await Promise.allSettled(sessionPromises);
    }
    
    console.log('\n‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è production –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      if (this.isRunning) {
        console.log(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
        this.isRunning = false;
        
        try {
          await this.performanceMonitor.stopMonitoring();
          await this.stressTest.cleanup();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error.message);
        }
        
        console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
      }
    };
    
    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
   */
  async run() {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
      this.setupGracefulShutdown();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      if (this.testType === 'help' || this.testType === '--help' || this.testType === '-h') {
        this.showAvailableTests();
        return;
      }
      
      console.log('üåü –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:');
      console.log(`   üì¶ Node.js: ${process.version}`);
      console.log(`   üñ•Ô∏è  Platform: ${process.platform} ${process.arch}`);
      console.log(`   üß† Memory: ${Math.round(process.memoryUsage().heapTotal / 1024 / 1024)}MB`);
      console.log(`   ‚è±Ô∏è  PID: ${process.pid}`);
      console.log('');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
      const systemReady = await this.checkSystemReadiness();
      if (!systemReady) {
        console.log('üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏—Å—Ç–µ–º–æ–π');
        return;
      }
      
      this.isRunning = true;
      
      // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log(`üéØ –¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${this.testType.toUpperCase()}`);
      console.log(`‚è±Ô∏è  –ù–∞—á–∞–ª–æ: ${new Date().toLocaleString('ru-RU')}`);
      console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:3001/admin/queues`);
      console.log('');
      
      await this.runTest(this.testType);
      
      console.log('\nüéâ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û ===');
      console.log(`‚è±Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`);
      console.log('üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã');
      console.log('üìà –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
      
    } catch (error) {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:');
      console.error(`   ${error.name}: ${error.message}`);
      
      if (process.env.NODE_ENV === 'development') {
        console.error('\nüìö Stack trace:');
        console.error(error.stack);
      }
      
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
      console.log('   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏');
      
    } finally {
      // Cleanup
      if (this.isRunning) {
        await this.performanceMonitor.stopMonitoring();
        await this.stressTest.cleanup();
      }
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const runner = new StressTestRunner();
  runner.run();
}

module.exports = StressTestRunner;
