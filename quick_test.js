#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–≥—Ä—ã - 4 –∏–≥—Ä–æ–∫–∞ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
 */

const { io } = require('socket.io-client');

const SERVER_URL = 'http://localhost:4000';

class QuickTestPlayer {
  constructor(id) {
    this.id = id;
    this.nick = `TestPlayer${id}`;
    this.socket = null;
    this.room = null;
    this.connected = false;
    this.gameStarted = false;
  }

  async connect() {
    return new Promise((resolve, reject) => {
      this.socket = io(SERVER_URL);
      
      this.socket.on('connect', () => {
        console.log(`‚úÖ ${this.nick} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = true;
        resolve();
      });

      this.socket.on('disconnect', () => {
        console.log(`‚ùå ${this.nick} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        this.connected = false;
      });

      this.socket.on('room:state', (data) => {
        console.log(`üì¢ ${this.nick} –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}, —Ö–æ—Å—Ç: ${data.hostId === this.socket.id}`);
        this.room = data.roomId;
      });

      this.socket.on('game:state', (data) => {
        console.log(`üéØ ${this.nick} –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ ${data.roomId}`);
        this.gameStarted = true;
      });

      this.socket.on('presence', (data) => {
        console.log(`üë• ${this.nick} –≤–∏–¥–∏—Ç ${data.players.length} –∏–≥—Ä–æ–∫–æ–≤`);
      });

      setTimeout(() => reject(new Error('Timeout')), 5000);
    });
  }

  async createRoom() {
    try {
      const response = await fetch(`${SERVER_URL}/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          maxPlayers: 4,
          game: 'bunker',
          open: true
        })
      });
      
      const data = await response.json();
      console.log(`üè† ${this.nick} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É: ${data.code}`);
      return data.code;
    } catch (error) {
      console.error(`‚ùå ${this.nick} –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É:`, error.message);
      return null;
    }
  }

  async joinRoom(roomCode) {
    this.socket.emit('joinRoom', {
      roomId: roomCode,
      nick: this.nick,
      clientId: this.socket.id,
      avatarUrl: null
    });
    console.log(`üö™ ${this.nick} –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç—É ${roomCode}`);
  }

  async startGame() {
    this.socket.emit('room:start', { roomId: this.room });
    console.log(`üöÄ ${this.nick} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É`);
  }

  async revealCard(key) {
    this.socket.emit('game:reveal', {
      roomId: this.room,
      key: key
    });
    console.log(`üÉè ${this.nick} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É: ${key}`);
  }

  async vote(targetId) {
    this.socket.emit('game:vote', {
      roomId: this.room,
      targetId: targetId
    });
    console.log(`üó≥Ô∏è ${this.nick} –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ ${targetId}`);
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
    }
  }
}

async function quickTest() {
  console.log('üéÆ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–≥—Ä—ã');
  console.log('='.repeat(30));

  const players = [];
  
  // –°–æ–∑–¥–∞–µ–º 4 –∏–≥—Ä–æ–∫–æ–≤
  for (let i = 1; i <= 4; i++) {
    players.push(new QuickTestPlayer(i));
  }

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (const player of players) {
      await player.connect();
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É
    const roomCode = await players[0].createRoom();
    if (!roomCode) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É');
    }

    // –í–°–ï –∏–≥—Ä–æ–∫–∏ –≤—Ö–æ–¥—è—Ç –≤ –∫–æ–º–Ω–∞—Ç—É (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    for (let i = 0; i < players.length; i++) {
      await players[i].joinRoom(roomCode);
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    await players[0].startGame();
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –∏–≥—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–µ—Ç—Å—è
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...');
    let attempts = 0;
    while (!players[0].gameStarted && attempts < 10) {
      await new Promise(resolve => setTimeout(resolve, 500));
      attempts++;
    }
    
    if (players[0].gameStarted) {
      console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å!');
    } else {
      console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–≥—Ä—É
    console.log('\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –†–∞—É–Ω–¥ 1: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
    console.log('\nüîÑ –†–∞—É–Ω–¥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç');
    const cardKeys = ['gender', 'body', 'trait', 'profession'];
    for (let i = 0; i < players.length; i++) {
      await players[i].revealCard(cardKeys[i]);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    console.log('\nüó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
    for (let i = 0; i < players.length; i++) {
      const targetIndex = (i + 1) % players.length;
      await players[i].vote(players[targetIndex].socket.id);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    await new Promise(resolve => setTimeout(resolve, 5000));

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö
    console.log('\nüßπ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (const player of players) {
      player.disconnect();
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
  try {
    const response = await fetch(`${SERVER_URL}/api/stats`);
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node index.js');
    return false;
  }
}

if (require.main === module) {
  checkServer().then(serverOk => {
    if (serverOk) {
      quickTest().catch(console.error);
    } else {
      process.exit(1);
    }
  });
}

module.exports = { QuickTestPlayer, quickTest };
