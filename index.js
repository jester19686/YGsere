require('dotenv').config();
const express = require('express');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');

// –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä—É–∫–∏
const { generateHand, ORDER, generateBunker, generateCataclysm } = require('./data/cards');


const PORT = Number(process.env.PORT || 4000);

// === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏-—Å–ø–∞–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç ===
const RATE_ROOMS_WINDOW_MS = Number(process.env.RATE_ROOMS_WINDOW_MS || 60_000);
const RATE_ROOMS_MAX = Number(process.env.RATE_ROOMS_MAX || 10);

const app = express();
app.set('trust proxy', true);

// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origin'—ã: FRONT_ORIGIN="http://localhost:3000,https://mydomain.tld"
const origins = (process.env.FRONT_ORIGIN || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

//app.use(cors({
 // origin: origins.length ? origins : true,     // dev: true (–æ—Ç—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏—à–µ–¥—à–∏–π Origin)
  //credentials: origins.length > 0,             // credentials —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ origin —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
//}));


// ===== In-memory —Å–æ—Å—Ç–æ—è–Ω–∏–µ =====
/**
 * room = {
 *   code: string,
 *   game: 'bunker'|'whoami',
 *   maxPlayers: number,
 *   hostClientId: string|null,
 *   started: boolean,
 *   nextSeat: number,
 *   players: Map<clientId, Player>
 *   open: boolean,
 *   bunker: object|null,        // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ
 *   turnOrder: string[]|null,   // –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤ (clientId –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é seat)
 *   currentTurnId: string|null, // –∫—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç
 * }
 * Player = { ... }
 */
const rooms = new Map();

// –ì—Ä–µ–π—Å-—Ç–∞–π–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Ñ—Ä–µ—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
const emptyRoomTimers = new Map(); // Map<roomCode, NodeJS.Timeout>


// healthcheck (nginx/uptime)
app.get('/health', (_req, res) => res.send('ok'));



// === In-memory rate-limit –ø–æ IP –¥–ª—è POST /rooms ===
const createRoomRate = new Map();


// ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô CORS –¥–æ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
const allow = (process.env.FRONT_ORIGIN || 'http://localhost:3000')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

app.use((req, res, next) => {
  const origin = req.headers.origin;
  // –≠—Ö–æ-—Ä–µ–∂–∏–º: –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª Origin ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ–º –µ–≥–æ (OK –¥–ª—è dev)
  if (origin && (!allow.length || allow.includes(origin))) {
    res.setHeader('Access-Control-Allow-Origin', origin);
    res.setHeader('Vary', 'Origin');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
  } else if (!allow.length) {
    // –±–µ–∑ Origin –∏ –±–µ–∑ —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö (–±–µ–∑ credentials)
    res.setHeader('Access-Control-Allow-Origin', '*');
  }
  // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ
  const reqHdrs = req.header('Access-Control-Request-Headers');
  const baseHdrs = 'Content-Type, Authorization';
  res.setHeader('Access-Control-Allow-Headers', reqHdrs ? `${baseHdrs}, ${reqHdrs}` : baseHdrs);
  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');
  // Optional: –∫—ç—à preflight
  // res.setHeader('Access-Control-Max-Age', '86400');

  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

app.use(express.json());

function getClientIp(req) {
  const xfwd = req.headers['x-forwarded-for'];
  if (typeof xfwd === 'string' && xfwd.length > 0) {
    return xfwd.split(',')[0].trim();
  }
  return req.ip || req.connection?.remoteAddress || 'unknown';
}

function rateLimitCreateRoom(req, res) {
  const ip = getClientIp(req);
  const now = Date.now();

  const arr = createRoomRate.get(ip) || [];
  const fresh = arr.filter((ts) => now - ts < RATE_ROOMS_WINDOW_MS);

  if (fresh.length >= RATE_ROOMS_MAX) {
    // –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º—Å—Ç–∞–º–ø –≤ –æ–∫–Ω–µ
    const oldest = Math.min(...fresh);
    const retryAfterMs = Math.max(0, RATE_ROOMS_WINDOW_MS - (now - oldest));
    res.setHeader('Retry-After', Math.ceil(retryAfterMs / 1000));
    res.status(429).json({
      error: 'rate_limited',
      message: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞—ë—Ç–µ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      retryAfterMs,
    });
    return false;
  }

  fresh.push(now);
  createRoomRate.set(ip, fresh);
  return true;
}

// –£—Ç–∏–ª–∏—Ç—ã
function code4() {
  const abc = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  return Array.from({ length: 4 }, () => abc[Math.floor(Math.random() * abc.length)]).join('');
}
// ‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ gameOver)
function scheduleRoomCleanup(room) {
  if (room.cleanupTimer) return;
  const FIVE_MIN_MS = 5 * 60 * 1000;
  const now = Date.now();
  room.cleanupAt = room.cleanupAt && room.cleanupAt > now ? room.cleanupAt : now + FIVE_MIN_MS;
  const delay = Math.max(0, room.cleanupAt - now);
  room.cleanupTimer = setTimeout(() => {
    try {
      const roomKey = room.id || room.code;
      io.to(roomKey).emit('room:closed', { roomId: roomKey });
    } catch {}
    try { rooms.delete(room.id || room.code); } catch {}
    try { broadcastRooms(io); } catch {}
  }, delay);
}

function sortBySeat(playersArr) {
  return playersArr.sort((a, b) => (a.seat || 0) - (b.seat || 0));
}

function computeTurnOrder(room) {
  // –ø–æ —Å–∏–¥–µ–Ω—å—è–º (seat) ‚Üí clientId, –∏—Å–∫–ª—é—á–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö (kicked)
  const order = sortBySeat(
    Array.from(room.players.values()).filter(p => !p.kicked)
  ).map(p => p.clientId);
  return order;
}
function ensureTurnState(room) {
  if (!room.turnOrder || room.turnOrder.length === 0) {
    room.turnOrder = computeTurnOrder(room);
  } else {
    // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–∞–≤–∞
    const existing = new Set([
  ...Array.from(room.players.keys()),
  ...(room.reconnect ? Array.from(room.reconnect.keys()) : []),
]);

const isKicked = (id) => {
  const p = room.players.get(id) || room.reconnect?.get(id);
  return !!(p && p.kicked);
};

room.turnOrder = room.turnOrder.filter(
  (id) => existing.has(id) && !isKicked(id)
);
    // –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã—Ö –≤ –∫–æ–Ω–µ—Ü, –≤ –ø–æ—Ä—è–¥–∫–µ seat
    const known = new Set(room.turnOrder);
    const newbies = computeTurnOrder(room).filter(id => !known.has(id));
    room.turnOrder.push(...newbies);
  }
  if (!room.currentTurnId && room.turnOrder.length) {
    room.currentTurnId = room.turnOrder[0];
  }
}
function advanceTurn(room) {
  ensureTurnState(room);
  const order = room.turnOrder || [];
  if (!order.length) { room.currentTurnId = null; return; }

  const cur = room.currentTurnId;
  const idx = Math.max(0, order.indexOf(cur));
  const nextId = order[(idx + 1) % order.length];
  room.currentTurnId = nextId;

  beginTurn(room.code, room.currentTurnId); // —ç–º–∏—Ç + —Ä–µ—Å—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞
}




// ==== Turn timer per room ====
function startTurnTimer(roomId) {
  const room = ensureRoom(roomId);
  if (!room) return;
  clearTurnTimer(roomId);
  room.turnTimerSec = 0;
  room.turnTimer = setInterval(() => {
    const r = ensureRoom(roomId);
    if (!r) { clearTurnTimer(roomId); return; }
    r.turnTimerSec = (r.turnTimerSec || 0) + 1;
    const sec = Math.min(r.turnTimerSec, 120);
    io.to(roomId).emit('game:turnTick', { roomId, seconds: sec });
  }, 1000);
}

function clearTurnTimer(roomId) {
  const room = ensureRoom(roomId);
  if (!room || !room.turnTimer) return;
  clearInterval(room.turnTimer);
  room.turnTimer = null;
}


// —É–¥–æ–±–Ω—ã–π helper –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
function beginTurn(roomId, currentTurnId) {
  const room = ensureRoom(roomId);
  if (!room) return; // ‚¨ÖÔ∏è guard

  if (room.gameOver) {
    // –ò–≥—Ä–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ö–æ–¥–æ–≤/—Ç–∞–π–º–µ—Ä–æ–≤.
    return;
  }

  io.to(roomId).emit('game:turn', { roomId, currentTurnId });
  resetSkipVotes(room);
  startTurnTimer(roomId);
}


// ---- –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–±–µ–∑ —Å–ø–µ—Ü.–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π) ----
const CORE_KEYS = [
  'gender','body','trait','profession','health',
  'hobby','phobia','bigItem','backpack','extra'
];

// –í–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –µ–≥–æ id (clientId)
function getRoomPlayerById(room, playerId) {
  if (!room || !room.players) return null;
  const arr = Array.from(room.players.values());
  return arr.find(p => p.id === playerId || p.clientId === playerId) || null;
}

// –û—Ç–∫—Ä—ã—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫—É (—É—á–∏—Ç—ã–≤–∞–µ–º hiddenKey)
function revealRandomFor(room, playerId) {
  const pl = getRoomPlayerById(room, playerId);
  if (!pl || !pl.hand) return;

  const hiddenKey = pl.hiddenKey;
  const revealed = pl.revealed || {};
  const already = new Set(pl.revealedKeys || []);

  // —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏, –±–µ–∑ ability1/ability2, –∏ –Ω–µ hiddenKey
  const candidates = CORE_KEYS.filter(
    (k) => k !== hiddenKey && !revealed[k] && !already.has(k)
    );
  if (candidates.length === 0) return;

  const key = candidates[Math.floor(Math.random() * candidates.length)];

  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ –≤ revealed, –∏ –≤ revealedKeys ‚Äî —á—Ç–æ–±—ã —É –∏–≥—Ä–æ–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–ª–∞ ¬´–û—Ç–∫—Ä—ã—Ç–æ¬ª
  pl.revealed = { ...revealed, [key]: pl.hand[key] };
  pl.revealedKeys = Array.isArray(pl.revealedKeys) ? pl.revealedKeys : [];
  if (!already.has(key)) pl.revealedKeys.push(key);
}


// ‚¨áÔ∏è –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å–∫–∏–ø–µ + —É—á—ë—Ç –∫–≤–æ—Ç—ã —Ä–∞—É–Ω–¥–∞
function applySkipAutoReveal(room, prevPlayerId, roomId) {
  if (!prevPlayerId) return;

  // —Ä–∞—Å–∫—Ä—ã—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –æ–±—ã—á–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–±–µ–∑ ability1/ability2)
  revealRandomFor(room, prevPlayerId);

  // –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É ‚Äî –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º Hand
  const prevPlayer = getRoomPlayerById(room, prevPlayerId);
  if (prevPlayer) {
    io.to(prevPlayer.id).emit('game:you', {
      hand: prevPlayer.hand,
      hiddenKey: prevPlayer.hiddenKey ?? null,
      revealedKeys: prevPlayer.revealedKeys || [],
    });
  }

  // –æ–±—â–∏–π —Å—Ç–µ–π—Ç ‚Äî —á—Ç–æ–±—ã –≤—Å–µ —É–≤–∏–¥–µ–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
  emitGameState(roomId, room);

  // üëá —É—á—ë—Ç –∫–≤–æ—Ç—ã —Ä–∞—É–Ω–¥–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª—é—á–µ–π; revealRandomFor —É–∂–µ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö)
  ensureRoundState(room);
  bumpRevealedThisRound(room, prevPlayerId);
  emitRoundState(room);

  // –µ—Å–ª–∏ –≤—Å–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–≤–æ—Ç—ã ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–∞—É–Ω–¥ –∏ –æ–ø–æ–≤–µ—â–∞–µ–º
  if (allReachedQuota(room)) {
    beginSpeeches(room);
    return; // –¥–∞–ª—å—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–æ—à–ª—ë—Ç broadcastVote()
  }
}


// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ game:state (–∫–∞–∫ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ game:sync/room:start)
function emitGameState(roomId, room) {
  const sec   = Math.min(room.turnTimerSec || 0, 120);
  const total = getActivePlayersCount(room);
  io.to(roomId).emit('game:state', {
    roomId,
    phase: 'reveal',
    players: publicPlayers(room),
    bunker: room.bunker,
    cataclysm: room.cataclysm,
    currentTurnId: room.currentTurnId,
    turnSeconds: sec,
    round: room.round,
    voteSkip: {
      votes: room.skipVotes ? room.skipVotes.size : 0,
      total,
      needed: Math.ceil(total / 2),      // ‚â• 50%
      voters: Array.from(room.skipVotes || []),
    },
    // üëá –î–û–ë–ê–í–ò–¢–¨:
  gameOver: !!room.gameOver,
  winners: Array.isArray(room.winners) ? room.winners : [],
  lastVote: room.lastVote || null,      // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
  cleanupAt: room.cleanupAt || null, // ‚è≥ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞


  });
}

// üëá –µ–¥–∏–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å "–∏—Ç–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"
function setLastVoteAndBroadcast(roomId, room, { totals, votersByTarget }) {
  // totals: { [playerId]: number }, votersByTarget: { [playerId]: string[] }
  const totalEligible = [...room.players.values()].filter(p => !p.kicked).length;
  const totalVoters = Object.values(votersByTarget || {}).reduce((acc, arr) => acc + (arr?.length || 0), 0);

  room.lastVote = {
    at: nowSec(),
    totalEligible,
    totalVoters,
    totals: totals || {},
    votersByTarget: votersByTarget || {},
  };

  io.to(roomId).emit('vote:result', { roomId, lastVote: room.lastVote });
}



function getActiveIds(room) {
  const arr = room.turnOrder || [];
  return arr.filter(id => {
    const p = room.players.get(id) || room.reconnect?.get(id);
    return p && !p.kicked;
  });
}

function checkGameOver(room) {
  const places = room?.bunker?.places || 0;
  if (!places) return;

  const activeIds = getActiveIds(room);
  if (activeIds.length > 0 && activeIds.length <= places) {
    room.gameOver = true;
    room.winners = [...activeIds];

    clearTurnTimer(room.code);     // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
    room.vote = { phase: 'idle' }; // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
    resetSkipVotes(room);          // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏

    room.currentTurnId = null; // üëà –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ

    

    // ‚è≥ –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –∏ —Å–æ–æ–±—â–∞–µ–º deadline –∫–ª–∏–µ–Ω—Ç–∞–º
    scheduleRoomCleanup(room);
    io.to(room.code).emit('game:over', {
      roomId: room.code,
      winners: room.winners,
      cleanupAt: room.cleanupAt,
    });
    emitGameState(room.code, room);
  }
}


function emitRoundState(room) {
  if (!room || !room.code) return;
  io.to(room.code).emit('game:round', {
    roomId: room.code,
    number: room.round?.number || 1,
    quota: room.round?.quota || 0,
    revealedBy: room.round?.revealedBy || {},
  });
}




function presencePayload(room) {
  return {
    roomId: room.code,
    players: sortBySeat(Array.from(room.players.values()).map(p => ({
      id: p.clientId,
      nick: p.nick,
      seat: p.seat,
    }))),
    maxPlayers: room.maxPlayers,
  };
}
function roomStatePayload(room) {
  return {
    roomId: room.code,
    hostId: room.hostClientId || null,
    started: !!room.started,
    maxPlayers: room.maxPlayers,
    game: room.game || 'bunker',
    open: !!room.open,
    players: sortBySeat(Array.from(room.players.values()).map(p => ({
      id: p.clientId,
      nick: p.nick,
      seat: p.seat,
    }))),
  };
}
function publicPlayers(room) {
  const arr = Array.from(room.players.values()).map(p => ({
    id: p.clientId,
    nick: p.nick,
    revealed: p.revealed || {},
    seat: p.seat,
    kicked: !!p.kicked,
    abilities: [p.hand?.ability1, p.hand?.ability2] || [],
  }));
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ seat, ¬´–∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ¬ª ‚Äî –≤–Ω–∏–∑, —Ç–æ–∂–µ –ø–æ seat
  return arr.sort((a, b) => {
    if (!!a.kicked === !!b.kicked) return (a.seat || 0) - (b.seat || 0);
    return a.kicked ? 1 : -1;
  });
}

/* ===== –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è –ª–æ–±–±–∏) ===== */
function roomsList() {
  return Array.from(rooms.values())
  .filter((room) => (room.players ? room.players.size : 0) > 0) // ‚¨ÖÔ∏è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–ø—É—Å—Ç—ã–µ
   .map((room) => {
    const hostNick = room.hostClientId && room.players.get(room.hostClientId)
      ? room.players.get(room.hostClientId).nick
      : '';
    return {
      code: room.code,
      game: room.game || 'bunker',
      started: !!room.started,
      maxPlayers: room.maxPlayers,
      count: room.players.size,
      hostNick,
      open: !!room.open,
    };
  });
}
function broadcastRooms(ioInstance) {
  ioInstance.emit('rooms:update', { rooms: roomsList() });


}


// ===== Skip-vote state per room =====
function ensureSkipVote(room) {
  if (!room.skipVotes) room.skipVotes = new Set(); // Set<clientId>
  return room.skipVotes;
}

function getActivePlayersCount(room) {
  // –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–≥—Ä–æ–∫–æ–≤.
  // –ï—Å–ª–∏ –µ—Å—Ç—å Map room.players -> –±–µ—Ä–µ–º –≤—Å–µ—Ö –Ω–µ–∫–∏–∫–Ω—É—Ç—ã—Ö:
  const list = room.players ? Array.from(room.players.values()) : [];
  return list.filter(p => !p.kicked).length;
}

function broadcastVoteState(room) {
  const votesSet = ensureSkipVote(room);
  const total = getActivePlayersCount(room);
  const votes = votesSet.size;
  const needed = Math.ceil(total / 2);
  io.to(room.code || room.roomId || room.id).emit('game:voteSkipState', {
    roomId: room.code || room.roomId || room.id,
    votes, total, needed,
    voters: Array.from(votesSet), // clientId'—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
  });
}



function buildVotePayload(room) {
  return room.vote ? {
    roomId: room.code,
    phase: room.vote.phase,
    endsAt: room.vote.endsAt || null,
    speechOrder: room.vote.speechOrder || [],
    speakingIdx: room.vote.speakingIdx ?? -1,
    votes: room.vote.votes || {},
    votedBy: Array.from(room.vote.votedBy || []),
    totalVoters: room.vote.activeAtVote ? room.vote.activeAtVote.size : undefined,
    allowedTargets: room.vote.allowedTargets ? Array.from(room.vote.allowedTargets) : undefined,
  } : { roomId: room.code, phase: 'idle' };
}


function resetSkipVotes(room) {
  room.skipVotes = new Set();
  broadcastVoteState(room);
}


// ---- ROUNDS --------------------------------------------------
const ABILITY_KEYS = new Set(['ability1', 'ability2']);

function isAbilityKey(key) {
  return ABILITY_KEYS.has(key);
}

// –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ (—Å—Ç—Ä–æ–≥–æ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
function computeRoundQuota(playersCount, roundNumber) {
  if (playersCount <= 6) {
    if (roundNumber === 1) return 3;
    if (roundNumber === 2) return 3;
    if (roundNumber === 3) return 2;
    return 0; // ¬´‚Äî¬ª —Å 4-–≥–æ —Ä–∞—É–Ω–¥–∞
  } else if (playersCount <= 8) {
    if (roundNumber === 1) return 3;
    if (roundNumber === 2) return 3;
    if (roundNumber === 3) return 1;
    return 1; // —Å 4 –ø–æ 7 ‚Äî –ø–æ 1
  } else if (playersCount <= 10) {
    if (roundNumber === 1) return 3;
    if (roundNumber === 2) return 2;
    if (roundNumber === 3) return 1;
    return 1;
  } else if (playersCount <= 12) {
    if (roundNumber === 1) return 2;
    if (roundNumber === 2) return 2;
    if (roundNumber === 3) return 1;
    return 1;
  } else {
    if (roundNumber === 1) return 2;
    if (roundNumber === 2) return 1;
    if (roundNumber === 3) return 1;
    return 1;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞—É–Ω–¥–∞ (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã –∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ)
function ensureRoundState(room) {
  if (!room.round) {
    room.round = { number: 1, quota: 0, revealedBy: {} };
  }
  const activePlayerIds = room.turnOrder || []; // turnOrder —É–∂–µ –±–µ–∑ kicked
  const cnt = activePlayerIds.length || (room.players ? room.players.size : 0);

  const q = computeRoundQuota(cnt, room.round.number);
  room.round.quota = q;
  // –ø–æ–¥—á–∏—Å—Ç–∏–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
  const nextMap = {};
  for (const id of activePlayerIds) {
    nextMap[id] = room.round.revealedBy?.[id] ?? 0;
  }
  room.round.revealedBy = nextMap;
}

function bumpRevealedThisRound(room, playerId) {
  ensureRoundState(room);
  room.round.revealedBy[playerId] = (room.round.revealedBy[playerId] || 0) + 1;
}

function allReachedQuota(room) {
  ensureRoundState(room);
  const quota = room.round.quota;
  if (quota <= 0) return true; // –¥–ª—è 6 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ 3-–≥–æ ‚Äì —Ä–∞—É–Ω–¥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
  const ids = room.turnOrder || [];
  if (!ids.length) return false;
  return ids.every(id => (room.round.revealedBy[id] || 0) >= quota);
}

function advanceRound(room) {
  ensureRoundState(room);
  const playersCount = (room.turnOrder || []).length;
  // —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
  let next = room.round.number + 1;
  const nextQuota = computeRoundQuota(playersCount, next);
  if (nextQuota <= 0) {
    // –¥–∞–ª—å—à–µ —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º)
    return;
  }
  room.round.number = next;
  room.round.quota = nextQuota;
  room.round.revealedBy = {};
  // –°–º–µ–Ω–∞ —Ä–∞—É–Ω–¥–∞ ‚Äî –ª—é–±–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  room.vote = { phase: 'idle' };
}


// ===== –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä–∫–∞—Å –¥–≤—É—Ö —ç—Ç–∞–ø–æ–≤ (—Å–ø–∏—á–∏ ‚Üí –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ) =====

function nowSec() { return Math.floor(Date.now() / 1000); }

function broadcastVote(room) {
  const payload = room.vote ? {
    roomId: room.code,
    phase: room.vote.phase,            // 'idle'|'speeches'|'ballot'
    endsAt: room.vote.endsAt || null,  // unix sec
    speechOrder: room.vote.speechOrder || [],
    speakingIdx: room.vote.speakingIdx ?? -1,
    votes: room.vote.votes || {},      // {playerId: count}
    votedBy: Array.from(room.vote.votedBy || []), // –∫—Ç–æ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
    totalVoters: room.vote.activeAtVote ? room.vote.activeAtVote.size : undefined,
    allowedTargets: room.vote.allowedTargets ? Array.from(room.vote.allowedTargets) : undefined,
  } : { roomId: room.code, phase: 'idle' };

  ioRef?.to(room.code).emit('vote:state', payload);
}

function ensureVoteIdle(room) {
  if (!room.vote) room.vote = { phase: 'idle' };
}

function beginSpeeches(room) {
  clearTurnTimer(room.code); // –ø–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞ —Ö–æ–¥–∞ –Ω–∞ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  const ids = (room.turnOrder || []).slice();
  // –ø–æ—Ä—è–¥–æ–∫ —Å–ø–∏—á–µ–π ‚Äî –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–∞–¥–∫–∏ (–∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ)
  room.vote = {
    phase: 'speeches',
    speechOrder: ids,
    speakingIdx: 0,
    endsAt: nowSec() + 60,    // 60 —Å–µ–∫ –Ω–∞ —Å–ø–∏—á
    votes: {},                // –Ω–∞ –≤—Å—è–∫–∏–π
    votedBy: new Set(),
    activeAtVote: new Set(ids), // üëà —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞
  };
  broadcastVote(room);
  scheduleVoteTick(room);
}

function nextSpeechOrBallot(room) {
  if (!room.vote || room.vote.phase !== 'speeches') return;
  room.vote.speakingIdx += 1;
  if (room.vote.speakingIdx >= (room.vote.speechOrder?.length || 0)) {
    return enterBallot(room);
  }
  room.vote.endsAt = nowSec() + 60; // —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–∫–µ—Ä 60 —Å–µ–∫
  broadcastVote(room);
  scheduleVoteTick(room);
}

function enterBallot(room) {
  // –æ–∫–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è 90 —Å–µ–∫—É–Ω–¥ (—Ç–∏—à–∏–Ω–∞)
  room.vote.phase = 'ballot';
  room.vote.endsAt = nowSec() + 90;
  room.vote.votes = {};        // {targetId: count}
  room.vote.votedBy = new Set();
  if (!room.vote.activeAtVote) {
    room.vote.activeAtVote = new Set(room.turnOrder || []);
  }
  room.vote.byVoter = new Map();   // ‚¨ÖÔ∏è –∫—Ç–æ-–∫–æ–≥–æ (voterId -> targetId)
  room.vote.allowedTargets = undefined; // –æ–±—ã—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  broadcastVote(room);
  scheduleVoteTick(room);
}

function finishBallot(room) {
  if (!room.vote || room.vote.phase !== 'ballot') return;

  const totalPlayers = room.vote.activeAtVote
  ? room.vote.activeAtVote.size
  : (room.turnOrder || []).length;
  // üëá –ê–≤—Ç–æ-–≥–æ–ª–æ—Å ¬´–∑–∞ —Å–µ–±—è¬ª –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
  if (room.vote.activeAtVote instanceof Set) {
    const allowed = (room.vote.allowedTargets instanceof Set && room.vote.allowedTargets.size > 0)
      ? room.vote.allowedTargets
      : null; // –≤–æ 2-–º —Ç—É—Ä–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    room.vote.votes   = room.vote.votes   || {};
    room.vote.votedBy = room.vote.votedBy || new Set();
    room.vote.byVoter = room.vote.byVoter || new Map();
    for (const voterId of room.vote.activeAtVote) {
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö/–∫–∏–∫–Ω—É—Ç—ã—Ö
      const pl = room.players.get(voterId);
      if (!pl || pl.kicked) continue;
      // –µ—Å–ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (room.vote.votedBy.has(voterId) || room.vote.byVoter.has(voterId)) continue;
      // –µ—Å–ª–∏ –∏–¥—ë—Ç –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ —Å–µ–±—è –Ω–µ—Ç —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –Ω–µ –∞–≤—Ç–æ-–≥–æ–ª–æ—Å—É–µ–º
      if (allowed && !allowed.has(voterId)) continue;
      // —É—á—Ç—ë–º –∞–≤—Ç–æ-–≥–æ–ª–æ—Å –∑–∞ —Å–µ–±—è
      room.vote.votes[voterId] = (room.vote.votes[voterId] || 0) + 1;
      room.vote.votedBy.add(voterId);
      room.vote.byVoter.set(voterId, voterId);
    }
  }
  const votesMap = room.vote.votes || {};
  const entries = Object.entries(votesMap).sort((a,b) => b[1]-a[1]); // [id,count]

  let result = { type: 'tie', candidates: [], absolute: null, percent: 0 };
  if (entries.length > 0) {
    const [bestId, bestCnt] = entries[0];
    const percent = totalPlayers > 0 ? (bestCnt / totalPlayers) : 0;
    if (percent >= 0.7) {
      result = { type: 'absolute', candidates: [bestId], absolute: bestId, percent };
    } else {
      // –º–∞–∫—Å–∏–º–∞–ª–∏—Å—Ç—ã (–º.–±. –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ)
      const maxCnt = bestCnt;
      const tied = entries.filter(([_, c]) => c === maxCnt).map(([id]) => id);
      result = tied.length === 1
        ? { type: 'max', candidates: tied, absolute: null, percent }
        : { type: 'tie', candidates: tied, absolute: null, percent };
    }
  }


  function enterRunoffBallot(room, candidates) {
  room.vote.phase = 'ballot';
  room.vote.endsAt = nowSec() + 90;
  room.vote.votes = {};
  room.vote.votedBy = new Set();
  // —Å–æ—Å—Ç–∞–≤ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ ballot —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  if (!room.vote.activeAtVote) room.vote.activeAtVote = new Set(room.turnOrder || []);
  room.vote.byVoter = new Map();
  room.vote.allowedTargets = new Set(candidates); // üëà –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–ª–∏
  broadcastVote(room);
  scheduleVoteTick(room);
}

  // === –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è¬ª –∏ —à–ª—ë–º –∫–ª–∏–µ–Ω—Ç–∞–º ===
const votersByTarget = {};
if (room.vote?.byVoter instanceof Map) {
  for (const [voterId, targetId] of room.vote.byVoter.entries()) {
    (votersByTarget[targetId] ||= []).push(voterId);
  }
}
const resultsArr = entries.map(([id, cnt]) => ({
  id,
  count: cnt,
  percent: totalPlayers > 0 ? Math.round((cnt / totalPlayers) * 100) : 0,
  voters: votersByTarget[id] || [],
}));

room.lastVote = {
  at: nowSec(),
  totals: { ...votesMap },
  votersByTarget,
  results: resultsArr,
  totalVoters:
    room.vote?.votedBy?.size ?? Object.values(votesMap).reduce((a, b) => a + b, 0),
  totalEligible:
    room.vote?.activeAtVote?.size ?? (room.turnOrder?.length || 0),
  top: resultsArr[0]?.id || null,
};

// –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º ‚Äî —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞–ª –±–ª–æ–∫ ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è¬ª
ioRef?.to(room.code).emit('vote:result', {
  roomId: room.code,
  lastVote: room.lastVote,
});

  // üëá –ï—Å–ª–∏ –Ω–∏—á—å—è –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏–¥–µ—Ä–∞–º–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö
  const topCount = entries[0]?.[1] ?? 0;
  const tiedTop = topCount > 0
    ? entries.filter(([_, c]) => c === topCount).map(([id]) => id)
    : [];
  if (tiedTop.length > 1) {
    // –±–µ–∑ –∫–∏–∫–∞, –±–µ–∑ —Å–º–µ–Ω—ã —Ä–∞—É–Ω–¥–∞ ‚Äî —Å—Ä–∞–∑—É –≤—Ç–æ—Ä–æ–π —Ç—É—Ä
    enterRunoffBallot(room, tiedTop);
    return;
  }

  // üßπ –ò–Ω–∞—á–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä) ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω–æ–≥–æ
  let expelledId = null;
  if (entries.length > 0) expelledId = entries[0][0];
  if (expelledId) {
    const pl = getRoomPlayerById(room, expelledId);
    if (pl) pl.kicked = true;
    // —É–±–∏—Ä–∞–µ–º –∏–∑ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤
    if (Array.isArray(room.turnOrder)) {
      room.turnOrder = room.turnOrder.filter(id => id !== expelledId);
    }
    // –µ—Å–ª–∏ –±—ã–ª –µ–≥–æ —Ö–æ–¥ ‚Äî –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–º –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    if (room.currentTurnId === expelledId) {
      ensureTurnState(room);
      room.currentTurnId = room.turnOrder[0] || null;
    }

    // üßπ —É–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –∫–∏–∫–Ω—É—Ç–æ–≥–æ –∏–∑ skipVotes, –µ—Å–ª–∏ –±—ã–ª
  if (room.skipVotes && room.skipVotes.delete) {
    room.skipVotes.delete(expelledId);
  }
    // —Ä–∞–∑–æ—à–ª—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    emitGameState(room.code, room);
  }
// –µ—Å–ª–∏ –ø–æ—Å–ª–µ –∫–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚â§ –º–µ—Å—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ –≤—ã—Ö–æ–¥–∏–º
checkGameOver(room);
if (room.gameOver) {
  clearVoteTick(room);
  return; // –¥–∞–ª—å—à–µ (idle/round/beginTurn) –Ω–µ –∏–¥—ë–º
}

  





// üßπ –ß–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º –≤ idle
clearVoteTick(room);
room.vote = { phase: 'idle' };
broadcastVote(room);

// ‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
if (!room.round) room.round = { number: 1, quota: 0, revealedBy: {} };
room.round.number = (room.round.number || 1) + 1;
// –í–ê–ñ–ù–û: –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π –Ω–∞ –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
room.round.revealedBy = {};
// –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–æ–≤ –∏ –∫–≤–æ—Ç—É —Å —É—á—ë—Ç–æ–º –∏–∑–≥–Ω–∞–Ω–Ω—ã—Ö/—Å–æ—Å—Ç–∞–≤–∞
ensureTurnState(room);
ensureRoundState(room);

// –°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ "—Å–∫–∏–ø" –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
if (room.skipVotes && room.skipVotes.clear) room.skipVotes.clear();

// ‚ñ∂ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ö–æ–¥–∞–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä (–û–î–ò–ù —Ä–∞–∑)
beginTurn(room.code, room.currentTurnId);
emitRoundState(room);
emitGameState(room.code, room);

}

function scheduleVoteTick(room) {
  clearVoteTick(room);
  const rest = Math.max(0, (room.vote?.endsAt || 0) - nowSec());
 room.vote._tid = setTimeout(() => onVoteTimer(room), rest * 1000 + 50);
}

function onVoteTimer(room) {
  if (!room.vote) return;
  const now = nowSec();
 const ends = room.vote.endsAt || 0;
 // –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —Å–¥–≤–∏–Ω—É–ª—Å—è –≤–ø–µ—Ä—ë–¥ (–º—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É —Ç–∞–π–º–µ—Ä—É) ‚Äî –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º
 if (ends && now < ends) {
   return scheduleVoteTick(room);
 }
  if (room.vote.phase === 'speeches') {
    return nextSpeechOrBallot(room);
  }
  if (room.vote.phase === 'ballot') {
    return finishBallot(room);
  }
}

function clearVoteTick(room) {
  try {
    if (room?.vote?._tid) {
      clearTimeout(room.vote._tid);
      room.vote._tid = null;
    }
  } catch {}
}




// ===== REST =====
app.get('/', (_, res) => {
  res.type('html').send('–ü—Ä–∏–≤–µ—Ç! –°–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥—Ä—ã "–ë—É–Ω–∫–µ—Ä" —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ');
});
app.get('/health', (_, res) => res.json({ ok: true, service: 'bunker-server' }));

app.get('/rooms', (_, res) => {
  res.json({ rooms: roomsList() });
});

let ioRef = null;

app.post('/rooms', (req, res) => {
  if (!rateLimitCreateRoom(req, res)) return;

  let { maxPlayers, game, open } = req.body || {};
  maxPlayers = Number(maxPlayers || 8);
  if (maxPlayers < 2) maxPlayers = 2;
  if (maxPlayers > 16) maxPlayers = 16;

  const normalizedGame = game === 'whoami' ? 'whoami' : 'bunker';
  const isOpen = !!open;

  let code;
  do { code = code4(); } while (rooms.has(code));

  rooms.set(code, {
    code,
    game: normalizedGame,
    maxPlayers,
    hostClientId: null,
    started: false,
    nextSeat: 1,
    players: new Map(),
    open: isOpen,
    bunker: null,          // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
    turnOrder: null,       // üëà –î–û–ë–ê–í–¨
    currentTurnId: null,   // üëà –î–û–ë–ê–í–¨
    vote: null, // üëà —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—É–Ω–¥–µ (null|–æ–±—ä–µ–∫—Ç)
    reconnect: new Map(), // clientId -> Player (30—Å –Ω–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µjoin)
    gameOver: false,
    winners: [],
    lastVote: null,             // ‚¨ÖÔ∏è —Ç—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è¬ª
  });

  if (ioRef) setTimeout(() => broadcastRooms(ioRef), 0);

  res.json({ code, maxPlayers });
});

// ===== WS =====
const server = http.createServer(app);
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å —Ç–µ–º–∏ –∂–µ CORS
const io = new Server(server, {
  // –¥–ª—è –¥–µ–≤-—Å–±–æ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π Origin (–±—Ä–∞—É–∑–µ—Ä –≤—Å—ë —Ä–∞–≤–Ω–æ —à–ª—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–π)
  cors: { origin: true, credentials: true },
});
ioRef = io;



function ensureRoom(roomId) {
  const room = rooms.get(roomId);
  return room || null;
}

io.on('connection', (socket) => {
  socket.on('ping', () => socket.emit('pong'));

  socket.on('rooms:get', () => {
    socket.emit('rooms:update', { rooms: roomsList() });
  });


  // –ò–≥—Ä–æ–∫ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞/–ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞
socket.on('game:voteSkip', ({ roomId, vote }) => {
  const room = ensureRoom(roomId);
  if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}

  if (!room || !room.started) return;
  // –ù–µ–ª—å–∑—è —Å–∫–∏–ø–∞—Ç—å —Ö–æ–¥, –ø–æ–∫–∞ –∏–¥—ë—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
   if (room.vote && room.vote.phase && room.vote.phase !== 'idle') {
   // –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è UI, —á—Ç–æ —Å–∫–∏–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
   socket.emit('game:voteSkipDenied', { roomId, reason: 'voting-phase' });
   return;
 }

  // –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ 120+
  if ((room.turnTimerSec || 0) < 120) return;

  const cid = socket.clientId || socket.handshake?.auth?.clientId;
  if (!cid) return;

  const voter = room.players.get(cid);
  if (!voter || voter.kicked) return; // ‚õî –∫–∏–∫–Ω—É—Ç—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –ø—Ä–æ–ø—É—Å–∫

  const votesSet = ensureSkipVote(room);
  if (vote) votesSet.add(cid); else votesSet.delete(cid);

  broadcastVoteState(room);

  const total = getActivePlayersCount(room);
  const needed = Math.ceil(total / 2); // ‚â• 50%
  if (votesSet.size >= needed) {
    const prevId = room.currentTurnId;
    // ‚úÖ –µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ + —É—á—ë—Ç –∫–≤–æ—Ç—ã
    applySkipAutoReveal(room, prevId, room.code || roomId);


    // –≤–¥—Ä—É–≥ –ø–æ—Å–ª–µ –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–ª–æ ‚â§ –º–µ—Å—Ç ‚Äî —Ñ–∏–Ω–∞–ª
checkGameOver(room);
if (room.gameOver) {
  return; // checkGameOver —Å–∞–º —Ä–∞–∑–æ—à–ª—ë—Ç game:over + game:state
}
    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞
    io.to(roomId).emit('game:skipSuccess', {
      roomId,
      prevPlayerId: prevId,
      prevNick: getRoomPlayerById(room, prevId)?.nick || ''
    });
    // –º–µ–Ω—è–µ–º —Ö–æ–¥
    advanceTurn(room);
  }


});

// --- –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–∫–∞—Ä–∫–∞—Å): —Å–∏–Ω–∫, —Å—Ç–∞—Ä—Ç, –≥–æ–ª–æ—Å, –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ---
socket.on('vote:getState', ({ roomId }) => {
  const room = ensureRoom(roomId);
  if (!room) return;
  socket.emit('vote:state', buildVotePayload(room));
});

socket.on('vote:start', ({ roomId, clientId }) => {
  const room = ensureRoom(roomId);
  if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}

  if (!room || !room.started) return;
  const senderId = socket.clientId;
  if (!senderId || room.hostClientId !== senderId) return; // —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç —ç—Ç–æ–≥–æ —Å–æ–∫–µ—Ç–∞
  beginSpeeches(room);
});

socket.on('vote:cast', ({ roomId, clientId, targetId }) => {
  const room = ensureRoom(roomId);

  
  if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}

  if (!room || !room.started || !room.vote) return;
  if (room.vote.phase !== 'ballot') return;

  const voterId = socket.clientId;
  if (!voterId) return;

  // ‚õî –∑–∞–ø—Ä–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
  if (targetId === voterId) {
    socket.emit('vote:error', { roomId, reason: 'self_vote_forbidden' });
    return;
  }

  // ‚õî –∫–∏–∫–Ω—É—Ç—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç
  const voter = room.players.get(voterId);
  if (!voter || voter.kicked) return;

  // ‚úÖ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –±—ã–ª –≤ —Å–æ—Å—Ç–∞–≤–µ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞ ballot
  const eligible = room.vote.activeAtVote instanceof Set
    ? room.vote.activeAtVote
    : new Set(room.turnOrder || []);
  if (!eligible.has(voterId)) return;

  // ‚õî –Ω–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ —É–∂–µ –∫–∏–∫–Ω—É—Ç–æ–º—É
  const target = room.players.get(targetId) || getRoomPlayerById(room, targetId);
  if (!target || target.kicked) return;

  // ‚õî –µ—Å–ª–∏ –∏–¥—ë—Ç –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Ü–µ–ª—å
  if (room.vote.allowedTargets instanceof Set && room.vote.allowedTargets.size > 0) {
    const targetClientId = (room.players.get(targetId)?.clientId) || targetId;
    if (!room.vote.allowedTargets.has(targetClientId)) return;
  }

  room.vote.votedBy = room.vote.votedBy || new Set();
  if (room.vote.votedBy.has(voterId)) return;

  room.vote.votes = room.vote.votes || {};
  room.vote.votes[target.clientId || targetId] =
    (room.vote.votes[target.clientId || targetId] || 0) + 1;

  room.vote.votedBy.add(voterId);
  room.vote.byVoter?.set(voterId, (target.clientId || targetId)); // ‚¨ÖÔ∏è –∫–æ–ø–∏–º –∫—Ç–æ-–∫–æ–≥–æ
  broadcastVote(room);
});


socket.on('vote:forceClose', ({ roomId, clientId }) => {
  const room = ensureRoom(roomId);
  if (room?.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}
  if (!room || !room.started || !room.vote) return;
  const senderId = socket.clientId;
  if (!senderId || room.hostClientId !== senderId) return;
  if (room.vote.phase !== 'ballot') return;
  finishBallot(room);
});



  socket.on('joinRoom', ({ roomId, nick, clientId }) => {
    const room = ensureRoom(roomId);
    if (!room) {
      socket.emit('room:error', { reason: 'not_found', roomId });
      
      return;
    }
    if (!clientId || typeof clientId !== 'string') {
      socket.emit('room:error', { reason: 'invalid_client', roomId });
      return;
    }
    socket.clientId = clientId; // ‚úÖ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç—É—Ç

    let existing = room.players.get(clientId);

    if (room.started && !existing) {
      const comeback = room.reconnect?.get(clientId);
      if (comeback) {
        comeback.id = socket.id;
        comeback.clientId = clientId;
        room.players.set(clientId, comeback);
        room.reconnect.delete(clientId);
        existing = comeback;
      } else {
        socket.emit('room:error', { reason: 'game_started', roomId });
        return;
      }
    }
    if (room.players.size >= room.maxPlayers && !existing) {
      socket.emit('room:error', { reason: 'full', roomId });
      return;
    }

    socket.join(roomId);


    // –ï—Å–ª–∏ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –æ—Ç–º–µ–Ω—è–µ–º (–∫—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Ä–µ—Ñ—Ä–µ—à–∞)
if (emptyRoomTimers.has(room.code)) {
  clearTimeout(emptyRoomTimers.get(room.code));
  emptyRoomTimers.delete(room.code);
}

    if (existing) {
      existing.id = socket.id;
      const cleanNick = String(nick || '').trim();
      if (cleanNick && !/^guest$/i.test(cleanNick) && !/^–≥–æ—Å—Ç—å$/i.test(cleanNick)) {
        existing.nick = cleanNick;
      }
    } else {
      const seat = room.nextSeat++;
      room.players.set(clientId, {
        id: socket.id,
        clientId,
        nick: String(nick || '–ì–æ—Å—Ç—å'),
        roomId,
        seat,
        revealed: {},
        revealedKeys: [],
      });
    }

    if (!room.hostClientId) room.hostClientId = clientId;

    socket.emit('room:state', roomStatePayload(room));
    io.to(roomId).emit('presence', presencePayload(room));
    broadcastRooms(io);


    if (room.started) {
  ensureTurnState(room);
  resetSkipVotes(room); // —Å–±—Ä–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞
  ensureRoundState(room);
  emitRoundState(room);
  io.to(roomId).emit('game:turn', { roomId, currentTurnId: room.currentTurnId });
  emitGameState(roomId, room);
  // üîÅ —Å—Ä–∞–∑—É –ø—É—à–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –∂–¥–∞–ª vote:getState
  broadcastVote(room);
  }
// üëâ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞–¥–∏–º –∏ –∏—Ö –Ω–æ–≤–æ–º—É/–≤–µ—Ä–Ω—É–≤—à–µ–º—É—Å—è –∫–ª–∏–µ–Ω—Ç—É
if (room.lastVote) {
  socket.emit('vote:result', {
    roomId: room.code,
    lastVote: room.lastVote,
  });
}



  });

  socket.on('vote:speech:finish', ({ roomId }) => {
  const room = ensureRoom(roomId);
  if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}

  if (!room || !room.vote || room.vote.phase !== 'speeches') return;

  // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ–∫–µ—Ç—É
  const player = Array.from(room.players.values()).find(p => p.id === socket.id);
  if (!player) return;

  const order = room.vote.speechOrder || [];
  const idx = typeof room.vote.speakingIdx === 'number' ? room.vote.speakingIdx : -1;
  const currentId = order[idx];

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –æ—Ä–∞—Ç–æ—Ä—É
  if (!currentId || currentId !== player.clientId) return;

  const now = Math.floor(Date.now() / 1000);


 

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
  if (idx + 1 < order.length) {
    room.vote.speakingIdx = idx + 1;
    room.vote.endsAt = now + 60;         // –Ω–æ–≤—ã–π —Å–ø–∏—á = 60 —Å–µ–∫
    broadcastVote(room);                  // –æ–±–Ω–æ–≤–∏–º —É –≤—Å–µ—Ö –±–∞–Ω–Ω–µ—Ä/–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    scheduleVoteTick(room); // ‚Üê —á—Ç–æ–±—ã —Ç–∞–π–º–µ—Ä —Å–ø–∏—á–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ç–∏–∫–∞—Ç—å
    
  } else {
    // –í—Å–µ –≤—ã—Å—Ç—É–ø–∏–ª–∏ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é (90 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã)
    enterBallot(room);
  

  }
  
});


  socket.on('leaveRoom', ({ roomId, clientId }) => {
    const room = ensureRoom(roomId);
    if (!room) return;

    let cid = clientId;
    if (!cid) {
      const found = Array.from(room.players.values()).find(p => p.id === socket.id);
      cid = found?.clientId || null;
    }
    if (!cid) return;

    if (room.players.has(cid)) {
      room.players.delete(cid);
      socket.leave(roomId);
      if (room.hostClientId === cid) {
        const first = sortBySeat(Array.from(room.players.values()))[0]?.clientId || null;
        room.hostClientId = first;
      }
      if (room.players.size === 0) {
  // –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ª–æ–∂–∏–º –Ω–∞ 15—Å (–≥—Ä–µ–π—Å –Ω–∞ —Ä–µ—Ñ—Ä–µ—à)
  if (emptyRoomTimers.has(room.code)) {
    clearTimeout(emptyRoomTimers.get(room.code));
  }
  const t = setTimeout(() => {
    const r = rooms.get(room.code);
    if (!r || r.players.size > 0) return; // –∫—Ç–æ-—Ç–æ —É–∂–µ –≤–µ—Ä–Ω—É–ª—Å—è ‚Äî –Ω–µ —É–¥–∞–ª—è–µ–º
    rooms.delete(room.code);
    broadcastRooms(io);
  }, 15000);
  emptyRoomTimers.set(room.code, t);
  return; // –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
}


io.to(roomId).emit('presence', presencePayload(room));
io.to(roomId).emit('room:state', roomStatePayload(room));
broadcastRooms(io);

// üß≠ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫/—Ö–æ–¥, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥—ë—Ç
if (room.started) {
  ensureTurnState(room);
  resetSkipVotes(room);
  if (!room.turnOrder.includes(room.currentTurnId)) {
    room.currentTurnId = room.turnOrder[0] || null;
  }

  // üèÅ –≤–¥—Ä—É–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–ª–æ ‚â§ –º–µ—Å—Ç ‚Äî —Ñ–∏–Ω–∞–ª–∏–º –ø–∞—Ä—Ç–∏—é
  checkGameOver(room);                 // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
  if (room.gameOver) return;           // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
  
  beginTurn(roomId, room.currentTurnId);
  ensureTurnState(room);
  ensureRoundState(room);
  emitRoundState(room);
  emitGameState(roomId, room);
}


    }
  });

  socket.on('room:getState', ({ roomId }) => {
    const room = ensureRoom(roomId);
    if (!room) return;
    socket.emit('room:state', roomStatePayload(room));
  });

  socket.on('game:skipTurn', ({ roomId }) => {
  const room = ensureRoom(roomId);
  if (!room || !room.started) return;

  if (room.gameOver) {                     // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
    socket.emit('game:over', { roomId, winners: room.winners || [] });
    return;
  }

  if ((room.turnTimerSec || 0) < 120) return; // –≤–∞—à–∞ –∑–∞—â–∏—Ç–∞

  // –æ—Ç–∫—Ä—ã—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Ö-–∫—É —É –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  const prevId = room.currentTurnId;

// ‚úÖ –µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ + —É—á—ë—Ç –∫–≤–æ—Ç—ã
applySkipAutoReveal(room, prevId, roomId);

// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
io.to(roomId).emit('game:skipSuccess', {
  roomId,
  prevPlayerId: prevId,
  prevNick: getRoomPlayerById(room, prevId)?.nick || ''
});

advanceTurn(room);


});









  // ---- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∏–≥—Ä—ã ----
  socket.on('game:sync', ({ roomId }) => {
    const room = ensureRoom(roomId);
    if (!room || !room.started) return;

    const me = Array.from(room.players.values()).find(p => p.id === socket.id);
    if (me && me.hand) {
      socket.emit('game:you', {
        hand: me.hand,
        hiddenKey: me.hiddenKey ?? null,
        revealedKeys: me.revealedKeys || [],
      });
    }
    const sec = Math.min(room.turnTimerSec || 0, 120);
socket.emit('game:state', {
  
  roomId,
  phase: 'reveal',
  players: publicPlayers(room),
  bunker: room.bunker,
  cataclysm: room.cataclysm,
  currentTurnId: room.currentTurnId,
  turnSeconds: sec,
  round: room.round,
  // ‚ñº –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–æ–ª—è
  lastVoteTotals: room.lastVote?.totals || null,
  lastVoteVotersByTarget: room.lastVote?.votersByTarget || null,
  lastVoteTotalVoters: room.lastVote?.totalVoters ?? null,
  lastVoteTotalEligible: room.lastVote?.totalEligible ?? null,
  
  // üëá –¥–æ–±–∞–≤—å —ç—Ç–æ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç —Å—Ä–∞–∑—É –æ—Ç—Ä–∏—Å–æ–≤–∞–ª —Å—á—ë—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤
  voteSkip: {
    votes: (room.skipVotes ? room.skipVotes.size : 0),
    total: getActivePlayersCount(room),
    needed: Math.ceil(getActivePlayersCount(room) / 2),
    voters: Array.from(room.skipVotes || []),

  },
  gameOver: !!room.gameOver,
  winners: Array.isArray(room.winners) ? room.winners : [],
  
  lastVote: room.lastVote || null,     // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
  cleanupAt: room.cleanupAt || null,
  
});
// üîÅ —Å—Ä–∞–∑—É –ø—É—à–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–ª ¬´—Å–ø–∏—á–∏/–≥–æ–ª–æ—Å¬ª
broadcastVote(room);

// üëâ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Ç–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–¥–∞–¥–∏–º –∏—Ö —Å—Ä–∞–∑—É,
// —á—Ç–æ–±—ã –±–ª–æ–∫ ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è¬ª –ø–æ—è–≤–∏–ª—Å—è –±–µ–∑ –¥–æ–ø. —Å–æ–±—ã—Ç–∏–π
if (room.lastVote) {
  socket.emit('vote:result', {
    roomId,
    lastVote: room.lastVote,
  });
}
  });

  // ---- –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç) ----
  socket.on('room:start', ({ roomId }) => {
    const room = ensureRoom(roomId);
    if (!room) return;

    // üîí –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ö–æ—Å—Ç–∞ ‚Äî –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç—Ä–æ–≥–∞—Ç—å —Ö–æ–¥

    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≥–∞—Å–∏–º –ª—é–±—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–æ —Å—Ç–∞—Ä—Ç–∞
    room.vote = { phase: 'idle' };
    const meStart = Array.from(room.players.values()).find(p => p.id === socket.id);
    if (!meStart || room.hostClientId !== meStart.clientId) {
    socket.emit('room:error', { reason: 'not_host', roomId });
    return;
    }


    // üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥
    ensureTurnState(room);
    

    const me = Array.from(room.players.values()).find(p => p.id === socket.id);
    if (!me || room.hostClientId !== me.clientId) {
      socket.emit('room:error', { reason: 'not_host', roomId });
      return;
    }

    if (room.started) return;
    if (room.players.size < 2) {
      socket.emit('room:error', { reason: 'not_enough_players', roomId, min: 2 });
      return;
    }

    room.started = true;
ensureTurnState(room);
ensureRoundState(room);

// üëá —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É–Ω–∫–µ—Ä/–∫–∞—Ç–∞–∫–ª–∏–∑–º –∏ —Ä–∞–∑–¥–∞—ë–º —Ä—É–∫–∏
let places = Math.max(1, Math.floor(room.players.size / 2));
if (room.players.size >= 3 && room.players.size <= 5) {
  places = 2; // —Ñ–∏–∫—Å –¥–ª—è 3‚Äì5 –∏–≥—Ä–æ–∫–æ–≤
}
room.bunker = generateBunker({ places });

room.cataclysm = generateCataclysm();

for (const player of room.players.values()) {
  player.hand = generateHand();
  player.hiddenKey = null;
  player.revealedKeys = [];
  player.revealed = {};

  io.to(player.id).emit('game:you', {
    hand: player.hand,
    hiddenKey: player.hiddenKey,
    revealedKeys: player.revealedKeys,
  });
}

// üëâ —Å–Ω–∞—á–∞–ª–∞ room:state
io.to(roomId).emit('room:state', roomStatePayload(room));

// üëâ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ä—Ç—É–µ–º —Ö–æ–¥/—Ç–∞–π–º–µ—Ä
beginTurn(roomId, room.currentTurnId);

// üëâ –∏ —Å—Ä–∞–∑—É –æ—Ç–¥–∞–¥–∏–º game:state —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
io.to(roomId).emit('game:state', {
  roomId,
  phase: 'reveal',
  players: publicPlayers(room),
  bunker: room.bunker,
  cataclysm: room.cataclysm,
  currentTurnId: room.currentTurnId,
  turnSeconds: Math.min(room.turnTimerSec || 0, 120),
  round: room.round,
  voteSkip: {
    votes: (room.skipVotes ? room.skipVotes.size : 0),
    total: getActivePlayersCount(room),
    needed: Math.ceil(getActivePlayersCount(room) / 2),
    voters: Array.from(room.skipVotes || []),
  },
  gameOver: !!room.gameOver,
  winners: Array.isArray(room.winners) ? room.winners : [],
  lastVote: room.lastVote || null,
  cleanupAt: room.cleanupAt || null,
});

    broadcastRooms(io);
  });

  // ---- –û—Ç–∫—Ä—ã—Ç—å "—Å–ª–µ–¥—É—é—â—É—é" –∫–∞—Ä—Ç—É –ø–æ –ø–æ—Ä—è–¥–∫—É ----
  socket.on('game:reveal', ({ roomId }) => {
    const room = ensureRoom(roomId);
    if (!room || !room.started) return;
    if (room.gameOver) {
   socket.emit('game:over', { roomId, winners: room.winners || [] });
   return;
 }

    
// –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ¬´—Å–ª–µ–¥—É—é—â—É—é¬ª –∫–∞—Ä—Ç—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
if (room.vote && room.vote.phase && room.vote.phase !== 'idle') {
  return;
}


    const player = Array.from(room.players.values()).find(p => p.id === socket.id);
    if (!player || !player.hand) return;


    // üîí –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—É–Ω–¥–∞
  ensureRoundState(room);
  const playerId = socket.clientId || player.clientId;
  const alreadyProf = player.revealed?.profession || (player.revealedKeys || []).includes('profession');
  const profHiddenForever = player.hiddenKey === 'profession';
  const done = room.round.revealedBy[playerId] || 0;
  if (done >= room.round.quota) {
    socket.emit('game:revealDenied', { roomId, reason: 'round-quota-reached' });
    return;
  }

    let nextKey = null;
    for (const k of ORDER) {
      if (k === player.hiddenKey) continue;
      if (!player.revealedKeys.includes(k)) { nextKey = k; break; }
    }
    if (!nextKey) return;

     // 1-–π —Ä–∞—É–Ω–¥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–∫—Ä—ã—Ç–∞ –Ω–∞–≤—Å–µ–≥–¥–∞)
  if (room.round.number === 1 && !alreadyProf && !profHiddenForever) {
    nextKey = 'profession';
  }

    player.revealedKeys.push(nextKey);
    player.revealed[nextKey] = player.hand[nextKey];

    // üìà —É—á—ë—Ç –∫–≤–æ—Ç—ã —Ä–∞—É–Ω–¥–∞ (ORDER ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–ª—é—á–∏)
  bumpRevealedThisRound(room, playerId);
emitRoundState(room);

// 1) –°–Ω–∞—á–∞–ª–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–æ—à–ª—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–æ–π
io.to(socket.id).emit('game:you', {
  hand: player.hand,
  hiddenKey: player.hiddenKey ?? null,
  revealedKeys: player.revealedKeys,
});
io.to(roomId).emit('game:state', {
  roomId,
  phase: 'reveal',
  players: publicPlayers(room),
  bunker: room.bunker,
  cataclysm: room.cataclysm,
  currentTurnId: room.currentTurnId,
  turnSeconds: Math.min(room.turnTimerSec || 0, 120),
  round: room.round,
  voteSkip: {
    votes: (room.skipVotes ? room.skipVotes.size : 0),
    total: getActivePlayersCount(room),
    needed: Math.ceil(getActivePlayersCount(room) / 2),
    voters: Array.from(room.skipVotes || []),
  },
  cleanupAt: room.cleanupAt || null,
});

// 2) –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –º—è–≥–∫–æ —Å—Ç–∞—Ä—Ç—É–µ–º —Å–ø–∏—á–∏ –ø–æ—Å–ª–µ –º–∏–∫—Ä–æ-–ø–∞—É–∑—ã,
//    –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–æ
if (allReachedQuota(room)) {
  setTimeout(() => {
    const r = ensureRoom(roomId);
    if (!r) return;
    if (!r.vote || r.vote.phase === 'idle') {
      beginSpeeches(r); // –≤–Ω—É—Ç—Ä–∏ broadcastVote + scheduleVoteTick
    }
  }, 20);
  return;
}
  });

  // ---- –û—Ç–∫—Ä—ã—Ç—å –ö–û–ù–ö–†–ï–¢–ù–£–Æ –∫–∞—Ä—Ç—É –ø–æ –∫–ª—é—á—É ----
  socket.on('game:revealKey', ({ roomId, key }) => {
    const room = ensureRoom(roomId);
    if (!room || !room.started) return;
    if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}


    // –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
if (room.vote && room.vote.phase && room.vote.phase !== 'idle') {
  if (!isAbilityKey(key)) return;
}

    const player = Array.from(room.players.values()).find(p => p.id === socket.id);
    if (!player || !player.hand) return;


      ensureRoundState(room);

const playerId = socket.clientId || player.clientId; // —á–µ–π reveal
const ability = isAbilityKey(key);

// 1-–π —Ä–∞—É–Ω–¥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
const alreadyProf = player.revealed?.profession || (player.revealedKeys || []).includes('profession');
const profHiddenForever = player.hiddenKey === 'profession';
if (!ability && room.round.number === 1 && !alreadyProf && key !== 'profession' && !profHiddenForever) {
  socket.emit('game:revealDenied', { roomId, reason: 'need-profession-first' });
  return;
}

// –õ–∏–º–∏—Ç –Ω–∞ —Ä–∞—É–Ω–¥
const done = room.round.revealedBy[playerId] || 0;
if (!ability && done >= room.round.quota) {
  socket.emit('game:revealDenied', { roomId, reason: 'round-quota-reached' });
  return;
}







    if (!Object.prototype.hasOwnProperty.call(player.hand, key)) return;
    if (key === player.hiddenKey) return;
    if (player.revealedKeys.includes(key)) return;

    player.revealedKeys.push(key);
    player.revealed[key] = player.hand[key];

    // —É—á—ë—Ç –∫–≤–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
if (!ability) {
  bumpRevealedThisRound(room, playerId);
  emitRoundState(room);
}

// 1) –°–Ω–∞—á–∞–ª–∞ –æ—Ç–¥–∞–¥–∏–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
io.to(socket.id).emit('game:you', {
  hand: player.hand,
  hiddenKey: player.hiddenKey ?? null,
  revealedKeys: player.revealedKeys,
});
io.to(roomId).emit('game:state', {
  roomId,
  phase: 'reveal',
  players: publicPlayers(room),
  bunker: room.bunker,
  cataclysm: room.cataclysm,
  currentTurnId: room.currentTurnId,
  turnSeconds: Math.min(room.turnTimerSec || 0, 120),
  round: room.round,
  voteSkip: {
    votes: (room.skipVotes ? room.skipVotes.size : 0),
    total: getActivePlayersCount(room),
    needed: Math.ceil(getActivePlayersCount(room) / 2),
    voters: Array.from(room.skipVotes || []),
  },
  cleanupAt: room.cleanupAt || null,
});

// 2) –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (–∏ —ç—Ç–æ –±—ã–ª–∞ –ù–ï ability) ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏—á–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ-–ø–∞—É–∑—É
if (!ability && allReachedQuota(room)) {
  setTimeout(() => {
    const r = ensureRoom(roomId);
    if (!r) return;
    if (!r.vote || r.vote.phase === 'idle') {
      beginSpeeches(r);
    }
  }, 20);
  return;
}
  });

  // –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ reveal –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
socket.on('game:nextTurn', ({ roomId }) => {
  const room = ensureRoom(roomId);
  if (room.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}

  if (!room || !room.started) return;
  advanceTurn(room);
});


// –•–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ö–æ–¥ –≤—Ä—É—á–Ω—É—é (—Ñ–æ—Ä—Å)
socket.on('game:turn:force', ({ roomId, playerId }) => {
  const room = ensureRoom(roomId);

  if (room?.gameOver) {
  socket.emit('game:over', { roomId, winners: room.winners || [] });
  return;
}
  if (!room || !room.started) return;

  // –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞ —Ö–æ—Å—Ç–∞
  const me = Array.from(room.players.values()).find(p => p.id === socket.id);
  if (!me || room.hostClientId !== me.clientId) {
    socket.emit('room:error', { reason: 'not_host', roomId });
    return;
  }

  if (!room.players.has(playerId)) return;
  ensureTurnState(room);
  room.currentTurnId = playerId;
  beginTurn(roomId, room.currentTurnId); // —ç–º–∏—Ç + resetSkipVotes + startTurnTimer
});






  socket.on('disconnect', () => {
    // no-op
    // –°–Ω—è—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç, –≥–¥–µ –æ–Ω –±—ã–ª
  for (const room of rooms.values()) {
    const p = Array.from(room.players.values()).find(u => u.id === socket.id);
    if (!p) continue;

    const cid = p.clientId || p.id;
    try {
      if (!room.reconnect) room.reconnect = new Map();
      room.reconnect.set(cid, { ...p });
      setTimeout(() => {
        if (room.reconnect?.has(cid)) room.reconnect.delete(cid);
      }, 30_000);
    } catch {}
    room.players.delete(cid);

    if (room.players.size === 0) {
      // –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ª–æ–∂–∏–º –Ω–∞ 15—Å (–≥—Ä–µ–π—Å –Ω–∞ —Ä–µ—Ñ—Ä–µ—à)
      if (emptyRoomTimers.has(room.code)) {
        clearTimeout(emptyRoomTimers.get(room.code));
      }
      const t = setTimeout(() => {
        const r = rooms.get(room.code);
        if (!r || r.players.size > 0) return; // –∫—Ç–æ-—Ç–æ —É–∂–µ –≤–µ—Ä–Ω—É–ª—Å—è ‚Äî –Ω–µ —É–¥–∞–ª—è–µ–º
        // –¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        try { clearTurnTimer(room.code); } catch {}
        rooms.delete(room.code);
        broadcastRooms(io);
      }, 15000);
      emptyRoomTimers.set(room.code, t);
      continue;
    }

    // –µ—Å–ª–∏ –Ω–µ –æ–ø—É—Å—Ç–µ–ª–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–ø–∏—Å–æ–∫
    io.to(room.code).emit('presence', presencePayload(room));
    io.to(room.code).emit('room:state', roomStatePayload(room));
    broadcastRooms(io);

    // –µ—Å–ª–∏ –∏–≥—Ä–∞ —à–ª–∞ ‚Äî –ùE –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥ —Å—Ä–∞–∑—É
  if (room.started) {
  resetSkipVotes(room); // —Å–æ—Å—Ç–∞–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –≥–æ–ª–æ—Å–∞ —Å–∫–∏–ø–∞ –æ–±–Ω—É–ª—è–µ–º

  const cid = p.clientId || p.id;
  const wasCurrent = room.currentTurnId === cid;

  if (wasCurrent) {
    // –¥–∞—ë–º 30—Å –Ω–∞ —Ä–µjoin: –µ—Å–ª–∏ –≤–µ—Ä–Ω—ë—Ç—Å—è ‚Äî —Ö–æ–¥ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —É –Ω–µ–≥–æ
    setTimeout(() => {
      const r = rooms.get(room.code);
      if (!r) return;
      const returned = r.players.has(cid);
      const stillCurrent = r.currentTurnId === cid;
      if (stillCurrent && !returned) {
        advanceTurn(r);         // —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥
        emitGameState(r.code, r);
      }
    }, 30000);
  } else {
    // —É—à—ë–ª –Ω–µ —Ç–µ–∫—É—â–∏–π ‚Äî –º–æ–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –±–µ–∑ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
    ensureTurnState(room);
    emitGameState(room.code, room);
  }
  // –†–∞—É–Ω–¥–æ–≤—É—é –∏–Ω—Ñ—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
  ensureRoundState(room);
  emitRoundState(room);
}
  }
  });
});

// server.listen(PORT, () => {
//   console.log(`HTTP+WS –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ http://localhost:${PORT} (WS —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç)`);
// });


// –≤ —Å–∞–º–æ–º –Ω–∏–∑—É ‚Äî –µ–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫
server.listen(PORT, '0.0.0.0', () => {
  console.log(`HTTP+WS –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ http://localhost:${PORT} (WS —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç)`);
});