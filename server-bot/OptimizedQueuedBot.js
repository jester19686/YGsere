/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –º–µ—Ç—Ä–∏–∫ –∏ error handling
 */

const { Telegraf } = require('telegraf');
const QueueManager = require('../lib/QueueManager');
const MetricsCollector = require('../lib/MetricsCollector');
const { ErrorHandler, AppError, ValidationError, TimeoutError } = require('../lib/ErrorHandler');
const MonitoringServer = require('../lib/MonitoringServer');

// Workers
const TextGenerationWorker = require('../lib/workers/TextGenerationWorker');
const OptimizedImageProcessingWorker = require('../lib/workers/OptimizedImageProcessingWorker');
const NotificationWorker = require('../lib/workers/NotificationWorker');

class OptimizedQueuedBot {
  constructor() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.validateEnvironment();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
    this.metricsCollector = new MetricsCollector();
    this.errorHandler = new ErrorHandler(this.metricsCollector);
    this.queueManager = new QueueManager(this.metricsCollector, this.errorHandler);
    this.monitoringServer = new MonitoringServer(
      this.queueManager, 
      this.metricsCollector, 
      this.errorHandler,
      parseInt(process.env.MONITORING_PORT || '3001')
    );
    
    // –í–æ—Ä–∫–µ—Ä—ã
    this.workers = {};
    this.isShuttingDown = false;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.userActivityTracker = new Map(); // userId -> lastActivityTime
    this.startTime = Date.now();
    
    console.log('üöÄ OptimizedQueuedBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  validateEnvironment() {
    const required = ['TELEGRAM_BOT_TOKEN'];
    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      throw new ValidationError(`Missing required environment variables: ${missing.join(', ')}`);
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const optional = {
      'REDIS_HOST': 'localhost',
      'REDIS_PORT': '6379',
      'MONITORING_PORT': '3001',
      'NODE_ENV': 'development'
    };
    
    for (const [key, defaultValue] of Object.entries(optional)) {
      if (!process.env[key]) {
        console.warn(`‚ö†Ô∏è ${key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultValue}`);
      }
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async initializeWorkers() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤...');
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      this.workers.textGeneration = new TextGenerationWorker(
        this.bot, 
        this.queueManager,
        this.metricsCollector,
        this.errorHandler
      );
      
      this.workers.imageProcessing = new OptimizedImageProcessingWorker(
        this.bot, 
        this.queueManager,
        this.metricsCollector,
        this.errorHandler
      );
      
      this.workers.notification = new NotificationWorker(
        this.bot, 
        this.queueManager,
        this.metricsCollector,
        this.errorHandler
      );
      
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ queue manager
      this.queueManager.workers = this.workers;
      
      console.log('‚úÖ –í–æ—Ä–∫–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
      Object.keys(this.workers).forEach(workerName => {
        this.metricsCollector.updateActiveWorkers(workerName, 1);
      });
      
    } catch (error) {
      throw new AppError(`Failed to initialize workers: ${error.message}`, true, 500);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  setupBotHandlers() {
    console.log('üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...');
    
    // Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.bot.use(async (ctx, next) => {
      const startTime = Date.now();
      const userId = ctx.from?.id;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userId) {
        this.userActivityTracker.set(userId, Date.now());
      }
      
      try {
        await next();
      } catch (error) {
        console.error('Error in bot middleware:', error);
        await this.errorHandler.handleError(error, null, false);
      } finally {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
        if (userId) {
          const duration = (Date.now() - startTime) / 1000;
          const messageType = this.getMessageType(ctx);
          this.metricsCollector.recordBotResponse(messageType, duration);
        }
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      this.metricsCollector.recordTelegramMessage('command');
      
      const welcomeMessage = `
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π**

üöÄ **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ ‚ö° –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
‚Ä¢ üîÑ –£–º–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
‚Ä¢ üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
/stats - –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìà **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** http://localhost:${process.env.MONITORING_PORT || 3001}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —è –æ–±—Ä–∞–±–æ—Ç–∞—é –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π!
      `;
      
      await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      this.metricsCollector.recordTelegramMessage('command');
      
      const helpMessage = `
üìñ **–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ**

üî§ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥–∏

üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ü–µ–Ω
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ (—Å–∫–æ—Ä–æ)

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ Bull Board: http://localhost:${process.env.MONITORING_PORT || 3001}/admin/queues
‚Ä¢ API: http://localhost:${process.env.MONITORING_PORT || 3001}/api/stats
‚Ä¢ Health: http://localhost:${process.env.MONITORING_PORT || 3001}/api/health

üöÄ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–æ 50+ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
‚Ä¢ –î–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
‚Ä¢ –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å < 100ms –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
      `;
      
      await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status  
    this.bot.command('status', async (ctx) => {
      this.metricsCollector.recordTelegramMessage('command');
      
      try {
        const stats = await this.queueManager.getQueueStats();
        const health = await this.queueManager.healthCheck();
        
        let statusMessage = `üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π**\n\n`;
        
        // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        statusMessage += `üè• **–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** ${health.status === 'healthy' ? '‚úÖ –ó–¥–æ—Ä–æ–≤' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}\n`;
        statusMessage += `üîå **Redis:** ${health.redis.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n`;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        statusMessage += `üìã **–û—á–µ—Ä–µ–¥–∏:**\n`;
        for (const [name, queueStats] of Object.entries(stats)) {
          const emoji = this.getQueueEmoji(name);
          statusMessage += `${emoji} **${name}:**\n`;
          statusMessage += `   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${queueStats.waiting || 0}\n`;
          statusMessage += `   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${queueStats.active || 0}\n`;
          statusMessage += `   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${queueStats.completed || 0}\n`;
          statusMessage += `   ‚Ä¢ –û—à–∏–±–∫–∏: ${queueStats.failed || 0}\n`;
          statusMessage += `   ‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${queueStats.isPaused ? '‚è∏Ô∏è –î–∞' : '‚ñ∂Ô∏è –ù–µ—Ç'}\n\n`;
        }
        
        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const uptime = Math.round(process.uptime());
        statusMessage += `‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** ${uptime}—Å\n`;
        statusMessage += `üß† **–ü–∞–º—è—Ç—å:** ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB\n`;
        statusMessage += `üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** ${this.getActiveUserCount()}\n`;
        
        await ctx.reply(statusMessage, { parse_mode: 'Markdown' });
      } catch (error) {
        await this.errorHandler.handleError(error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    this.bot.command('stats', async (ctx) => {
      this.metricsCollector.recordTelegramMessage('command');
      
      const userId = ctx.from.id;
      const userStats = await this.getUserStats(userId);
      
      const statsMessage = `
üìà **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º'}
üÜî **ID:** ${userId}

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userStats.messagesCount || 0}
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${userStats.imagesCount || 0}
‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${userStats.commandsCount || 0}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userStats.lastActivity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

‚ö° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: ${userStats.textTasks || 0}
‚Ä¢ –ó–∞–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${userStats.imageTasks || 0}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${userStats.notifications || 0}

üïê **–í—Ä–µ–º—è:**
‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${userStats.firstSeen || '–°–µ–π—á–∞—Å'}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${userStats.avgResponseTime || 'N/A'}
      `;
      
      await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      if (ctx.message.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      
      this.metricsCollector.recordTelegramMessage('text');
      
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageLength = ctx.message.text.length;
        const priority = messageLength > 100 ? 2 : messageLength > 30 ? 1 : 0;
        
        const job = await this.queueManager.addTextGenerationJob({
          userId: ctx.from.id,
          chatId: ctx.chat.id,
          messageText: ctx.message.text,
          messageType: this.classifyTextMessage(ctx.message.text),
          priority: priority,
          timestamp: new Date().toISOString(),
          userInfo: {
            firstName: ctx.from.first_name,
            username: ctx.from.username,
          }
        });
        
        await ctx.reply(`üîÑ –î–æ–±–∞–≤–ª—è—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...\nüìã ID –∑–∞–¥–∞—á–∏: ${job.id}`, {
          reply_to_message_id: ctx.message.message_id
        });
        
      } catch (error) {
        await this.errorHandler.handleError(error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    this.bot.on('photo', async (ctx) => {
      this.metricsCollector.recordTelegramMessage('image');
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–∞–∑—É
        const processingMessage = await ctx.reply(`üñºÔ∏è –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä`, {
          reply_to_message_id: ctx.message.message_id
        });
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        const largestPhoto = ctx.message.photo.reduce((largest, photo) => 
          photo.file_size > (largest.file_size || 0) ? photo : largest
        );
        
        // –ü–æ–ª—É—á–∞–µ–º file URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ worker thread
        const fileLink = await ctx.telegram.getFileLink(largestPhoto.file_id);
        
        const imageData = {
          file_id: largestPhoto.file_id,
          file_url: fileLink.href,
          file_path: fileLink.pathname,
          width: largestPhoto.width,
          height: largestPhoto.height,
          file_size: largestPhoto.file_size
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let processingType = 'quick'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
        if (largestPhoto.file_size > 1024 * 1024) { // –ë–æ–ª—å—à–µ 1MB
          processingType = 'full'; // –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        const job = await this.queueManager.addImageProcessingJob({
          userId: ctx.from.id,
          chatId: ctx.chat.id,
          photoData: ctx.message.photo,
          imageData: imageData,
          processingType: processingType,
          priority: 1,
          timestamp: new Date().toISOString(),
          userInfo: {
            firstName: ctx.from.first_name,
            username: ctx.from.username,
          },
          processingMessage: {
            chat_id: processingMessage.chat.id,
            message_id: processingMessage.message_id
          }
        });
        
        console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${job.id} (${processingType} –æ–±—Ä–∞–±–æ—Ç–∫–∞)`);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserActivity(ctx.from.id, 'image');
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        await this.errorHandler.handleError(error);
        
        try {
          await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.`);
        } catch (replyError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', replyError);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
    this.bot.on('message', async (ctx) => {
      this.metricsCollector.recordTelegramMessage('other');
      
      await ctx.reply(`
ü§î **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**

üìù **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WebP)
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã (/help, /status, /stats)

‚ùì –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
      `, { parse_mode: 'Markdown' });
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
   */
  getMessageType(ctx) {
    if (ctx.message?.text?.startsWith('/')) return 'command';
    if (ctx.message?.text) return 'text';
    if (ctx.message?.photo) return 'image';
    return 'other';
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  classifyTextMessage(text) {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('?') || lowerText.includes('–∫–∞–∫') || lowerText.includes('—á—Ç–æ')) {
      return 'question';
    }
    if (text.length > 200) {
      return 'complex';
    }
    if (lowerText.includes('–ø—Ä–∏–≤–µ—Ç') || lowerText.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return 'greeting';
    }
    
    return 'simple';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
   */
  getQueueEmoji(queueName) {
    const emojis = {
      'textGeneration': 'üí¨',
      'imageProcessing': 'üñºÔ∏è',
      'notification': 'üîî'
    };
    return emojis[queueName] || '‚öôÔ∏è';
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
   */
  getActiveUserCount() {
    const fiveMinutesAgo = Date.now() - 5 * 60 * 1000;
    let activeCount = 0;
    
    for (const [userId, lastActivity] of this.userActivityTracker) {
      if (lastActivity > fiveMinutesAgo) {
        activeCount++;
      } else {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        this.userActivityTracker.delete(userId);
      }
    }
    
    return activeCount;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getUserStats(userId) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Redis/–ë–î
    return {
      messagesCount: 'N/A',
      imagesCount: 'N/A',
      commandsCount: 'N/A',
      lastActivity: '–°–µ–π—á–∞—Å',
      textTasks: 'N/A',
      imageTasks: 'N/A',
      notifications: 'N/A',
      firstSeen: '–°–µ–π—á–∞—Å',
      avgResponseTime: 'N/A'
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
   */
  async start() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ OptimizedQueuedBot...');
      
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
      await this.initializeWorkers();
      
      // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
      this.setupBotHandlers();
      
      // 3. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.monitoringServer.start();
      
      // 4. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
      console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      await this.bot.launch();
      
      // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
      this.setupGracefulShutdown();
      
      console.log('‚úÖ OptimizedQueuedBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:${process.env.MONITORING_PORT || 3001}`);
      console.log(`üìã Bull Board: http://localhost:${process.env.MONITORING_PORT || 3001}/admin/queues`);
      console.log(`üìà –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:${process.env.MONITORING_PORT || 3001}/api/metrics`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OptimizedQueuedBot:', error);
      await this.errorHandler.handleError(error, null, true);
      process.exit(1);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
   */
  setupGracefulShutdown() {
    process.once('SIGINT', () => this.shutdown('SIGINT'));
    process.once('SIGTERM', () => this.shutdown('SIGTERM'));
  }

  /**
   * Graceful shutdown –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
   */
  async shutdown(signal) {
    if (this.isShuttingDown) {
      console.log('‚ö†Ô∏è Shutdown —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }
    
    this.isShuttingDown = true;
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...`);
    
    try {
      // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      console.log('ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...');
      this.bot.stop(signal);
      
      // 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º monitoring server
      console.log('üìä –ó–∞–∫—Ä—ã—Ç–∏–µ monitoring server...');
      await this.monitoringServer.shutdown();
      
      // 3. Graceful shutdown queue manager
      console.log('üìã Shutdown queue manager...');
      await this.queueManager.shutdown();
      
      // 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º metrics collector
      if (this.metricsCollector) {
        await this.metricsCollector.shutdown();
      }
      
      console.log('‚úÖ OptimizedQueuedBot –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown:', error);
      process.exit(1);
    }
  }
}

module.exports = OptimizedQueuedBot;
