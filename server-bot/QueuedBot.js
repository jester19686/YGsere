require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });
const { Telegraf } = require('telegraf');
const { HttpsProxyAgent } = require('https-proxy-agent');

// –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏
const QueueManager = require('../lib/QueueManager');
const TextGenerationWorker = require('../lib/workers/TextGenerationWorker');
const ImageProcessingWorker = require('../lib/workers/ImageProcessingWorker');
const NotificationWorker = require('../lib/workers/NotificationWorker');

class QueuedBot {
  constructor() {
    this.BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    if (!this.BOT_TOKEN) {
      console.error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      process.exit(1);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    const proxyUrl = process.env.HTTPS_PROXY || process.env.HTTP_PROXY || '';
    const agent = proxyUrl ? new HttpsProxyAgent(proxyUrl) : undefined;

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    this.bot = new Telegraf(this.BOT_TOKEN, {
      telegram: {
        apiRoot: process.env.TELEGRAM_API_ROOT || 'https://api.telegram.org',
        agent,
      },
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
    this.queueManager = null;
    this.workers = {};
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.userSessions = new Map();
    this.rateLimiter = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.init();
  }

  async init() {
    try {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QueuedBot...');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π
      this.queueManager = new QueueManager();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.waitForRedisConnection();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
      this.workers.textGeneration = new TextGenerationWorker(this.bot, this.queueManager);
      this.workers.imageProcessing = new ImageProcessingWorker(this.bot, this.queueManager);
      this.workers.notification = new NotificationWorker(this.bot, this.queueManager);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
      this.setupBotHandlers();
      
      console.log('QueuedBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QueuedBot:', error);
      throw error;
    }
  }

  async waitForRedisConnection() {
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      try {
        await this.queueManager.connection.ping();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return;
      } catch (error) {
        attempts++;
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...`);
        if (attempts >= maxAttempts) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis');
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }

  setupBotHandlers() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...');

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      await this.handleStart(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.command('help', async (ctx) => {
      await this.handleHelp(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
    this.bot.command('status', async (ctx) => {
      await this.handleStatus(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.bot.command('stats', async (ctx) => {
      await this.handleStats(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      await this.handleTextMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.bot.on('photo', async (ctx) => {
      await this.handlePhoto(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
    this.bot.on('document', async (ctx) => {
      await this.handleDocument(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', async (ctx) => {
      await this.handleCallbackQuery(ctx);
    });

    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const user = ctx.from;
      console.log(`üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.id}: ${ctx.message?.text || ctx.updateType}`);
      
      await next();
      
      const duration = Date.now() - start;
      console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${duration}ms`);
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async handleStart(ctx) {
    const user = ctx.from;
    const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || user.username || `tg_${user.id}`;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ payload –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    const payload = (ctx.startPayload || '').trim();
    
    if (payload && payload.startsWith('AUTH_')) {
      const token = payload.slice('AUTH_'.length);
      await ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç', {
        reply_markup: {
          inline_keyboard: [[{ text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å', callback_data: `AUTH:${token}` }]],
        },
      });
      return;
    }

    if (payload) {
      // –°—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      try {
        const resp = await fetch(process.env.APP_BASE_URL + '/api/auth/tg/otp/confirm', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            code: payload,
            id: user.id,
            username: user.username,
            first_name: user.first_name,
            last_name: user.last_name,
            photo_url: null,
          })
        });
        const ok = resp.ok;
        await ctx.reply(ok ? `–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç.` : `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.`);
      } catch (e) {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      return;
    }

    // –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –æ—á–µ—Ä–µ–¥—è–º–∏
    const welcomeMessage = `
ü§ñ **–ü—Ä–∏–≤–µ—Ç, ${name}!**

–Ø —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π –∏ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ AI
üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ
‚öôÔ∏è /status - —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏  
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ - —É–≤–∏–¥–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É!
    `;

    await ctx.reply(welcomeMessage, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true 
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    await this.queueManager.addNotificationJob({
      type: 'immediate',
      recipients: [ctx.chat.id],
      message: `üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π!`,
      options: { silent: true }
    });
  }

  async handleHelp(ctx) {
    const helpMessage = `
üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
üìù **–¢–µ–∫—Å—Ç** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
   ‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
   
üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)
   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è

**–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
üìà –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    `;

    await ctx.reply(helpMessage, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true 
    });
  }

  async handleStatus(ctx) {
    try {
      const stats = await this.queueManager.getQueueStats();
      
      let statusMessage = 'üìä **–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π:**\n\n';
      
      for (const [queueName, queueStats] of Object.entries(stats)) {
        const emoji = this.getQueueEmoji(queueName);
        statusMessage += `${emoji} **${this.getQueueDisplayName(queueName)}:**\n`;
        
        if (queueStats.error) {
          statusMessage += `   ‚ùå –û—à–∏–±–∫–∞: ${queueStats.error}\n\n`;
        } else {
          statusMessage += `   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${queueStats.waiting}\n`;
          statusMessage += `   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${queueStats.active}\n`;
          statusMessage += `   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${queueStats.completed}\n`;
          statusMessage += `   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ: ${queueStats.failed}\n\n`;
        }
      }

      // –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤
      statusMessage += 'üîß **–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤:**\n';
      for (const [name, worker] of Object.entries(this.workers)) {
        const workerStats = worker.getStats();
        statusMessage += `‚Ä¢ ${name}: ${workerStats.isRunning ? 'üü¢' : 'üî¥'} `;
        statusMessage += `(concurrency: ${workerStats.concurrency})\n`;
      }

      statusMessage += `\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(statusMessage, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_status' }],
            [{ text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' }]
          ]
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π');
    }
  }

  async handleStats(ctx) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const userSession = this.getUserSession(ctx.from.id);
    
    let statsMessage = 'üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n';
    
    statsMessage += `üë§ **–í–∞—à–∞ —Å–µ—Å—Å–∏—è:**\n`;
    statsMessage += `‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${userSession.textRequests}\n`;
    statsMessage += `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${userSession.imageRequests}\n`;
    statsMessage += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userSession.lastActivity.toLocaleString('ru-RU')}\n\n`;
    
    // –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    try {
      const queueStats = await this.queueManager.getQueueStats();
      let totalJobs = 0;
      
      for (const stats of Object.values(queueStats)) {
        if (!stats.error) {
          totalJobs += stats.total;
        }
      }
      
      statsMessage += `üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      statsMessage += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalJobs}\n`;
      statsMessage += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.userSessions.size}\n`;
      
    } catch (error) {
      statsMessage += `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`;
    }

    await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
  }

  async handleTextMessage(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const messageText = ctx.message.text;

    // Rate limiting
    if (this.isRateLimited(userId)) {
      await ctx.reply('‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
      return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSession = this.getUserSession(userId);
    userSession.textRequests++;
    userSession.lastActivity = new Date();

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const processingMsg = await ctx.reply('üîÑ –î–æ–±–∞–≤–ª—è—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...');

    try {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      const messageType = this.categorizeMessage(messageText);
      const priority = this.calculatePriority(messageType, userId);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
      const job = await this.queueManager.addTextGenerationJob({
        userId,
        chatId,
        messageText,
        messageType,
        priority,
        processingMsgId: processingMsg.message_id,
        timestamp: new Date().toISOString()
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
      await this.bot.telegram.editMessageText(
        chatId,
        processingMsg.message_id,
        null,
        `‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (ID: ${job.id})\nüïê –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${this.getEstimatedTime(messageType)}`
      );

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rate limit
      this.setRateLimit(userId);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', error);
      await this.bot.telegram.editMessageText(
        chatId,
        processingMsg.message_id,
        null,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å'
      );
    }
  }

  async handlePhoto(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const photo = ctx.message.photo;

    // Rate limiting –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π)
    if (this.isRateLimited(userId, 'image')) {
      await ctx.reply('‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
      return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSession = this.getUserSession(userId);
    userSession.imageRequests++;
    userSession.lastActivity = new Date();

    const processingMsg = await ctx.reply('üñºÔ∏è –î–æ–±–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...');

    try {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
      const processingType = ctx.message.caption ? 
        this.determineImageProcessingType(ctx.message.caption) : 'analyze';

      const job = await this.queueManager.addImageProcessingJob({
        userId,
        chatId,
        photoData: photo,
        processingType,
        priority: 1, // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        processingMsgId: processingMsg.message_id,
        timestamp: new Date().toISOString()
      });

      await this.bot.telegram.editMessageText(
        chatId,
        processingMsg.message_id,
        null,
        `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (ID: ${job.id})\nüîç –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingType}\nüïê –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 30-60 —Å–µ–∫`
      );

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rate limit –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      this.setRateLimit(userId, 'image');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      await this.bot.telegram.editMessageText(
        chatId,
        processingMsg.message_id,
        null,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å'
      );
    }
  }

  async handleDocument(ctx) {
    const document = ctx.message.document;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (document.mime_type && document.mime_type.startsWith('image/')) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      ctx.message.photo = [{
        file_id: document.file_id,
        file_unique_id: document.file_unique_id,
        width: 0, // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        height: 0,
        file_size: document.file_size
      }];
      
      await this.handlePhoto(ctx);
    } else {
      await ctx.reply('üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.');
    }
  }

  async handleCallbackQuery(ctx) {
    const data = ctx.callbackQuery?.data || '';
    
    try {
      if (data === 'refresh_status') {
        await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...');
        await this.handleStatus(ctx);
        return;
      }

      if (data === 'detailed_stats') {
        await ctx.answerCbQuery('–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        await this.handleStats(ctx);
        return;
      }

      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (data.startsWith('AUTH:')) {
        const token = data.slice('AUTH:'.length);
        const user = ctx.from;
        
        const resp = await fetch(process.env.APP_BASE_URL + '/api/auth/tg/otp/confirm', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            code: `AUTH_${token}`,
            id: user.id,
            username: user.username,
            first_name: user.first_name,
            last_name: user.last_name,
            photo_url: null,
          })
        });

        let ok = false;
        try {
          const js = await resp.json();
          ok = !!js?.ok && js?.status === 'confirmed';
        } catch { 
          ok = resp.ok; 
        }

        await ctx.answerCbQuery(ok ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
        
        const site = process.env.FRONT_BASE_URL || 'http://localhost:3000/lobby';
        const backUrl = `${site}${site.includes('?') ? '&' : '?'}auth=${encodeURIComponent(token)}`;
        
        try {
          await ctx.editMessageText(ok ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç.' : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å.', {
            reply_markup: ok ? { inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: backUrl }]] } : undefined,
          });
        } catch {}

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (ok) {
          try {
            await ctx.reply('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', {
              reply_markup: { inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: backUrl }]] }
            });
            await ctx.reply(`–°—Å—ã–ª–∫–∞: ${backUrl}`);
          } catch {}
        }
        
        return;
      }

      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  getUserSession(userId) {
    if (!this.userSessions.has(userId)) {
      this.userSessions.set(userId, {
        textRequests: 0,
        imageRequests: 0,
        lastActivity: new Date(),
        joinedAt: new Date()
      });
    }
    return this.userSessions.get(userId);
  }

  isRateLimited(userId, type = 'text') {
    const key = `${userId}_${type}`;
    const now = Date.now();
    const limit = this.rateLimiter.get(key);
    
    if (!limit) return false;
    
    const cooldown = type === 'image' ? 30000 : 5000; // 30—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, 5—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    return (now - limit) < cooldown;
  }

  setRateLimit(userId, type = 'text') {
    const key = `${userId}_${type}`;
    this.rateLimiter.set(key, Date.now());
  }

  categorizeMessage(text) {
    const length = text.length;
    const hasComplexWords = /–∞–Ω–∞–ª–∏–∑|—Å–ª–æ–∂–Ω|–¥–µ—Ç–∞–ª—å–Ω|–ø–æ–¥—Ä–æ–±–Ω|–≥–ª—É–±–æ–∫/i.test(text);
    const hasQuestions = text.includes('?') || /–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º/i.test(text);
    
    if (length > 200 || hasComplexWords) return 'complex';
    if (hasQuestions) return 'question';
    if (length < 50) return 'simple';
    return 'normal';
  }

  calculatePriority(messageType, userId) {
    let priority = 0;
    
    switch (messageType) {
      case 'simple': priority = 2; break;
      case 'question': priority = 1; break;
      case 'complex': priority = -1; break;
      default: priority = 0;
    }
    
    // –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    const premiumUsers = new Set(); // –î–æ–±–∞–≤—å—Ç–µ ID –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (premiumUsers.has(userId)) {
      priority += 2;
    }
    
    return priority;
  }

  getEstimatedTime(messageType) {
    switch (messageType) {
      case 'simple': return '5-10 —Å–µ–∫';
      case 'question': return '10-20 —Å–µ–∫';
      case 'complex': return '20-60 —Å–µ–∫';
      default: return '10-30 —Å–µ–∫';
    }
  }

  determineImageProcessingType(caption) {
    if (!caption) return 'analyze';
    
    const lower = caption.toLowerCase();
    if (lower.includes('—Ç–µ–∫—Å—Ç') || lower.includes('ocr')) return 'extract_text';
    if (lower.includes('–æ–±—ä–µ–∫—Ç') || lower.includes('–Ω–∞–π—Ç–∏')) return 'detect_objects';
    if (lower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ') || lower.includes('—á—Ç–æ –Ω–∞')) return 'generate_description';
    if (lower.includes('—É–ª—É—á—à') || lower.includes('–∫–∞—á–µ—Å—Ç–≤–æ')) return 'enhance';
    
    return 'analyze';
  }

  getQueueEmoji(queueName) {
    const emojis = {
      textGeneration: 'üí¨',
      imageProcessing: 'üñºÔ∏è',
      notification: 'üîî'
    };
    return emojis[queueName] || '‚öôÔ∏è';
  }

  getQueueDisplayName(queueName) {
    const names = {
      textGeneration: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞',
      imageProcessing: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      notification: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    };
    return names[queueName] || queueName;
  }

  async launchWithRetry() {
    const RETRY_MS = Number(process.env.BOT_RETRY_MS || 10000);
    try {
      try { 
        await this.bot.telegram.deleteWebhook({ drop_pending_updates: true }); 
      } catch {}
      
      await this.bot.launch({
        allowedUpdates: ['message', 'callback_query']
      });
      
      console.log('üöÄ QueuedBot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
      if (process.env.ADMIN_CHAT_ID) {
        await this.queueManager.addNotificationJob({
          type: 'immediate',
          recipients: [process.env.ADMIN_CHAT_ID],
          message: 'ü§ñ QueuedBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
        });
      }
      
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', e?.message || e);
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(RETRY_MS/1000)}—Å...`);
      setTimeout(() => this.launchWithRetry(), RETRY_MS);
    }
  }

  async shutdown() {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é QueuedBot...');
    
    try {
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
      this.bot.stop('SIGTERM');
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
      for (const [name, worker] of Object.entries(this.workers)) {
        await worker.close();
        console.log(`‚úÖ ${name} –≤–æ—Ä–∫–µ—Ä –∑–∞–∫—Ä—ã—Ç`);
      }
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π
      if (this.queueManager) {
        await this.queueManager.close();
        console.log('‚úÖ QueueManager –∑–∞–∫—Ä—ã—Ç');
      }
      
      console.log('üëã QueuedBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–µ:', error);
    }
  }
}

module.exports = QueuedBot;
