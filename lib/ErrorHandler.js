/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ Node.js Best Practices
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏)
 */
class AppError extends Error {
  constructor(message, isOperational = true, httpCode = 500, description = null) {
    super(message);
    
    this.name = this.constructor.name;
    this.isOperational = isOperational;
    this.httpCode = httpCode;
    this.description = description;
    this.timestamp = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π stack trace
    Error.captureStackTrace(this, this.constructor);
  }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
 */
class ValidationError extends AppError {
  constructor(message, details = null) {
    super(message, true, 400, 'Validation failed');
    this.details = details;
  }
}

class NotFoundError extends AppError {
  constructor(resource = 'Resource') {
    super(`${resource} not found`, true, 404, 'Resource not found');
  }
}

class TimeoutError extends AppError {
  constructor(operation, timeout) {
    super(`${operation} timed out after ${timeout}ms`, true, 408, 'Operation timeout');
    this.operation = operation;
    this.timeout = timeout;
  }
}

class RateLimitError extends AppError {
  constructor(limit, window) {
    super(`Rate limit exceeded: ${limit} requests per ${window}ms`, true, 429, 'Rate limit exceeded');
    this.limit = limit;
    this.window = window;
  }
}

class RedisConnectionError extends AppError {
  constructor(message) {
    super(`Redis connection error: ${message}`, true, 503, 'Service temporarily unavailable');
  }
}

class QueueError extends AppError {
  constructor(queueName, operation, originalError) {
    super(`Queue ${queueName} ${operation} failed: ${originalError.message}`, true, 500, 'Queue operation failed');
    this.queueName = queueName;
    this.operation = operation;
    this.originalError = originalError;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
class ErrorHandler {
  constructor(metricsCollector = null, notificationService = null) {
    this.metricsCollector = metricsCollector;
    this.notificationService = notificationService;
    this.isDevelopment = process.env.NODE_ENV === 'development';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.setupGlobalHandlers();
    
    console.log('üõ°Ô∏è ErrorHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  setupGlobalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ uncaught exceptions
    process.on('uncaughtException', (error) => {
      console.error('üí• Uncaught Exception:', error);
      this.handleError(error, null, true);
      
      if (!this.isTrustedError(error)) {
        console.error('üö® Untrusted error detected, shutting down...');
        process.exit(1);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled promise rejections
    process.on('unhandledRejection', (reason, promise) => {
      console.error('üí• Unhandled Promise Rejection at:', promise, 'reason:', reason);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Error –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Error
      const error = reason instanceof Error ? reason : new Error(reason);
      this.handleError(error, null, true);
      
      if (!this.isTrustedError(error)) {
        console.error('üö® Untrusted promise rejection, shutting down...');
        process.exit(1);
      }
    });

    // Graceful shutdown –ø—Ä–∏ SIGTERM/SIGINT
    process.on('SIGTERM', () => {
      console.log('üì° SIGTERM received, starting graceful shutdown...');
      this.shutdown();
    });

    process.on('SIGINT', () => {
      console.log('üì° SIGINT received, starting graceful shutdown...');
      this.shutdown();
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  async handleError(error, responseStream = null, isCritical = false) {
    try {
      // 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      await this.logError(error, isCritical);
      
      // 2. –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
      await this.recordErrorMetrics(error);
      
      // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (isCritical || this.isCriticalError(error)) {
        await this.sendCriticalAlert(error);
      }
      
      // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å response stream
      if (responseStream && !responseStream.headersSent) {
        await this.sendErrorResponse(error, responseStream);
      }
      
      // 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
      return this.isTrustedError(error);
      
    } catch (handlingError) {
      console.error('üí• Error in error handler:', handlingError);
      // Fallback - –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.error('Original error:', error);
    }
  }

  /**
   * –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
   */
  async logError(error, isCritical = false) {
    const errorInfo = {
      timestamp: new Date().toISOString(),
      level: isCritical ? 'CRITICAL' : 'ERROR',
      message: error.message,
      name: error.name,
      stack: this.isDevelopment ? error.stack : undefined,
      isOperational: error.isOperational || false,
      httpCode: error.httpCode || 500,
      description: error.description || null,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      queueName: error.queueName || null,
      operation: error.operation || null,
      userId: error.userId || null,
      requestId: error.requestId || null,
      // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      memory: process.memoryUsage(),
      pid: process.pid,
      uptime: process.uptime(),
    };

    // –¶–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ development
    if (this.isDevelopment) {
      console.error('\nüî¥ ===== ERROR DETAILS =====');
      console.error(`‚è∞ Time: ${errorInfo.timestamp}`);
      console.error(`üìõ Level: ${errorInfo.level}`);
      console.error(`üìù Message: ${errorInfo.message}`);
      console.error(`üè∑Ô∏è Name: ${errorInfo.name}`);
      console.error(`üîß Operational: ${errorInfo.isOperational}`);
      console.error(`üåê HTTP Code: ${errorInfo.httpCode}`);
      if (errorInfo.description) {
        console.error(`üìã Description: ${errorInfo.description}`);
      }
      if (errorInfo.stack) {
        console.error(`üìö Stack:\n${errorInfo.stack}`);
      }
      console.error('============================\n');
    } else {
      // Structured logging –¥–ª—è production
      console.error(JSON.stringify(errorInfo));
    }

    // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≤–Ω–µ—à–Ω–∏–µ logging —Å–µ—Ä–≤–∏—Å—ã (ELK, Winston, etc.)
    // await this.sendToExternalLogger(errorInfo);
  }

  /**
   * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
   */
  async recordErrorMetrics(error) {
    if (!this.metricsCollector) return;

    try {
      const errorType = this.classifyError(error);
      const component = this.identifyComponent(error);
      
      this.metricsCollector.recordError(errorType, component);
    } catch (metricsError) {
      console.error('Error recording metrics:', metricsError);
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
   */
  classifyError(error) {
    if (error instanceof ValidationError) return 'validation';
    if (error instanceof NotFoundError) return 'not_found';
    if (error instanceof TimeoutError) return 'timeout';
    if (error instanceof RateLimitError) return 'rate_limit';
    if (error instanceof RedisConnectionError) return 'redis_connection';
    if (error instanceof QueueError) return 'queue_operation';
    if (error.code === 'ECONNREFUSED') return 'connection_refused';
    if (error.code === 'ENOTFOUND') return 'dns_resolution';
    if (error.name === 'SyntaxError') return 'syntax';
    if (error.name === 'TypeError') return 'type';
    if (error.name === 'ReferenceError') return 'reference';
    return 'unknown';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
   */
  identifyComponent(error) {
    if (error.queueName) return 'queue';
    if (error.stack?.includes('Redis') || error instanceof RedisConnectionError) return 'redis';
    if (error.stack?.includes('telegram') || error.stack?.includes('bot')) return 'telegram_bot';
    if (error.stack?.includes('express') || error.stack?.includes('http')) return 'api';
    if (error.stack?.includes('worker')) return 'worker';
    return 'unknown';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendCriticalAlert(error) {
    if (!this.notificationService) return;

    try {
      const alert = {
        level: 'CRITICAL',
        title: `üö® Critical Error in ${process.env.APP_NAME || 'Telegram Bot'}`,
        message: error.message,
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'unknown',
        server: process.env.SERVER_NAME || 'unknown',
        errorType: error.name,
        isOperational: error.isOperational,
      };

      await this.notificationService.sendAlert(alert);
    } catch (notificationError) {
      console.error('Error sending critical alert:', notificationError);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
   */
  async sendErrorResponse(error, res) {
    try {
      const statusCode = error.httpCode || 500;
      const isOperational = this.isTrustedError(error);
      
      const response = {
        success: false,
        error: {
          message: isOperational ? error.message : 'Internal server error',
          code: error.name || 'ERROR',
          timestamp: new Date().toISOString(),
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ development
      if (this.isDevelopment && isOperational) {
        response.error.description = error.description;
        response.error.details = error.details;
        response.error.stack = error.stack;
      }

      res.status(statusCode).json(response);
    } catch (responseError) {
      console.error('Error sending error response:', responseError);
      // Fallback
      if (!res.headersSent) {
        res.status(500).json({ success: false, error: { message: 'Internal server error' } });
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–π (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π)
   */
  isTrustedError(error) {
    if (error instanceof AppError) {
      return error.isOperational;
    }
    
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏
    const trustedCodes = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT'];
    return trustedCodes.includes(error.code);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
   */
  isCriticalError(error) {
    if (error instanceof AppError) {
      return error.httpCode >= 500;
    }
    
    const criticalNames = ['ReferenceError', 'SyntaxError'];
    const criticalCodes = ['EMFILE', 'ENOMEM'];
    
    return criticalNames.includes(error.name) || criticalCodes.includes(error.code);
  }

  /**
   * Express middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  createExpressMiddleware() {
    return async (err, req, res, next) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—à–∏–±–∫–µ
      err.requestId = req.id || req.headers['x-request-id'];
      err.userId = req.user?.id;
      err.url = req.url;
      err.method = req.method;
      err.ip = req.ip;
      
      await this.handleError(err, res);
    };
  }

  /**
   * Wrapper –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  catchAsync(fn) {
    return (req, res, next) => {
      Promise.resolve(fn(req, res, next)).catch(next);
    };
  }

  /**
   * Graceful shutdown
   */
  async shutdown() {
    console.log('üõ°Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ErrorHandler...');
    
    try {
      // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('‚úÖ ErrorHandler –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ErrorHandler:', error);
      process.exit(1);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
module.exports = {
  ErrorHandler,
  AppError,
  ValidationError,
  NotFoundError,
  TimeoutError,
  RateLimitError,
  RedisConnectionError,
  QueueError,
};
