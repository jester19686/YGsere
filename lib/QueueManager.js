const { Queue, Worker } = require('bullmq');
const IORedis = require('ioredis');
const OptimizedImageProcessor = require('./OptimizedImageProcessor');

class QueueManager {
  constructor(metricsCollector = null, errorHandler = null) {
    this.metricsCollector = metricsCollector;
    this.errorHandler = errorHandler;
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
    this.redisConfig = {
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      password: process.env.REDIS_PASSWORD || '',
      
      // Connection Pool Settings
      maxRetriesPerRequest: 3,
      retryDelayOnFailover: 100,
      retryDelayOnClusterDown: 300,
      retryDelayOnTryAgain: 100,
      enableReadyCheck: true,
      maxLoadingTimeout: 5000,
      connectTimeout: 10000,
      lazyConnect: true,
      
      // Connection Pool
      family: 4, // 4 (IPv4) or 6 (IPv6)
      keepAlive: true,
      keepAliveInitialDelay: 0,
      
      // Performance Optimizations
      enableAutoPipelining: true,
      maxRetriesPerRequest: 3,
      retryDelayOnFailover: 100,
      enableOfflineQueue: false,
      
      // Memory optimization
      db: 0,
      keyPrefix: process.env.REDIS_KEY_PREFIX || 'tg_queue:',
      
      // Retry strategy
      retryStrategy: (times) => {
        const delay = Math.min(times * 50, 2000);
        console.log(`Redis retry attempt ${times}, delay: ${delay}ms`);
        return delay;
      },
      
      // Connection events
      reconnectOnError: (err) => {
        const targetError = 'READONLY';
        return err.message.includes(targetError);
      },
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
    this.connection = new IORedis(this.redisConfig);
    this.setupRedisEventHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    this.queues = {
      textGeneration: new Queue('text-generation', { 
        connection: this.connection,
        defaultJobOptions: {
          removeOnComplete: parseInt(process.env.QUEUE_CLEANUP_COMPLETED || '25'),
          removeOnFail: parseInt(process.env.QUEUE_CLEANUP_FAILED || '50'),
          delay: 0,
          attempts: 3,
          backoff: {
            type: 'exponential',
            delay: 2000,
          },
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
          priority: 1,
          jobId: null, // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        }
      }),
      
      imageProcessing: new Queue('image-processing', { 
        connection: this.connection,
        defaultJobOptions: {
          removeOnComplete: parseInt(process.env.QUEUE_CLEANUP_COMPLETED || '15'),
          removeOnFail: parseInt(process.env.QUEUE_CLEANUP_FAILED || '30'),
          delay: 0,
          attempts: 2,
          backoff: {
            type: 'exponential',
            delay: 3000,
          },
          // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤
          priority: 2,
          timeout: 120000, // 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
        }
      }),
      
      notification: new Queue('notification', { 
        connection: this.connection,
        defaultJobOptions: {
          removeOnComplete: parseInt(process.env.QUEUE_CLEANUP_COMPLETED || '50'),
          removeOnFail: parseInt(process.env.QUEUE_CLEANUP_FAILED || '100'),
          delay: 0,
          attempts: 5,
          backoff: {
            type: 'exponential',
            delay: 1000,
          },
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          priority: 0,
          timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        }
      })
    };

    // –í–æ—Ä–∫–µ—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    this.workers = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.imageProcessor = new OptimizedImageProcessor({
      maxWorkers: parseInt(process.env.IMAGE_WORKER_THREADS || '2'),
      maxConcurrentTasks: parseInt(process.env.IMAGE_WORKER_CONCURRENCY || '3'),
      taskTimeout: parseInt(process.env.IMAGE_PROCESSING_TIMEOUT || '120000'),
      enableMetrics: true,
      logLevel: process.env.LOG_LEVEL || 'info'
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();
    
    console.log('QueueManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å OptimizedImageProcessor');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Redis
   */
  setupRedisEventHandlers() {
    this.connection.on('connect', () => {
      console.log('üîå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      this.updateRedisMetrics('connected');
    });

    this.connection.on('ready', () => {
      console.log('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      this.updateRedisMetrics('ready');
    });

    this.connection.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', err.message);
      this.updateRedisMetrics('error');
      if (this.errorHandler) {
        this.errorHandler.recordError('redis_connection', 'redis');
      }
    });

    this.connection.on('close', () => {
      console.log('üîå Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      this.updateRedisMetrics('disconnected');
    });

    this.connection.on('reconnecting', (time) => {
      console.log(`üîÑ Redis –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${time}ms`);
      this.updateRedisMetrics('reconnecting');
    });

    this.connection.on('end', () => {
      console.log('üîö Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Redis
   */
  updateRedisMetrics(status) {
    if (this.metricsCollector) {
      this.metricsCollector.updateRedisMetrics(status);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  setupEventHandlers() {
    Object.entries(this.queues).forEach(([name, queue]) => {
      const startTimes = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

      queue.on('waiting', (job) => {
        console.log(`‚è≥ [${name}] –ó–∞–¥–∞—á–∞ ${job.id} –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        if (this.metricsCollector) {
          this.metricsCollector.updateQueueMetrics(name, { waiting: 1 });
        }
      });

      queue.on('active', (job) => {
        console.log(`üöÄ [${name}] –ó–∞–¥–∞—á–∞ ${job.id} –Ω–∞—á–∞—Ç–∞`);
        startTimes.set(job.id, Date.now());
        if (this.metricsCollector) {
          this.metricsCollector.updateQueueMetrics(name, { active: 1 });
        }
      });

      queue.on('completed', (job, result) => {
        const startTime = startTimes.get(job.id);
        const duration = startTime ? (Date.now() - startTime) / 1000 : 0;
        startTimes.delete(job.id);
        
        console.log(`‚úÖ [${name}] –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration.toFixed(2)}s`);
        
        if (this.metricsCollector) {
          this.metricsCollector.recordJobExecution(name, job.name, duration, 'completed');
          this.metricsCollector.updateQueueMetrics(name, { completed: 1 });
        }
      });

      queue.on('failed', (job, err) => {
        const startTime = startTimes.get(job.id);
        const duration = startTime ? (Date.now() - startTime) / 1000 : 0;
        startTimes.delete(job.id);
        
        console.error(`‚ùå [${name}] –ó–∞–¥–∞—á–∞ ${job.id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –∑–∞ ${duration.toFixed(2)}s:`, err.message);
        
        if (this.metricsCollector) {
          this.metricsCollector.recordJobExecution(name, job.name, duration, 'failed');
          this.metricsCollector.updateQueueMetrics(name, { failed: 1 });
        }
        
        if (this.errorHandler) {
          this.errorHandler.recordError('queue_job_failed', 'queue');
        }
      });

      queue.on('error', (err) => {
        console.error(`üí• [${name}] –û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏:`, err.message);
        if (this.errorHandler) {
          this.errorHandler.recordError('queue_error', 'queue');
        }
      });

      queue.on('stalled', (job) => {
        console.warn(`‚ö†Ô∏è [${name}] –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–∏—Å–ª–∞`);
        if (this.metricsCollector) {
          this.metricsCollector.recordError('job_stalled', 'queue');
        }
      });
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
   */
  async addTextGenerationJob(data) {
    try {
      const job = await this.queues.textGeneration.add('generate-text', data, {
        priority: data.priority || 0,
        delay: data.delay || 0,
      });
      
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${job.id}`);
      return job;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async addImageProcessingJob(data) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OptimizedImageProcessor –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const job = await this.queues.imageProcessing.add('process-image', {
        ...data,
        useOptimizedProcessor: true,
        processingStartTime: Date.now()
      }, {
        priority: data.priority || 0,
        delay: data.delay || 0,
      });
      
      console.log(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${job.id} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OptimizedImageProcessor)`);
      return job;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      
      if (this.errorHandler) {
        this.errorHandler.recordError('add_image_job_failed', 'queue_manager');
      }
      
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OptimizedImageProcessor
   */
  async processImageOptimized(imageData, processingOptions = {}) {
    try {
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageData.file_id || imageData.url}`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!this.imageProcessor.isInitialized) {
        await this.imageProcessor.initialize();
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –æ–ø—Ü–∏—è–º
      let result;
      if (processingOptions.processingType === 'quick') {
        result = await this.imageProcessor.quickAnalyze(imageData);
      } else if (processingOptions.processingType === 'ocr') {
        result = await this.imageProcessor.processWithOCR(imageData);
      } else if (processingOptions.processingType === 'ai') {
        result = await this.imageProcessor.aiAnalyze(imageData);
      } else {
        // –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        result = await this.imageProcessor.fullProcess(imageData);
      }
      
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${result.processingTime?.total || 'N/A'}ms`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      if (this.metricsCollector) {
        this.metricsCollector.recordImageProcessing(result.processingTime?.total || 0, true);
      }
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error.message);
      
      if (this.errorHandler) {
        this.errorHandler.recordError('optimized_image_processing_failed', 'image_processor');
      }
      
      if (this.metricsCollector) {
        this.metricsCollector.recordImageProcessing(0, false);
      }
      
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async addNotificationJob(data) {
    try {
      const job = await this.queues.notification.add('send-notification', data, {
        priority: data.priority || 0,
        delay: data.delay || 0,
      });
      
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${job.id}`);
      return job;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats() {
    const stats = {};
    
    for (const [name, queue] of Object.entries(this.queues)) {
      try {
        const [waiting, active, completed, failed, delayed] = await Promise.all([
          queue.getWaiting(),
          queue.getActive(), 
          queue.getCompleted(),
          queue.getFailed(),
          queue.getDelayed()
        ]);
        
        stats[name] = {
          waiting: waiting.length,
          active: active.length,
          completed: completed.length,
          failed: failed.length,
          delayed: delayed.length,
          total: waiting.length + active.length + completed.length + failed.length + delayed.length,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
          isPaused: await queue.isPaused(),
          jobCounts: await queue.getJobCounts(),
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        if (this.metricsCollector) {
          this.metricsCollector.updateQueueMetrics(name, stats[name]);
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ ${name}:`, error);
        stats[name] = { 
          error: error.message,
          waiting: 0,
          active: 0,
          completed: 0,
          failed: 0,
          total: 0
        };
        
        if (this.errorHandler) {
          this.errorHandler.recordError('queue_stats_error', 'queue');
        }
      }
    }
    
    return stats;
  }

  /**
   * Health check –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
   */
  async healthCheck() {
    const health = {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      redis: {
        status: this.connection.status,
        connected: this.connection.status === 'ready'
      },
      queues: {},
      overall: true
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try {
      await this.connection.ping();
      health.redis.ping = 'ok';
    } catch (error) {
      health.redis.ping = 'failed';
      health.redis.error = error.message;
      health.overall = false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
    for (const [name, queue] of Object.entries(this.queues)) {
      try {
        const stats = await queue.getJobCounts();
        health.queues[name] = {
          status: 'healthy',
          isPaused: await queue.isPaused(),
          jobCounts: stats
        };
      } catch (error) {
        health.queues[name] = {
          status: 'unhealthy',
          error: error.message
        };
        health.overall = false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ OptimizedImageProcessor
    try {
      const imageProcessorHealth = await this.imageProcessor.healthCheck();
      health.imageProcessor = imageProcessorHealth;
      
      if (imageProcessorHealth.status !== 'healthy') {
        health.overall = false;
      }
    } catch (error) {
      health.imageProcessor = {
        status: 'error',
        error: error.message
      };
      health.overall = false;
    }

    health.status = health.overall ? 'healthy' : 'unhealthy';
    return health;
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  async pauseQueue(queueName) {
    if (this.queues[queueName]) {
      await this.queues[queueName].pause();
      console.log(`–û—á–µ—Ä–µ–¥—å ${queueName} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  async resumeQueue(queueName) {
    if (this.queues[queueName]) {
      await this.queues[queueName].resume();
      console.log(`–û—á–µ—Ä–µ–¥—å ${queueName} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  async clearQueue(queueName, state = 'completed') {
    if (this.queues[queueName]) {
      await this.queues[queueName].clean(0, 1000, state);
      console.log(`–û—á–µ—Ä–µ–¥—å ${queueName} –æ—á–∏—â–µ–Ω–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state})`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ –∏–º–µ–Ω–∏
   */
  getQueue(queueName) {
    return this.queues[queueName];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏
   */
  getAllQueues() {
    return this.queues;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ OptimizedImageProcessor
   */
  async getImageProcessorMetrics() {
    try {
      const metrics = this.imageProcessor.getMetrics();
      const workerStats = await this.imageProcessor.getWorkerStats();
      
      return {
        ...metrics,
        workerStats,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ imageProcessor:', error);
      return {
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Graceful shutdown –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  async shutdown() {
    console.log('üõë –ù–∞—á–∏–Ω–∞—é graceful shutdown QueueManager...');
    
    try {
      // 1. –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
      console.log('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π...');
      for (const [name, queue] of Object.entries(this.queues)) {
        try {
          await queue.pause();
          console.log(`‚è∏Ô∏è –û—á–µ—Ä–µ–¥—å ${name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–µ—Ä–µ–¥–∏ ${name}:`, error);
        }
      }
      
      // 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...');
      const shutdownTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
      const startTime = Date.now();
      
      while (Date.now() - startTime < shutdownTimeout) {
        const stats = await this.getQueueStats();
        const hasActiveTasks = Object.values(stats).some(stat => stat.active > 0);
        
        if (!hasActiveTasks) {
          console.log('‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
          break;
        }
        
        const activeTasks = Object.values(stats).reduce((sum, stat) => sum + stat.active, 0);
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${activeTasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      // 3. –ó–∞–∫—Ä—ã—Ç–∏–µ OptimizedImageProcessor
      console.log('üñºÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ OptimizedImageProcessor...');
      try {
        await this.imageProcessor.shutdown();
        console.log('‚úÖ OptimizedImageProcessor –∑–∞–∫—Ä—ã—Ç');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è OptimizedImageProcessor:', error);
      }

      // 4. –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
      console.log('üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤...');
      for (const [name, worker] of Object.entries(this.workers)) {
        try {
          await worker.close();
          console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä ${name} –∑–∞–∫—Ä—ã—Ç`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ—Ä–∫–µ—Ä–∞ ${name}:`, error);
        }
      }

      // 5. –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
      console.log('üìã –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—á–µ—Ä–µ–¥–µ–π...');
      for (const [name, queue] of Object.entries(this.queues)) {
        try {
          await queue.close();
          console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å ${name} –∑–∞–∫—Ä—ã—Ç–∞`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ ${name}:`, error);
        }
      }

      // 6. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
      console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
      try {
        if (this.connection.status !== 'end') {
          await this.connection.quit();
          console.log('‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis:', error);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        try {
          this.connection.disconnect();
          console.log('‚ö° Redis –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω');
        } catch (disconnectError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', disconnectError);
        }
      }
      
      console.log('‚úÖ QueueManager –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error);
      
      if (this.errorHandler) {
        this.errorHandler.recordError('shutdown_error', 'queue_manager');
      }
      
      return false;
    }
  }

  /**
   * –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  async close() {
    return await this.shutdown();
  }
}

module.exports = QueueManager;
