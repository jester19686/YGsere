const client = require('prom-client');

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
class MetricsCollector {
  constructor() {
    // –°–æ–∑–¥–∞–µ–º custom registry –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    this.register = new client.Registry();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º custom labels –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
    this.defaultLabels = {
      app: 'telegram-queue-system',
      version: process.env.npm_package_version || '1.0.0',
      instance: process.env.NODE_APP_INSTANCE || 'main',
    };
    
    this.register.setDefaultLabels(this.defaultLabels);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    this.initializeMetrics();
    
    // –°–æ–±–∏—Ä–∞–µ–º default Node.js –º–µ—Ç—Ä–∏–∫–∏
    client.collectDefaultMetrics({ 
      register: this.register,
      prefix: 'telegram_bot_',
    });
    
    console.log('üìä MetricsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  initializeMetrics() {
    // === –ú–ï–¢–†–ò–ö–ò –û–ß–ï–†–ï–î–ï–ô ===
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—è—Ö
    this.queueJobsTotal = new client.Gauge({
      name: 'queue_jobs_total',
      help: 'Total number of jobs in queues by status',
      labelNames: ['queue_name', 'status'], // waiting, active, completed, failed
      registers: [this.register],
    });

    // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    this.jobExecutionTime = new client.Histogram({
      name: 'job_execution_duration_seconds',
      help: 'Job execution time in seconds',
      labelNames: ['queue_name', 'job_type'],
      buckets: [0.1, 0.5, 1, 2, 5, 10, 30, 60], // —Å–µ–∫—É–Ω–¥—ã
      registers: [this.register],
    });

    // –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    this.jobsProcessedTotal = new client.Counter({
      name: 'jobs_processed_total',
      help: 'Total number of jobs processed',
      labelNames: ['queue_name', 'status'], // completed, failed
      registers: [this.register],
    });

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
    this.activeWorkers = new client.Gauge({
      name: 'active_workers_total',
      help: 'Number of active workers by queue',
      labelNames: ['queue_name'],
      registers: [this.register],
    });

    // === –ú–ï–¢–†–ò–ö–ò TELEGRAM –ë–û–¢–ê ===
    
    // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.telegramMessagesTotal = new client.Counter({
      name: 'telegram_messages_total',
      help: 'Total telegram messages received',
      labelNames: ['message_type'], // text, image, command
      registers: [this.register],
    });

    // –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    this.botResponseTime = new client.Histogram({
      name: 'bot_response_duration_seconds',
      help: 'Bot response time in seconds',
      labelNames: ['message_type'],
      buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5],
      registers: [this.register],
    });

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    this.activeUsers = new client.Gauge({
      name: 'telegram_active_users',
      help: 'Number of active users in last 5 minutes',
      registers: [this.register],
      collect() {
        // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const activeUserCount = this.userActivityTracker?.getActiveUserCount() || 0;
        this.set(activeUserCount);
      }
    });

    // === –ú–ï–¢–†–ò–ö–ò REDIS ===
    
    // Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.redisConnections = new client.Gauge({
      name: 'redis_connections_total',
      help: 'Number of Redis connections',
      labelNames: ['status'], // connected, connecting, reconnecting, error
      registers: [this.register],
    });

    // Redis –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.redisOperations = new client.Counter({
      name: 'redis_operations_total',
      help: 'Total Redis operations',
      labelNames: ['operation', 'status'], // get/set/del, success/error
      registers: [this.register],
    });

    // === –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
    
    // HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ monitoring API
    this.httpRequests = new client.Counter({
      name: 'http_requests_total',
      help: 'Total HTTP requests',
      labelNames: ['method', 'route', 'status_code'],
      registers: [this.register],
    });

    // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    this.httpRequestDuration = new client.Histogram({
      name: 'http_request_duration_seconds',
      help: 'HTTP request duration in seconds',
      labelNames: ['method', 'route'],
      buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],
      registers: [this.register],
    });

    // Errors counter
    this.errorsTotal = new client.Counter({
      name: 'errors_total',
      help: 'Total number of errors',
      labelNames: ['error_type', 'component'], // validation/network/database, bot/queue/api
      registers: [this.register],
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π
   */
  updateQueueMetrics(queueName, stats) {
    const { waiting = 0, active = 0, completed = 0, failed = 0 } = stats;
    
    this.queueJobsTotal.set({ queue_name: queueName, status: 'waiting' }, waiting);
    this.queueJobsTotal.set({ queue_name: queueName, status: 'active' }, active);
    this.queueJobsTotal.set({ queue_name: queueName, status: 'completed' }, completed);
    this.queueJobsTotal.set({ queue_name: queueName, status: 'failed' }, failed);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  recordJobExecution(queueName, jobType, durationSeconds, status) {
    this.jobExecutionTime.observe(
      { queue_name: queueName, job_type: jobType }, 
      durationSeconds
    );
    
    this.jobsProcessedTotal.inc({
      queue_name: queueName,
      status: status // 'completed' –∏–ª–∏ 'failed'
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  updateActiveWorkers(queueName, count) {
    this.activeWorkers.set({ queue_name: queueName }, count);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
   */
  recordTelegramMessage(messageType) {
    this.telegramMessagesTotal.inc({ message_type: messageType });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
   */
  recordBotResponse(messageType, durationSeconds) {
    this.botResponseTime.observe({ message_type: messageType }, durationSeconds);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Redis
   */
  updateRedisMetrics(connectionStatus, operationType, operationStatus) {
    if (connectionStatus) {
      this.redisConnections.set({ status: connectionStatus }, 1);
    }
    
    if (operationType && operationStatus) {
      this.redisOperations.inc({ 
        operation: operationType, 
        status: operationStatus 
      });
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
   */
  recordHttpRequest(method, route, statusCode, durationSeconds) {
    this.httpRequests.inc({
      method: method.toUpperCase(),
      route: route,
      status_code: statusCode.toString()
    });
    
    if (durationSeconds !== undefined) {
      this.httpRequestDuration.observe({
        method: method.toUpperCase(),
        route: route
      }, durationSeconds);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏
   */
  recordError(errorType, component) {
    this.errorsTotal.inc({
      error_type: errorType,
      component: component
    });
  }

  /**
   * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ HTTP –º–µ—Ç—Ä–∏–∫
   */
  createHttpMiddleware() {
    return (req, res, next) => {
      const startTime = Date.now();
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      res.on('finish', () => {
        const duration = (Date.now() - startTime) / 1000;
        const route = this.normalizeRoute(req.route?.path || req.path || 'unknown');
        
        this.recordHttpRequest(
          req.method,
          route,
          res.statusCode,
          duration
        );
      });
      
      next();
    };
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è route –¥–ª—è –º–µ—Ç—Ä–∏–∫ (—É–±–∏—Ä–∞–µ–º ID –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
   */
  normalizeRoute(path) {
    return path
      .replace(/\/\d+/g, '/:id')           // /123 -> /:id
      .replace(/\/[a-f0-9-]{36}/g, '/:uuid') // UUID -> :uuid
      .replace(/\/[a-f0-9]{24}/g, '/:objectid'); // MongoDB ObjectId -> :objectid
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
   */
  async getMetrics() {
    return await this.register.metrics();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
   */
  async getMetricsJSON() {
    return await this.register.getMetricsAsJSON();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
   */
  clear() {
    this.register.clear();
  }

  /**
   * Graceful shutdown - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async shutdown() {
    console.log('üìä –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MetricsCollector...');
    this.clear();
  }
}

module.exports = MetricsCollector;
