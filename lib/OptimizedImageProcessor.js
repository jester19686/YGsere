/**
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É–ª–æ–º worker threads –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º management
 */

const { spawn, Pool, Worker, Thread } = require('threads');
const pLimit = require('p-limit');
const path = require('path');

class OptimizedImageProcessor {
  constructor(options = {}) {
    this.config = {
      // –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
      maxWorkers: options.maxWorkers || 2, // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      maxConcurrentTasks: options.maxConcurrentTasks || 3, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      
      // –¢–∞–π–º–∞—É—Ç—ã
      taskTimeout: options.taskTimeout || 120000, // 2 –º–∏–Ω—É—Ç—ã
      workerIdleTimeout: options.workerIdleTimeout || 300000, // 5 –º–∏–Ω—É—Ç
      
      // Retry –ª–æ–≥–∏–∫–∞
      maxRetries: options.maxRetries || 2,
      retryDelay: options.retryDelay || 1000,
      
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      enableMetrics: options.enableMetrics !== false,
      logLevel: options.logLevel || 'info'
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    this.isInitialized = false;
    this.workerPool = null;
    this.concurrencyLimiter = pLimit(this.config.maxConcurrentTasks);
    
    // –ú–µ—Ç—Ä–∏–∫–∏
    this.metrics = {
      totalProcessed: 0,
      totalFailed: 0,
      averageProcessingTime: 0,
      activeWorkers: 0,
      queuedTasks: 0,
      lastError: null,
      processingTimes: []
    };
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.activeTasks = new Map();
    
    console.log(`üñºÔ∏è OptimizedImageProcessor initialized with ${this.config.maxWorkers} workers`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async initialize() {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è OptimizedImageProcessor already initialized');
      return;
    }

    try {
      console.log('üöÄ Initializing worker pool...');
      
      // –ü—É—Ç—å –∫ worker —Ñ–∞–π–ª—É
      const workerPath = path.join(__dirname, 'ImageProcessingWorker.js');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
      this.workerPool = Pool(
        () => spawn(new Worker(workerPath)),
        this.config.maxWorkers
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
      this.setupWorkerErrorHandling();
      
      this.isInitialized = true;
      console.log(`‚úÖ Worker pool initialized with ${this.config.maxWorkers} workers`);
      
    } catch (error) {
      console.error('‚ùå Failed to initialize worker pool:', error.message);
      throw new Error(`Worker pool initialization failed: ${error.message}`);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  setupWorkerErrorHandling() {
    // –î–ª—è threads.js –ø—É–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
    // –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç—Ä–∏–∫–∏
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async processImage(imageData, processingOptions = {}) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const taskId = `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const startTime = Date.now();
    
    console.log(`üîÑ Starting image processing task ${taskId}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    this.activeTasks.set(taskId, {
      startTime,
      imageData: imageData.file_id || imageData.url,
      options: processingOptions
    });

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º concurrency limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
      const result = await this.concurrencyLimiter(async () => {
        return await this.executeWithRetry(taskId, imageData, processingOptions);
      });

      const processingTime = Date.now() - startTime;
      this.updateMetrics(true, processingTime);
      
      console.log(`‚úÖ Image processing task ${taskId} completed in ${processingTime}ms`);
      
      return result;
      
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.updateMetrics(false, processingTime, error);
      
      console.error(`‚ùå Image processing task ${taskId} failed after ${processingTime}ms:`, error.message);
      throw error;
      
    } finally {
      this.activeTasks.delete(taskId);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async executeWithRetry(taskId, imageData, processingOptions, attempt = 1) {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è worker thread
      const workerImageData = await this.prepareImageDataForWorker(imageData);
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ worker pool —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const result = await Promise.race([
        this.workerPool.queue(async (worker) => {
          this.metrics.activeWorkers++;
          try {
            return await worker.processImage(workerImageData, processingOptions);
          } finally {
            this.metrics.activeWorkers--;
          }
        }),
        this.createTimeoutPromise(taskId)
      ]);

      return {
        ...result,
        taskId,
        attempt,
        processingMetadata: {
          workerProcessed: true,
          concurrentTasks: this.activeTasks.size,
          totalProcessed: this.metrics.totalProcessed
        }
      };
      
    } catch (error) {
      if (attempt < this.config.maxRetries && this.isRetryableError(error)) {
        console.log(`üîÑ Retrying task ${taskId}, attempt ${attempt + 1}/${this.config.maxRetries}`);
        await this.delay(this.config.retryDelay * attempt);
        return await this.executeWithRetry(taskId, imageData, processingOptions, attempt + 1);
      }
      
      throw new Error(`Task ${taskId} failed after ${attempt} attempts: ${error.message}`);
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è worker thread
   */
  async prepareImageDataForWorker(imageData) {
    // –ï—Å–ª–∏ —ç—Ç–æ Telegram file_id, –ø–æ–ª—É—á–∞–µ–º URL —á–µ—Ä–µ–∑ Bot API
    if (imageData.file_id && !imageData.file_url) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è file URL —á–µ—Ä–µ–∑ Bot API
      // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
      console.log(`üì° Getting file URL for ${imageData.file_id}`);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Bot API
      // const fileUrl = await this.telegramBot.getFileUrl(imageData.file_id);
      
      return {
        ...imageData,
        file_url: `https://api.telegram.org/file/bot<TOKEN>/${imageData.file_path || 'mock_path'}`
      };
    }
    
    return imageData;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   */
  createTimeoutPromise(taskId) {
    return new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error(`Task ${taskId} timed out after ${this.config.taskTimeout}ms`));
      }, this.config.taskTimeout);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  isRetryableError(error) {
    const retryableErrors = [
      'timeout',
      'network',
      'temporary',
      'ECONNRESET',
      'ENOTFOUND',
      'Worker terminated'
    ];
    
    return retryableErrors.some(keyword => 
      error.message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
   */
  updateMetrics(success, processingTime, error = null) {
    if (success) {
      this.metrics.totalProcessed++;
    } else {
      this.metrics.totalFailed++;
      this.metrics.lastError = {
        message: error.message,
        time: new Date().toISOString()
      };
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.metrics.processingTimes.push(processingTime);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    if (this.metrics.processingTimes.length > 100) {
      this.metrics.processingTimes.shift();
    }
    
    this.metrics.averageProcessingTime = 
      this.metrics.processingTimes.reduce((a, b) => a + b, 0) / 
      this.metrics.processingTimes.length;
    
    this.metrics.queuedTasks = this.activeTasks.size;
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
   */
  async quickAnalyze(imageData) {
    return await this.processImage(imageData, {
      includeAnalysis: true,
      includeOptimization: false,
      includeThumbnail: false,
      includeTextExtraction: false,
      includeObjectDetection: false
    });
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async fullProcess(imageData) {
    return await this.processImage(imageData, {
      includeAnalysis: true,
      includeOptimization: true,
      includeThumbnail: true,
      includeTextExtraction: false,
      includeObjectDetection: false
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
   */
  async processWithOCR(imageData) {
    return await this.processImage(imageData, {
      includeAnalysis: true,
      includeOptimization: false,
      includeThumbnail: true,
      includeTextExtraction: true,
      includeObjectDetection: false
    });
  }

  /**
   * AI –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async aiAnalyze(imageData) {
    return await this.processImage(imageData, {
      includeAnalysis: true,
      includeOptimization: false,
      includeThumbnail: true,
      includeTextExtraction: false,
      includeObjectDetection: true
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
   */
  getMetrics() {
    return {
      ...this.metrics,
      config: this.config,
      isInitialized: this.isInitialized,
      activeTasks: Array.from(this.activeTasks.entries()).map(([id, task]) => ({
        id,
        duration: Date.now() - task.startTime,
        imageData: task.imageData
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async getWorkerStats() {
    if (!this.isInitialized || !this.workerPool) {
      return { error: 'Worker pool not initialized' };
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
      const workerStatsPromises = [];
      
      for (let i = 0; i < this.config.maxWorkers; i++) {
        workerStatsPromises.push(
          this.workerPool.queue(async (worker) => {
            try {
              return await worker.getWorkerStats();
            } catch (error) {
              return { error: error.message };
            }
          })
        );
      }

      const workerStats = await Promise.allSettled(workerStatsPromises);
      
      return {
        totalWorkers: this.config.maxWorkers,
        activeWorkers: this.metrics.activeWorkers,
        workerDetails: workerStats.map((result, index) => ({
          workerId: index,
          status: result.status,
          stats: result.status === 'fulfilled' ? result.value : { error: result.reason.message }
        }))
      };
      
    } catch (error) {
      return { error: `Failed to get worker stats: ${error.message}` };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  async healthCheck() {
    const health = {
      status: 'unknown',
      details: {},
      timestamp: new Date().toISOString()
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      health.details.initialized = this.isInitialized;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä –ø—É–ª–∞
      health.details.workerPool = !!this.workerPool;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
      health.details.metrics = {
        totalProcessed: this.metrics.totalProcessed,
        totalFailed: this.metrics.totalFailed,
        activeTasks: this.activeTasks.size,
        averageProcessingTime: Math.round(this.metrics.averageProcessingTime)
      };
      
      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞)
      if (this.isInitialized && this.activeTasks.size < this.config.maxConcurrentTasks) {
        health.details.testProcessing = 'available';
      } else {
        health.details.testProcessing = 'busy';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      if (this.isInitialized && this.workerPool) {
        if (this.metrics.totalFailed > this.metrics.totalProcessed * 0.5) {
          health.status = 'degraded';
        } else {
          health.status = 'healthy';
        }
      } else {
        health.status = 'unhealthy';
      }
      
    } catch (error) {
      health.status = 'error';
      health.details.error = error.message;
    }

    return health;
  }

  /**
   * Graceful shutdown
   */
  async shutdown() {
    console.log('üõë Shutting down OptimizedImageProcessor...');
    
    try {
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
      if (this.activeTasks.size > 0) {
        console.log(`‚è≥ Waiting for ${this.activeTasks.size} active tasks to complete...`);
        
        const maxWaitTime = 30000; // 30 —Å–µ–∫—É–Ω–¥
        const startTime = Date.now();
        
        while (this.activeTasks.size > 0 && (Date.now() - startTime) < maxWaitTime) {
          await this.delay(1000);
        }
        
        if (this.activeTasks.size > 0) {
          console.log(`‚ö†Ô∏è Force terminating ${this.activeTasks.size} remaining tasks`);
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
      if (this.workerPool) {
        await this.workerPool.terminate();
        console.log('‚úÖ Worker pool terminated');
      }
      
      this.isInitialized = false;
      this.workerPool = null;
      
      console.log('‚úÖ OptimizedImageProcessor shutdown completed');
      
    } catch (error) {
      console.error('‚ùå Error during shutdown:', error.message);
      throw error;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = OptimizedImageProcessor;
