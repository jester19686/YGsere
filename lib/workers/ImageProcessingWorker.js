const { Worker } = require('bullmq');
const IORedis = require('ioredis');
const axios = require('axios');

class ImageProcessingWorker {
  constructor(botInstance, queueManager) {
    this.bot = botInstance;
    this.queueManager = queueManager;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
    this.redisConfig = {
      host: process.env.REDIS_HOST || 'localhost',
      port: process.env.REDIS_PORT || 6379,
      password: process.env.REDIS_PASSWORD || '',
      maxRetriesPerRequest: null,
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxLoadingTimeout: 2000,
    };

    this.connection = new IORedis(this.redisConfig);

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.worker = new Worker(
      'image-processing',
      this.processJob.bind(this),
      {
        connection: this.connection,
        concurrency: 3, // –ú–µ–Ω—å—à–µ concurrency –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö –∑–∞–¥–∞—á
        removeOnComplete: 25,
        removeOnFail: 50,
      }
    );

    this.setupEventHandlers();
    console.log('ImageProcessingWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å concurrency: 3');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async processJob(job) {
    const { userId, chatId, photoData, processingType, options, testRequest } = job.data;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('PROCESSING_TIMEOUT')), 120000); // 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
    });
    
    try {
      console.log(`üñºÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Ç–∏–ø: ${processingType})`);
      
      await job.updateProgress(5);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const result = await Promise.race([
        this.processImageWithSteps(job, userId, chatId, photoData, processingType, options, testRequest),
        timeoutPromise
      ]);

      await job.updateProgress(100);
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
      return result;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id}:`, error.message);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      let errorMessage = '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
      
      if (error.message === 'PROCESSING_TIMEOUT') {
        errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (2 –º–∏–Ω). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
      } else if (error.message.includes('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏')) {
        errorMessage = '‚è±Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (error.message.includes('HTTP –æ—à–∏–±–∫–∞')) {
        errorMessage = 'üåê –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message.includes('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞')) {
        errorMessage = 'üì° –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
      if (!testRequest) {
        try {
          await this.bot.telegram.sendMessage(chatId, errorMessage);
        } catch (sendError) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
        }
      }
      
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async processImageWithSteps(job, userId, chatId, photoData, processingType, options, testRequest) {
    try {
      // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log(`üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${job.id}...`);
      
      let imageBuffer;
      if (testRequest) {
        // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
        console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É—é –º–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
        imageBuffer = Buffer.from('mock-image-data-for-testing');
      } else {
        // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        imageBuffer = await this.downloadImage(photoData);
      }
      
      await job.updateProgress(25);

      // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç–∏–ø: ${processingType})...`);
      const result = await this.processImage(job, imageBuffer, processingType, options);
      await job.updateProgress(75);

      // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      if (!testRequest) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
        await this.sendResult(chatId, result, processingType);
      } else {
        console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`);
      }
      
      await job.updateProgress(95);

      return { 
        success: true, 
        result: result,
        processedAt: new Date().toISOString(),
        processingType,
        userId,
        chatId,
        imageSize: imageBuffer ? imageBuffer.length : 0
      };
      
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      console.error(`üí• –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id}:`, {
        error: error.message,
        userId,
        processingType,
        stack: error.stack
      });
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
   */
  async downloadImage(photoData) {
    try {
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      const photo = photoData[photoData.length - 1];
      
      console.log(`–ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ file_id: ${photo.file_id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const file = await this.bot.telegram.getFile(photo.file_id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const botToken = process.env.TELEGRAM_BOT_TOKEN || this.bot.token;
      const fileUrl = `https://api.telegram.org/file/bot${botToken}/${file.file_path}`;
      
      console.log(`URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${fileUrl}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é axios
      const response = await axios.get(fileUrl, {
        responseType: 'arraybuffer',
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        maxContentLength: 20 * 1024 * 1024, // –ú–∞–∫—Å–∏–º—É–º 20MB
      });
      
      console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: ${response.data.length} –±–∞–π—Ç`);
      return Buffer.from(response.data);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (error.code === 'ECONNABORTED') {
        throw new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (>30—Å–µ–∫)');
      } else if (error.response) {
        throw new Error(`HTTP –æ—à–∏–±–∫–∞ ${error.response.status}: ${error.response.statusText}`);
      } else if (error.request) {
        throw new Error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async processImage(job, imageBuffer, processingType, options = {}) {
    try {
      switch (processingType) {
        case 'analyze':
          return await this.analyzeImage(job, imageBuffer);
        
        case 'enhance':
          return await this.enhanceImage(job, imageBuffer, options);
        
        case 'extract_text':
          return await this.extractText(job, imageBuffer);
        
        case 'detect_objects':
          return await this.detectObjects(job, imageBuffer);
        
        case 'generate_description':
          return await this.generateDescription(job, imageBuffer);
        
        default:
          return await this.basicAnalysis(job, imageBuffer);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async analyzeImage(job, imageBuffer) {
    // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await this.simulateProcessing(job, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...', 2000);
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å –≤–∞—à—É –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TensorFlow.js, OpenCV, –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–≥–æ API
    
    const analysis = {
      type: 'analysis',
      size: `${imageBuffer.length} –±–∞–π—Ç`,
      format: 'JPEG/PNG',
      estimated_objects: Math.floor(Math.random() * 10) + 1,
      quality: ['–í—ã—Å–æ–∫–æ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–ù–∏–∑–∫–æ–µ'][Math.floor(Math.random() * 3)],
      colors: ['–Ø—Ä–∫–∏–µ', '–ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ', '–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ'][Math.floor(Math.random() * 3)]
    };
    
    return {
      success: true,
      data: analysis,
      message: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω'
    };
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async enhanceImage(job, imageBuffer, options) {
    await this.simulateProcessing(job, '–£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', 3000);
    
    // TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    return {
      success: true,
      data: {
        type: 'enhancement',
        improvements: ['–ü–æ–≤—ã—à–µ–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç—å', '–£–ª—É—á—à–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å', '–°–Ω–∏–∂–µ–Ω —à—É–º'],
        original_size: imageBuffer.length,
        enhanced_size: Math.floor(imageBuffer.length * 1.2)
      },
      message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–æ'
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR)
   */
  async extractText(job, imageBuffer) {
    await this.simulateProcessing(job, '–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', 2500);
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ OCR –±–∏–±–ª–∏–æ—Ç–µ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Tesseract.js)
    
    const mockTexts = [
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"',
      '–ù–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–∞: 12345',
      '–¢–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
      '–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: "Hello World"'
    ];
    
    return {
      success: true,
      data: {
        type: 'text_extraction',
        text: mockTexts[Math.floor(Math.random() * mockTexts.length)],
        confidence: Math.floor(Math.random() * 40) + 60 // 60-100%
      },
      message: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
    };
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
   */
  async detectObjects(job, imageBuffer) {
    await this.simulateProcessing(job, '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞—é –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...', 3500);
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ YOLO, SSD –∏–ª–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    
    const objects = [
      '—á–µ–ª–æ–≤–µ–∫', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–¥–µ—Ä–µ–≤–æ', '–∑–¥–∞–Ω–∏–µ', '—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', 
      '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω'
    ];
    
    const detectedObjects = [];
    const numObjects = Math.floor(Math.random() * 5) + 1;
    
    for (let i = 0; i < numObjects; i++) {
      detectedObjects.push({
        object: objects[Math.floor(Math.random() * objects.length)],
        confidence: Math.floor(Math.random() * 30) + 70
      });
    }
    
    return {
      success: true,
      data: {
        type: 'object_detection',
        objects: detectedObjects,
        total_objects: detectedObjects.length
      },
      message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${detectedObjects.length}`
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async generateDescription(job, imageBuffer) {
    await this.simulateProcessing(job, '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', 4000);
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, BLIP, GPT-4 Vision)
    
    const descriptions = [
      '–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–∏–¥–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ —Å –∑–µ–ª–µ–Ω—ã–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏ –∏ –≥–æ–ª—É–±—ã–º –Ω–µ–±–æ–º.',
      '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥—Å–∫—É—é —Å—Ü–µ–Ω—É —Å –ª—é–¥—å–º–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —Å –º–µ–±–µ–ª—å—é –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.',
      '–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ –∏–ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.'
    ];
    
    return {
      success: true,
      data: {
        type: 'description_generation',
        description: descriptions[Math.floor(Math.random() * descriptions.length)],
        style: 'detailed'
      },
      message: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'
    };
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async basicAnalysis(job, imageBuffer) {
    await this.simulateProcessing(job, '–í—ã–ø–æ–ª–Ω—è—é –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...', 1500);
    
    return {
      success: true,
      data: {
        type: 'basic_analysis',
        size: `${(imageBuffer.length / 1024).toFixed(2)} KB`,
        processed: true
      },
      message: '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'
    };
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async simulateProcessing(job, statusMessage, duration) {
    console.log(`${statusMessage} (–∑–∞–¥–∞—á–∞ ${job.id})`);
    
    const steps = 10;
    const stepDuration = duration / steps;
    
    for (let i = 1; i <= steps; i++) {
      await new Promise(resolve => setTimeout(resolve, stepDuration));
      const progress = 20 + (i * 6); // –æ—Ç 20% –¥–æ 80%
      await job.updateProgress(progress);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendResult(chatId, result, processingType) {
    try {
      let message = 'üñºÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n';
      
      if (result.success) {
        message += `‚úÖ ${result.message}\n\n`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (result.data.type) {
          case 'analysis':
            message += `üìä **–ê–Ω–∞–ª–∏–∑:**\n`;
            message += `‚Ä¢ –†–∞–∑–º–µ—Ä: ${result.data.size}\n`;
            message += `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${result.data.quality}\n`;
            message += `‚Ä¢ –¶–≤–µ—Ç–∞: ${result.data.colors}\n`;
            message += `‚Ä¢ –û–±—ä–µ–∫—Ç–æ–≤: ~${result.data.estimated_objects}`;
            break;
            
          case 'text_extraction':
            message += `üìù **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n`;
            message += `${result.data.text}\n`;
            message += `üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.data.confidence}%`;
            break;
            
          case 'object_detection':
            message += `üîç **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:**\n`;
            result.data.objects.forEach(obj => {
              message += `‚Ä¢ ${obj.object} (${obj.confidence}%)\n`;
            });
            break;
            
          case 'description_generation':
            message += `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n`;
            message += result.data.description;
            break;
            
          case 'enhancement':
            message += `‚ú® **–£–ª—É—á—à–µ–Ω–∏—è:**\n`;
            result.data.improvements.forEach(improvement => {
              message += `‚Ä¢ ${improvement}\n`;
            });
            break;
            
          default:
            message += `üìã ${JSON.stringify(result.data, null, 2)}`;
        }
      } else {
        message += `‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.message}`;
      }
      
      await this.bot.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
   */
  setupEventHandlers() {
    this.worker.on('completed', (job) => {
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    });

    this.worker.on('failed', (job, err) => {
      console.error(`‚ùå –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job ? job.id : 'unknown'} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:`, err.message);
    });

    this.worker.on('progress', (job, progress) => {
      if (progress % 20 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20%
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id}: ${progress}%`);
      }
    });

    this.worker.on('error', (err) => {
      console.error('üî• –û—à–∏–±–∫–∞ ImageProcessingWorker:', err);
    });

    this.worker.on('ready', () => {
      console.log('üöÄ ImageProcessingWorker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ concurrency
   */
  setConcurrency(newConcurrency) {
    this.worker.concurrency = newConcurrency;
    console.log(`ImageProcessingWorker concurrency –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newConcurrency}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      concurrency: this.worker.concurrency,
      isRunning: this.worker.isRunning(),
      isPaused: this.worker.isPaused(),
    };
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
   */
  async close() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ ImageProcessingWorker...');
    try {
      await this.worker.close();
      this.connection.disconnect();
      console.log('ImageProcessingWorker –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ImageProcessingWorker:', error);
    }
  }
}

module.exports = ImageProcessingWorker;
