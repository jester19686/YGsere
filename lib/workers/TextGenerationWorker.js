const { Worker } = require('bullmq');
const IORedis = require('ioredis');

class TextGenerationWorker {
  constructor(botInstance, queueManager) {
    this.bot = botInstance;
    this.queueManager = queueManager;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis (—Ç–∞ –∂–µ, —á—Ç–æ –∏ –≤ QueueManager)
    this.redisConfig = {
      host: process.env.REDIS_HOST || 'localhost',
      port: process.env.REDIS_PORT || 6379,
      password: process.env.REDIS_PASSWORD || '',
      maxRetriesPerRequest: null,
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxLoadingTimeout: 2000,
    };

    this.connection = new IORedis(this.redisConfig);

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
    this.worker = new Worker(
      'text-generation',
      this.processJob.bind(this),
      {
        connection: this.connection,
        concurrency: 5, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ 5 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        removeOnComplete: 50,
        removeOnFail: 100,
      }
    );

    this.setupEventHandlers();
    console.log('TextGenerationWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å concurrency: 5');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
   */
  async processJob(job) {
    const { userId, chatId, messageText, messageType, priority, testRequest } = job.data;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('TEXT_GENERATION_TIMEOUT')), 60000); // 1 –º–∏–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º—É–º
    });
    
    try {
      console.log(`üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ${job.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Ç–∏–ø: ${messageType})`);
      
      await job.updateProgress(5);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const result = await Promise.race([
        this.processTextWithSteps(job, userId, chatId, messageText, messageType, testRequest),
        timeoutPromise
      ]);

      await job.updateProgress(100);
      console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${job.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
      return result;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ${job.id}:`, error.message);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      let errorMessage = '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.';
      
      if (error.message === 'TEXT_GENERATION_TIMEOUT') {
        errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (1 –º–∏–Ω). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.';
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      if (!testRequest) {
        try {
          await this.bot.telegram.sendMessage(chatId, errorMessage);
        } catch (sendError) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
        }
      }
      
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —à–∞–≥–∞–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
   */
  async processTextWithSteps(job, userId, chatId, messageText, messageType, testRequest) {
    try {
      // –®–∞–≥ 1: –°–∏–º—É–ª—è—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log(`üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${job.id}...`);
      await job.updateProgress(15);
      
      await this.simulateAIResponse(job, messageText);
      await job.updateProgress(50);

      // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const response = await this.generateAIResponse(messageText, messageType);
      await job.updateProgress(80);

      // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      if (!testRequest) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
        await this.sendResponse(chatId, response, messageType);
      } else {
        console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞`);
      }
      
      await job.updateProgress(95);

      return { 
        success: true, 
        response: response,
        processedAt: new Date().toISOString(),
        messageType,
        userId,
        chatId,
        messageLength: messageText.length
      };
      
    } catch (error) {
      console.error(`üí• –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ ${job.id}:`, {
        error: error.message,
        userId,
        messageType,
        messageLength: messageText.length
      });
      throw error;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
   */
  async simulateAIResponse(job, messageText) {
    const processingTime = Math.random() * 2000 + 1000; // 1-3 —Å–µ–∫—É–Ω–¥—ã
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const steps = 5;
    for (let i = 1; i <= steps; i++) {
      await new Promise(resolve => setTimeout(resolve, processingTime / steps));
      await job.updateProgress(10 + (i * 8)); // –æ—Ç 10% –¥–æ 50%
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
   */
  async generateAIResponse(messageText, messageType) {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å –≤–∞—à—É AI –ª–æ–≥–∏–∫—É
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ OpenAI, Claude, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    
    const responses = [
      `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${messageText}". –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...`,
      `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥: "${messageText}"`,
      `–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}". –í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç...`,
      `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${messageText}". –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!`
    ];
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let delay = 1000;
    switch (messageType) {
      case 'complex':
        delay = 3000;
        break;
      case 'simple':
        delay = 500;
        break;
      default:
        delay = 1500;
    }
    
    await new Promise(resolve => setTimeout(resolve, delay));
    
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendResponse(chatId, response, messageType) {
    try {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      let emoji = 'üí¨';
      switch (messageType) {
        case 'complex':
          emoji = 'üß†';
          break;
        case 'simple':
          emoji = '‚ú®';
          break;
        case 'question':
          emoji = '‚ùì';
          break;
      }

      const finalMessage = `${emoji} ${response}`;
      
      await this.bot.telegram.sendMessage(chatId, finalMessage, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
   */
  setupEventHandlers() {
    this.worker.on('completed', (job) => {
      console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    });

    this.worker.on('failed', (job, err) => {
      console.error(`‚ùå –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${job ? job.id : 'unknown'} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:`, err.message);
    });

    this.worker.on('progress', (job, progress) => {
      if (progress % 25 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 25%
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ ${job.id}: ${progress}%`);
      }
    });

    this.worker.on('error', (err) => {
      console.error('üî• –û—à–∏–±–∫–∞ TextGenerationWorker:', err);
    });

    this.worker.on('ready', () => {
      console.log('üöÄ TextGenerationWorker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
  }

  /**
   * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞
   */
  setConcurrency(newConcurrency) {
    this.worker.concurrency = newConcurrency;
    console.log(`Concurrency –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newConcurrency}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
   */
  getStats() {
    return {
      concurrency: this.worker.concurrency,
      isRunning: this.worker.isRunning(),
      isPaused: this.worker.isPaused(),
    };
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
   */
  async pause() {
    await this.worker.pause();
    console.log('TextGenerationWorker –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
   */
  async resume() {
    await this.worker.resume();
    console.log('TextGenerationWorker –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
   */
  async close() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ TextGenerationWorker...');
    try {
      await this.worker.close();
      this.connection.disconnect();
      console.log('TextGenerationWorker –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è TextGenerationWorker:', error);
    }
  }
}

module.exports = TextGenerationWorker;
