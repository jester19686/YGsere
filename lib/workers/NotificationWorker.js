const { Worker } = require('bullmq');
const IORedis = require('ioredis');

class NotificationWorker {
  constructor(botInstance, queueManager) {
    this.bot = botInstance;
    this.queueManager = queueManager;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
    this.redisConfig = {
      host: process.env.REDIS_HOST || 'localhost',
      port: process.env.REDIS_PORT || 6379,
      password: process.env.REDIS_PASSWORD || '',
      maxRetriesPerRequest: null,
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxLoadingTimeout: 2000,
    };

    this.connection = new IORedis(this.redisConfig);

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.worker = new Worker(
      'notification',
      this.processJob.bind(this),
      {
        connection: this.connection,
        concurrency: 10, // –í—ã—Å–æ–∫–∞—è concurrency –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        removeOnComplete: 100,
        removeOnFail: 200,
      }
    );

    this.setupEventHandlers();
    console.log('NotificationWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å concurrency: 10');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async processJob(job) {
    const { 
      type, 
      recipients, 
      message, 
      options = {},
      priority = 'normal',
      scheduledFor 
    } = job.data;
    
    try {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${job.id} —Ç–∏–ø–∞: ${type}`);
      
      await job.updateProgress(10);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (scheduledFor && new Date(scheduledFor) > new Date()) {
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${job.id} –æ—Ç–ª–æ–∂–µ–Ω–æ –¥–æ ${scheduledFor}`);
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        const delay = new Date(scheduledFor) - new Date();
        throw new Error(`DELAY:${delay}`);
      }

      await job.updateProgress(25);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const result = await this.sendNotification(job, type, recipients, message, options);
      
      await job.updateProgress(100);

      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${job.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      return {
        success: true,
        type: type,
        recipientsCount: Array.isArray(recipients) ? recipients.length : 1,
        sentAt: new Date().toISOString(),
        result: result
      };

    } catch (error) {
      if (error.message.startsWith('DELAY:')) {
        // –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏–µ
        const delay = parseInt(error.message.split(':')[1]);
        throw new Error(`–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ ${delay}ms`);
      }
      
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${job.id}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  async sendNotification(job, type, recipients, message, options) {
    switch (type) {
      case 'immediate':
        return await this.sendImmediateNotification(job, recipients, message, options);
      
      case 'broadcast':
        return await this.sendBroadcastNotification(job, recipients, message, options);
      
      case 'status_update':
        return await this.sendStatusUpdate(job, recipients, message, options);
      
      case 'queue_status':
        return await this.sendQueueStatusNotification(job, recipients, options);
      
      case 'error_alert':
        return await this.sendErrorAlert(job, recipients, message, options);
      
      case 'completion_notice':
        return await this.sendCompletionNotice(job, recipients, message, options);
      
      default:
        return await this.sendGenericNotification(job, recipients, message, options);
    }
  }

  /**
   * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendImmediateNotification(job, recipients, message, options) {
    const results = [];
    const recipientList = Array.isArray(recipients) ? recipients : [recipients];
    
    await job.updateProgress(30);
    
    for (const recipient of recipientList) {
      try {
        await this.bot.telegram.sendMessage(recipient, message, {
          parse_mode: options.parseMode || 'HTML',
          disable_web_page_preview: options.disableWebPagePreview !== false,
          disable_notification: options.silent || false,
          reply_markup: options.replyMarkup || undefined
        });
        
        results.push({ recipient, status: 'sent' });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipient}:`, error);
        results.push({ recipient, status: 'failed', error: error.message });
      }
    }
    
    await job.updateProgress(80);
    return results;
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
   */
  async sendBroadcastNotification(job, recipients, message, options) {
    console.log(`–ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${recipients.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
    
    const results = [];
    const batchSize = options.batchSize || 30; // Telegram rate limit
    const delay = options.delay || 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    
    for (let i = 0; i < recipients.length; i += batchSize) {
      const batch = recipients.slice(i, i + batchSize);
      const progress = 30 + ((i / recipients.length) * 50);
      await job.updateProgress(Math.floor(progress));
      
      const batchPromises = batch.map(async (recipient) => {
        try {
          await this.bot.telegram.sendMessage(recipient, message, {
            parse_mode: options.parseMode || 'HTML',
            disable_web_page_preview: true,
            disable_notification: options.silent || false
          });
          return { recipient, status: 'sent' };
        } catch (error) {
          return { recipient, status: 'failed', error: error.message };
        }
      });
      
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
      if (i + batchSize < recipients.length) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    const successful = results.filter(r => r.status === 'sent').length;
    const failed = results.filter(r => r.status === 'failed').length;
    
    console.log(`–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –Ω–µ—É–¥–∞—á–Ω–æ`);
    return { successful, failed, details: results };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  async sendStatusUpdate(job, recipients, message, options) {
    const statusMessage = `üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞**\n\n${message}\n\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
    
    return await this.sendImmediateNotification(job, recipients, statusMessage, {
      ...options,
      parseMode: 'Markdown'
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–µ–π
   */
  async sendQueueStatusNotification(job, recipients, options) {
    try {
      const queueStats = await this.queueManager.getQueueStats();
      
      let message = 'üìä **–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π:**\n\n';
      
      for (const [queueName, stats] of Object.entries(queueStats)) {
        if (stats.error) {
          message += `‚ùå ${queueName}: –û—à–∏–±–∫–∞ - ${stats.error}\n`;
        } else {
          message += `üî∏ **${queueName}:**\n`;
          message += `   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${stats.waiting}\n`;
          message += `   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${stats.active}\n`;
          message += `   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}\n`;
          message += `   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ: ${stats.failed}\n\n`;
        }
      }
      
      message += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
      
      return await this.sendImmediateNotification(job, recipients, message, {
        ...options,
        parseMode: 'Markdown'
      });
      
    } catch (error) {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π: ${error.message}`;
      return await this.sendImmediateNotification(job, recipients, errorMessage, options);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorAlert(job, recipients, message, options) {
    const alertMessage = `üö® **–û–®–ò–ë–ö–ê**\n\n${message}\n\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
    
    return await this.sendImmediateNotification(job, recipients, alertMessage, {
      ...options,
      parseMode: 'Markdown',
      silent: false // –û—à–∏–±–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–∏—Ö–∏–º–∏
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
   */
  async sendCompletionNotice(job, recipients, message, options) {
    const completionMessage = `‚úÖ **–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n${message}\n\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
    
    return await this.sendImmediateNotification(job, recipients, completionMessage, {
      ...options,
      parseMode: 'Markdown'
    });
  }

  /**
   * –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendGenericNotification(job, recipients, message, options) {
    return await this.sendImmediateNotification(job, recipients, message, options);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventHandlers() {
    this.worker.on('completed', (job) => {
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${job.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    });

    this.worker.on('failed', (job, err) => {
      console.error(`‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${job ? job.id : 'unknown'} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, err.message);
    });

    this.worker.on('progress', (job, progress) => {
      if (progress % 25 === 0) {
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${job.id}: ${progress}%`);
      }
    });

    this.worker.on('error', (err) => {
      console.error('üî• –û—à–∏–±–∫–∞ NotificationWorker:', err);
    });

    this.worker.on('ready', () => {
      console.log('üöÄ NotificationWorker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
   */
  getStats() {
    return {
      concurrency: this.worker.concurrency,
      isRunning: this.worker.isRunning(),
      isPaused: this.worker.isPaused(),
    };
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ concurrency
   */
  setConcurrency(newConcurrency) {
    this.worker.concurrency = newConcurrency;
    console.log(`NotificationWorker concurrency –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newConcurrency}`);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async scheduleNotification(type, recipients, message, scheduledFor, options = {}) {
    const delay = new Date(scheduledFor) - new Date();
    
    if (delay > 0) {
      return await this.queueManager.addNotificationJob({
        type,
        recipients,
        message,
        options,
        scheduledFor,
        delay: delay
      });
    } else {
      throw new Error('–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
   */
  async close() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ NotificationWorker...');
    try {
      await this.worker.close();
      this.connection.disconnect();
      console.log('NotificationWorker –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è NotificationWorker:', error);
    }
  }
}

module.exports = NotificationWorker;
