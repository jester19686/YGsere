/**
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô WORKER –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OptimizedImageProcessor —Å worker threads –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π
 * –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const { Worker } = require('bullmq');
const IORedis = require('ioredis');

class OptimizedImageProcessingWorker {
  constructor(botInstance, queueManager) {
    this.bot = botInstance;
    this.queueManager = queueManager;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
    this.redisConfig = {
      host: process.env.REDIS_HOST || 'localhost',
      port: process.env.REDIS_PORT || 6379,
      password: process.env.REDIS_PASSWORD || '',
      maxRetriesPerRequest: null,
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxLoadingTimeout: 2000,
    };

    this.connection = new IORedis(this.redisConfig);

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    this.worker = new Worker(
      'image-processing',
      this.processJob.bind(this),
      {
        connection: this.connection,
        concurrency: parseInt(process.env.IMAGE_WORKER_CONCURRENCY || '2'), // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        removeOnComplete: parseInt(process.env.QUEUE_CLEANUP_COMPLETED || '15'),
        removeOnFail: parseInt(process.env.QUEUE_CLEANUP_FAILED || '30'),
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        stalledInterval: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
        maxStalledCount: 1, // –û–¥–∏–Ω retry –¥–ª—è –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
      }
    );

    this.setupEventHandlers();
    console.log(`üöÄ OptimizedImageProcessingWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å concurrency: ${this.worker.concurrency}`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async processJob(job) {
    const startTime = Date.now();
    const { 
      userId, 
      chatId, 
      photoData, 
      imageData, 
      processingType = 'quick', 
      options = {},
      testRequest = false,
      processingMessage
    } = job.data;
    
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id} (—Ç–∏–ø: ${processingType})`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OptimizedImageProcessor –¥–æ—Å—Ç—É–ø–µ–Ω
      if (!this.queueManager.imageProcessor) {
        throw new Error('OptimizedImageProcessor –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (!testRequest && this.bot && processingMessage) {
        try {
          await this.bot.telegram.editMessageText(
            processingMessage.chat_id,
            processingMessage.message_id,
            null,
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n‚ö° –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingType}\n‚è±Ô∏è –ó–∞–¥–∞—á–∞: ${job.id}`
          );
        } catch (editError) {
          console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', editError.message);
        }
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processingOptions = this.getProcessingOptions(processingType, options);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OptimizedImageProcessor
      const processingResult = await this.queueManager.processImageOptimized(imageData, processingOptions);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${job.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${processingTime}ms`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
      if (!testRequest && this.bot) {
        await this.sendResultToUser(chatId, processingResult, processingType, processingMessage);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        success: true,
        processingTime,
        processingType,
        result: processingResult,
        jobId: job.id,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      const processingTime = Date.now() - startTime;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job.id}:`, error.message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (!testRequest && this.bot) {
        await this.sendErrorToUser(chatId, error, processingMessage);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      return {
        success: false,
        error: error.message,
        processingTime,
        processingType,
        jobId: job.id,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  getProcessingOptions(processingType, customOptions = {}) {
    const baseOptions = {
      includeAnalysis: true,
      includeOptimization: false,
      includeThumbnail: false,
      includeTextExtraction: false,
      includeObjectDetection: false,
      ...customOptions
    };

    switch (processingType) {
      case 'quick':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: false,
          includeThumbnail: false
        };

      case 'full':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: true,
          includeThumbnail: true
        };

      case 'analyze':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: false,
          includeThumbnail: true
        };

      case 'optimize':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: true,
          includeThumbnail: false
        };

      case 'ocr':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: false,
          includeThumbnail: true,
          includeTextExtraction: true
        };

      case 'ai':
        return {
          ...baseOptions,
          includeAnalysis: true,
          includeOptimization: false,
          includeThumbnail: true,
          includeObjectDetection: true
        };

      default:
        return baseOptions;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendResultToUser(chatId, processingResult, processingType, processingMessage) {
    try {
      const message = this.formatResultMessage(processingResult, processingType);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      if (processingMessage) {
        try {
          await this.bot.telegram.editMessageText(
            processingMessage.chat_id,
            processingMessage.message_id,
            null,
            message,
            { parse_mode: 'Markdown' }
          );
        } catch (editError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.telegram.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        }
      } else {
        await this.bot.telegram.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error.message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await this.bot.telegram.sendMessage(chatId, '‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
      } catch (fallbackError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è:', fallbackError.message);
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  formatResultMessage(processingResult, processingType) {
    let message = `‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (processingResult.analysis) {
      const analysis = processingResult.analysis;
      message += `üìä **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n`;
      message += `‚Ä¢ –†–∞–∑–º–µ—Ä: ${analysis.width}√ó${analysis.height} –ø–∏–∫—Å–µ–ª–µ–π\n`;
      message += `‚Ä¢ –§–æ—Ä–º–∞—Ç: ${analysis.format?.toUpperCase()}\n`;
      message += `‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(analysis.size / 1024).toFixed(1)} –ö–ë\n`;
      message += `‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ${analysis.aspectRatio?.toFixed(2)}\n`;
      message += `‚Ä¢ –ú–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π: ${analysis.megapixels?.toFixed(1)}\n`;
      
      if (analysis.qualityScore) {
        message += `‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${analysis.qualityScore}/100\n`;
      }
      
      message += `\n`;
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (processingResult.optimization) {
      const opt = processingResult.optimization;
      message += `‚ö° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**\n`;
      message += `‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(opt.originalSize / 1024).toFixed(1)} –ö–ë\n`;
      message += `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(opt.optimizedSize / 1024).toFixed(1)} –ö–ë\n`;
      message += `‚Ä¢ –°–∂–∞—Ç–∏–µ: ${opt.compressionRatio}%\n\n`;
    }
    
    // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (processingResult.processingTime) {
      const totalTime = processingResult.processingTime.total;
      message += `‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${totalTime}ms\n`;
      
      if (processingResult.processingTime.analysis) {
        message += `‚Ä¢ –ê–Ω–∞–ª–∏–∑: ${processingResult.processingTime.analysis}ms\n`;
      }
      if (processingResult.processingTime.optimization) {
        message += `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${processingResult.processingTime.optimization}ms\n`;
      }
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (OCR)
    if (processingResult.textExtraction) {
      const text = processingResult.textExtraction;
      message += `\nüìù **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n`;
      if (text.text && text.text.length > 10) {
        message += `"${text.text.substring(0, 200)}${text.text.length > 200 ? '...' : ''}"\n`;
        message += `‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(text.confidence * 100).toFixed(1)}%\n`;
      } else {
        message += `–¢–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n`;
      }
    }
    
    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (AI)
    if (processingResult.objectDetection && processingResult.objectDetection.objects?.length > 0) {
      message += `\nüéØ **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:**\n`;
      processingResult.objectDetection.objects.forEach((obj, index) => {
        if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä–µ–∫—Ç–æ–≤
          message += `‚Ä¢ ${obj.description} (${(obj.confidence * 100).toFixed(1)}%)\n`;
        }
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (processingResult.analysis?.optimizationSuggestions?.length > 0) {
      message += `\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
      processingResult.analysis.optimizationSuggestions.slice(0, 2).forEach(suggestion => {
        message += `‚Ä¢ ${suggestion}\n`;
      });
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    message += `\nüîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendErrorToUser(chatId, error, processingMessage) {
    try {
      let errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n`;
      
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
        errorMessage += `‚è±Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è**\n`;
        errorMessage += `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ —Å–ª–æ–∂–Ω–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n`;
        errorMessage += `üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n`;
        errorMessage += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n`;
        errorMessage += `‚Ä¢ –°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n`;
        errorMessage += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ\n`;
      } else if (error.message.includes('download') || error.message.includes('network')) {
        errorMessage += `üåê **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n`;
        errorMessage += `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram.\n\n`;
        errorMessage += `üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ**\n`;
      } else if (error.message.includes('format') || error.message.includes('invalid')) {
        errorMessage += `üìÅ **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç**\n`;
        errorMessage += `–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n`;
        errorMessage += `üí° **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** JPEG, PNG, WebP\n`;
      } else {
        errorMessage += `üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n`;
        errorMessage += `${error.message}\n\n`;
        errorMessage += `üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ**\n`;
      }
      
      errorMessage += `\nüîÑ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (processingMessage) {
        try {
          await this.bot.telegram.editMessageText(
            processingMessage.chat_id,
            processingMessage.message_id,
            null,
            errorMessage,
            { parse_mode: 'Markdown' }
          );
        } catch (editError) {
          await this.bot.telegram.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
        }
      } else {
        await this.bot.telegram.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
      }
      
    } catch (sendError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
   */
  setupEventHandlers() {
    this.worker.on('ready', () => {
      console.log('‚úÖ OptimizedImageProcessingWorker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });

    this.worker.on('active', (job) => {
      console.log(`üîÑ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${job.id}`);
    });

    this.worker.on('completed', (job, result) => {
      const processingTime = result?.processingTime || 0;
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${job.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${processingTime}ms`);
    });

    this.worker.on('failed', (job, err) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${job?.id}:`, err.message);
    });

    this.worker.on('stalled', (jobId) => {
      console.warn(`‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${jobId} –∑–∞–≤–∏—Å–ª–∞`);
    });

    this.worker.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ OptimizedImageProcessingWorker:', err.message);
    });
  }

  /**
   * Graceful shutdown –≤–æ—Ä–∫–µ—Ä–∞
   */
  async close() {
    console.log('üõë –ó–∞–∫—Ä—ã–≤–∞—é OptimizedImageProcessingWorker...');
    
    try {
      await this.worker.close();
      await this.connection.quit();
      console.log('‚úÖ OptimizedImageProcessingWorker –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è OptimizedImageProcessingWorker:', error.message);
      throw error;
    }
  }
}

module.exports = OptimizedImageProcessingWorker;
